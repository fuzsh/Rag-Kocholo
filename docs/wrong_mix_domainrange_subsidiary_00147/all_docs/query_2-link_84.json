{
    "id": "wrong_mix_domainrange_subsidiary_00147_2",
    "rank": 84,
    "data": {
        "url": "https://www.mdpi.com/2073-8994/16/6/684",
        "read_more_link": "",
        "language": "en",
        "title": "Design Procedure for Real-Time Cyber–Physical Systems Tolerant to Cyberattacks",
        "top_image": "https://pub.mdpi-res.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g001-550.jpg?1717408074",
        "meta_img": "https://pub.mdpi-res.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g001-550.jpg?1717408074",
        "images": [
            "https://pub.mdpi-res.com/img/design/mdpi-pub-logo-black-small1.svg?da3a8dcae975a41c?1721815055",
            "https://pub.mdpi-res.com/img/design/mdpi-pub-logo-black-small1.svg?da3a8dcae975a41c?1721815055",
            "https://pub.mdpi-res.com/img/journals/symmetry-logo.png?2c65edf82f527115",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://pub.mdpi-res.com/img/design/orcid.png?0465bc3812adeb52?1721815055",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://pub.mdpi-res.com/img/design/orcid.png?0465bc3812adeb52?1721815055",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://pub.mdpi-res.com/img/design/orcid.png?0465bc3812adeb52?1721815055",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://pub.mdpi-res.com/img/design/orcid.png?0465bc3812adeb52?1721815055",
            "https://www.mdpi.com/bundles/mdpisciprofileslink/img/unknown-user.png",
            "https://pub.mdpi-res.com/img/design/orcid.png?0465bc3812adeb52?1721815055",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g001-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g001.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g002-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g002.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g003-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g003.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g004-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g004.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g005-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g005.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g006-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g006.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g007-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g007.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g008-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g008.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g009-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g009.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g010-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g010.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g011-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g011.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g012-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g012.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g013-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g013.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g014-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g014.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g015-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g015.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g016-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g016.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g017-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g017.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g018-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g018.png",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g019-550.jpg",
            "https://www.mdpi.com/symmetry/symmetry-16-00684/article_deploy/html/images/symmetry-16-00684-g019.png",
            "https://pub.mdpi-res.com/img/table.png",
            "https://pub.mdpi-res.com/img/table.png",
            "https://pub.mdpi-res.com/img/table.png",
            "https://pub.mdpi-res.com/img/table.png",
            "https://pub.mdpi-res.com/img/table.png",
            "https://pub.mdpi-res.com/img/table.png",
            "https://pub.mdpi-res.com/img/table.png",
            "https://pub.mdpi-res.com/img/design/mdpi-pub-logo-white-small.png?71d18e5f805839ab?1721815055"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Carlos M. Paredes",
            "Diego Martínez Castro",
            "Apolinar González Potes",
            "Andrés Rey Piedrahita",
            "Vrani Ibarra Junquera",
            "Carlos M",
            "Martínez Castro",
            "González Potes",
            "Rey Piedrahita",
            "Ibarra Junquera"
        ],
        "publish_date": "2024-06-03T00:00:00",
        "summary": "",
        "meta_description": "Modern industrial automation supported by Cyber–Physical Systems (CPSs) requires high flexibility, which is achieved through increased interconnection between modules. This interconnection introduces a layer of symmetry into the design and operation of CPSs, balancing the distribution of tasks and resources across the system and streamlining the flow of information. However, this adaptability also exposes control systems to security threats, particularly through novel communication links that are vulnerable to cyberattacks. Traditional strategies may have limitations in these applications. This research proposes a design approach for control applications supported by CPSs that incorporates cyberattack detection and tolerance strategies. Using a modular and adaptive approach, the system is partitioned into microservices for scalability and resilience, allowing structural symmetry to be maintained. Schedulability assessments ensure that critical timing constraints are met, improving overall system symmetry and performance. Advanced cyberattack detection and isolation systems generate alarms and facilitate rapid response with replicas of affected components. These replicas enable the system to recover from and tolerate cyberattacks, maintaining uninterrupted operation and preserving the balanced structure of the system. In conclusion, the proposed approach addresses the security challenges in CPS-based control applications and provides an integrated and robust approach to protect industrial automation systems from cyber threats. A case study conducted at a juice production facility in Colima, México, demonstrated how the architecture can be applied to complex processes such as pH control, from simulation to industrial implementation. The study highlighted a plug-and-play approach, starting with component definitions and relationships, and extending to technology integration, thereby reinforcing symmetry and efficiency within the system.",
        "meta_lang": "en",
        "meta_favicon": "https://pub.mdpi-res.com/img/mask-icon-128.svg?c1c7eca266cd7013?1721815055",
        "meta_site_name": "MDPI",
        "canonical_link": "https://www.mdpi.com/2073-8994/16/6/684",
        "text": "by\n\nCarlos M. Paredes\n\n1 ,\n\nDiego Martínez Castro\n\n2 ,\n\nApolinar González Potes\n\n3 ,\n\nAndrés Rey Piedrahita\n\n4,* and\n\nVrani Ibarra Junquera\n\n5\n\n1\n\nFacultad de Ingeniería, Universidad de San Buenaventura, Cali 760030, Colombia\n\n2\n\nFacultad de Ingeniería, Universidad Autónoma de Occidente, Cali 760030, Colombia\n\n3\n\nFacultad de Ingeniería Mecánica y Eléctrica, Universidad de Colima, Colima 28400, Mexico\n\n4\n\nFacultad de Ingeniería, Unidad Central del Valle del Cauca, Tuluá 763022, Colombia\n\n5\n\nFacultad de Ciencias Químicas, Universidad de Colima, Colima 28400, Mexico\n\n*\n\nAuthor to whom correspondence should be addressed.\n\nSymmetry 2024, 16(6), 684; https://doi.org/10.3390/sym16060684\n\nSubmission received: 25 January 2024 / Revised: 21 May 2024 / Accepted: 22 May 2024 / Published: 3 June 2024\n\n(This article belongs to the Special Issue Symmetry Application in the Control Design of Cyber-Physical Systems)\n\nAbstract\n\n:\n\nModern industrial automation supported by Cyber–Physical Systems (CPSs) requires high flexibility, which is achieved through increased interconnection between modules. This interconnection introduces a layer of symmetry into the design and operation of CPSs, balancing the distribution of tasks and resources across the system and streamlining the flow of information. However, this adaptability also exposes control systems to security threats, particularly through novel communication links that are vulnerable to cyberattacks. Traditional strategies may have limitations in these applications. This research proposes a design approach for control applications supported by CPSs that incorporates cyberattack detection and tolerance strategies. Using a modular and adaptive approach, the system is partitioned into microservices for scalability and resilience, allowing structural symmetry to be maintained. Schedulability assessments ensure that critical timing constraints are met, improving overall system symmetry and performance. Advanced cyberattack detection and isolation systems generate alarms and facilitate rapid response with replicas of affected components. These replicas enable the system to recover from and tolerate cyberattacks, maintaining uninterrupted operation and preserving the balanced structure of the system. In conclusion, the proposed approach addresses the security challenges in CPS-based control applications and provides an integrated and robust approach to protect industrial automation systems from cyber threats. A case study conducted at a juice production facility in Colima, México, demonstrated how the architecture can be applied to complex processes such as pH control, from simulation to industrial implementation. The study highlighted a plug-and-play approach, starting with component definitions and relationships, and extending to technology integration, thereby reinforcing symmetry and efficiency within the system.\n\n1. Introduction\n\nWithin recent years, several Cyber–Physical Systems (CPSs) have been developed, which have had a huge impact in various sectors, such as energy, motoring, and the industrial and health care sectors, among others [1,2,3,4,5,6,7,8,9]. The concept of CPS emerged from the integration of embedded computer and communication technologies into various physical domains and sectors. It aims to monitor and control these physical processes effectively [10,11,12]. Many of these systems offer symmetry properties. These symmetry properties facilitate analysis and control by decomposing the MIMO control problem into separate SISO problems, each operating independently. By decomposing symmetric systems into subsystems, the controllability can be assessed by examining the controllability of each subsystem [13].\n\nSuch systems comprise a fusion of mobile devices, integrated systems, and computers employed to monitor, detect, and interact with real-world physical elements to achieve specific tasks. The components information of such systems is typically interconnected through communication networks, facilitating data sharing and self-interaction and sometimes interfacing with cloud-based computational services [4,5]. The nature of these systems allows for decomposition into subsystems possessing inherent or equivalent symmetry. This decomposition aids in control synthesis and alleviates computational complexity [14].\n\nAs a result, these systems are more flexible, allowing for the integration of new nodes, which has contributed to having more computing capacity, hedge, and application adaptability. Nevertheless, it also proposes new challenges related to security and application reliability derived from vulnerability presented against cyberattacks, which can generate affectations on the physical infrastructure, negative environmental impacts and input costs, modify product costs within the process, and even go against human life, generating critical affectations [1,2,15,16,17]. It is imperative to address these vulnerabilities to mitigate the risks posed by cyber threats, which have the potential to inflict significant damage. In light of the symmetry between advanced technology and vulnerabilities, it is necessary to develop a new approach.\n\nMoreover, numerous control applications supported by these systems are deemed critically secure due to their adherence to stringent real-time deadlines. Failure to adhere to these deadlines could result in significant adverse consequences, as they regulate the timely execution of actions arising from the interplay linking computational systems and the pertinent physical systems within the application. Non-compliance with these deadlines may lead to irreversible damage to the controlled physical system and endanger the individuals relying on it [18].\n\nAccording to the Industrial Control Systems Cyber Emergency Response Team (ICS-CERT), there has been a notable surge in security breaches affecting embedded systems and Cyber–Physical Systems [19]. The scientific community must explore alternative design approaches for automated systems, considering specifications linked to information exchange via communication networks [20,21].\n\nIn the past, industrial control systems confronted threats like physical failures in several parts that compromised the regular function of the system without accomplishing the target they were supposed to be designed and conceived for. In the contemporary era, the extensive utilization of information and communication systems renders these systems more susceptible to cyberattacks due to the prevalence of information technology.\n\nRegardless of natural attacks, these incidents demonstrate that preventive security controls, such as demilitarized zones, strict segregation, and multiple firewalls, are not always enough to protect the control system equipment involved in CPSs. Consequently, efforts should not only be focused on preventing attacks but also on their detection, editing, and mitigation, as the architecture design allows to have a tolerance level against this type of situation.\n\nAdditionally, this research is primarily focused on devising security measures for controlling applications supported by CPSs, particularly in response to cyberattacks that compromise the integrity of measurements and control actions, such as delayed messages containing vital information. The main contributions are summarized as follows:\n\nA procedure was developed for designing control applications supported by CPSs. This procedure enables the implementation of strategies for detecting and tolerating cyberattacks.\n\nThis process identifies the system components configured as microservices and incorporates a method to assess the schedulability of the control application components.\n\nThe proposed design procedure enables the establishment of a series of steps for the development of cyberattack detection systems. These steps include the development of the architectures for these systems and the verification of their time requirements.\n\nThe process of identifying system components as microservices enhances modularity and scalability, facilitating adaptation to different control applications. Additionally, evaluating the schedulability of control components ensures reliable management of time-critical operations. The design process, which includes steps from architecture creation to timing verification, ensures robust and efficient systems. This comprehensive and versatile methodology is well suited for various industries and CPS environments where security and a timely response are crucial.\n\nThe research framework is structured as follows. First, a literature review is performed in Section 2. Then, in Section 3, a design approach to withstand cyberattacks in CPSs is proposed. This includes the design proposal, the modeling of the cyberattacks considered in the research, the cyberattack detection strategy, and the architecture for developing CPSs, along with the time requirements. Following this, the results of a case study are presented in Section 4, accompanied by corresponding analyses and discussions in Section 5. Finally, conclusions are drawn and presented in Section 6.\n\n2. Literature Review\n\nWithin recent decades, the advancements in information technologies and communications have involved automation processes, producing new systems and control schemes that have contributed to CPSs’ integrated development in industrial environments. These systems offer big possibilities related to their high flexibility and adaptability capacities to diverse application working scenarios. Nevertheless, new challenges related to their functioning have emerged, and advancement in security approaches is particularly required, all of these because of the vulnerabilities presented by the classical tools of cybersecurity [4,22,23].\n\nResearch in computer security has traditionally prioritized the protection of corporate information. However, challenges persist in the realm of control system security. While current information security methods offer essential control mechanisms, these mechanisms alone may not be enough for comprehensive system defense. The introduction of unknown software and malicious elements into certain control algorithms can provoke disruptions in system operations, in addition to potential breaches of confidential data [24,25].\n\nAccordingly, nowadays, securing industrial system control is a task that has become increasingly important. Standards such as NERC CIP, NIST 800-82, ISA 95, and ISA-99 (IEC-62443) have been developed to identify and apply best security practices in these systems [26].\n\nWhile it is true that embedded devices have revolutionized the creation, sharing, processing, and distribution of information, securing these devices poses significant challenges. This is due to their inherent limitations, including restricted storage capacity, computing resources, and energy consumption. Various methods for safeguarding information have been devised, but these solutions often prove incompatible with a multitude of integrated architectures. Their implementation can be hindered by factors such as the device operating system or customized firmware, stringent energy constraints, and severely constrained computing resources [27].\n\nOne of the main obstacles in system security arises from the inherent heterogeneity of its components. These encompass diverse hardware elements such as sensors, actuators, and embedded systems. Moreover, there exist multiple software vendors responsible for managing and overseeing processes. Consequently, the integration of each of these components introduces factors that render a CPS susceptible to cybernetic attacks [3]. A single software component or a network of interconnected sensors may present a risk that could result in actuators being operated in a manner that is not optimal for the prevailing physical conditions [28].\n\nAutomation is an industrial process that requires the setting up of multiple control platforms, including Distributed Control Systems (DCSs), data history monitoring systems, programmable logic controllers, Computerized Maintenance Management Systems (CMMSs), and Enterprise Resource Planning (ERP), among others [29].\n\nIn the realm of industrial automation, the ISA-95 standard plays a pivotal role in streamlining operations and promoting integration across manufacturing processes [30]. This standard simplifies model descriptions and terminology, facilitating information exchange among different system levels. This framework delineates multiple levels of automation, spanning from actual physical processes at the lowest tier to manufacturing operations at the highest levels.\n\nIn recent decades, there has been minimal advancement in industrial process control strategies due to the essential requirement for primary control applications to promptly adapt to physical-environment changes. The transition of control task execution to emerging platforms like cloud computing demands meticulous deadline verification, considering potential unpredictable delays.\n\nThe adaptation of software execution to cloud-computing platforms presents several challenges, particularly resource virtualization. In contrast, dedicated hardware solutions offer greater control over design autonomy. However, changes can be expected as these technologies become more integrated into the processes of the Fourth Industrial Revolution [31].\n\nPrecisely, these new automation requirements necessitate enhanced flexibility and reconfigurability in key components like PLCs (Programmable Logic Controllers), field devices, and SCADA (Supervision Control Systems and Data Acquisition) systems to meet evolving demands [32].\n\nConventional solutions, such as adding new hardware nodes, can result in increased implementation costs and the need for system reconfiguration to accommodate new data transmission without compromising real-time requirements. Additionally, they may pose challenges in exchanging information between different manufacturing platforms. Hence, a flexible approach is recommended, focusing on reconfiguring existing nodes to meet the evolving needs of the system. Virtualization technologies have enhanced flexibility by enabling the incorporation of new low-cost components and facilitating information exchange between components. Nevertheless, it is still necessary to verify that real-time system deadlines are met, like traditional approaches.\n\nVirtualization is a method that allows to increase the use rate of hardware, dividing it into multiple parts [33,34]. Platform virtualization involves the use of a hypervisor to manage multiple virtual machines on a single physical platform, enabling the execution of multiple operating systems and applications concurrently. This allows for the simultaneous operation of multiple virtual machines on a single physical platform, facilitating dynamic allocation of hardware resources to each environment [35].\n\nVirtualization in industrial automation systems offers cost-effective hardware independence and facilitates the integration of new solutions to address the challenges posed by legacy hardware [29]. The technology of virtualization improves the system’s scalability and might ever enable savings in costs of implementation, allowing a more efficient use of physical hardware, in addition to containing several innovations in security.\n\nContainers represent a more recent advancement in virtualization technology. They offer several advantages over virtual machines, including standardization, portability, and efficient resource utilization. Their architectural framework also offers advantages concerning resource distribution and application security.\n\nThe concept of architectures based on containers for automatic process control must meet both industrial control requirements, such as real-time capacity and high availability, and the requirements for decomposing an architecture into monolithic software services [36,37,38,39,40].\n\nDespite the availability of various commercial virtualization solutions like Wind River Hypervisor, Integrity Multivisor, XenServer, and ESXi, the adoption of virtualization in the industrial sector is just beginning, offering both hurdles and possibilities for incorporating virtualization tech into industrial workflows [29,32,41].\n\nContainers offer isolated environments for applications, restricting access to resources between them. Hosts can control resource allocation like CPU, storage, and network for individual containers. Compared to hypervisor-based virtualization, containers have lower overhead since they share the OS kernel. Unlike hypervisors, containers require both the guest and the host to share the same OS kernel.\n\nContainer-based virtualization offers near-native performance, rapid implementation times, and minimal overhead, maintaining a certain level of resourcing and isolated control. Despite these advantages and possibilities, the industrial domain often demands real-time behavior, which is not entirely compatible with container-based virtualization. A single host can accommodate multiple containers and provide the means to isolate and control resources for each of them [32,37,38,39,40,41].\n\nVirtualization technology can be applied to industrial control processes by being integrated into the PLC software within the integrated field. There is growing interest in deploying server virtualization techniques in real-time embedded systems [41]. The complexity of a hypervisor-based virtualization solution poses challenges for legacy systems in industrial automation. However, utilizing instruction set emulation alongside more powerful processor generations could potentially address this issue [42].\n\nArchitectures for a versatile industrial controller that establishes a Security Perimeter Infrastructure (SPI) in the field of industrial automation have been introduced [32]. The architecture heavily relies on container concepts derived from cloud systems. Promising results show low and consistent containerization overhead, enhancing real-time application stability even when running additional non-real-time workloads in parallel within the containers.\n\nThe worst latencies observed in the Intel system evaluation are not appropriate for demanding real-time control systems. This study focuses on PLC and automation controllers with control cycles in the range of 100 ms to 1 s.\n\nThe control task deadline matches the cycle time, with acceptable latency and fluctuation at 10%. Occasionally, delays may be permissible, if rare. This study proves that control applications in containers meet these criteria. Emulating legacy hardware containers could transition existing control applications to the proposed architecture, reducing reliance on old hardware. The container aims to host basic microservices, providing a modular application approach [43].\n\nContainers designed for real-time operations have been explored within industrial automation systems, which operate with real-time data and adhere to strict event response and detection timelines [44]. The document highlights the need for virtualization in industrial operating systems and discusses timing requirements for industrial applications. It evaluates container impact on industrial automation systems, focusing on cyclic application behavior and network performance for container communication. While real-time container computing shows promise, challenges remain in container-to-container communication.\n\nSimilarly, a containerized architecture has been proposed to modularize real-time control applications [45]. The authors explored real-time control applications with containers and proposed a flexible reference architecture. Their evaluations showed round-trip times of 50 to 150 μs, supporting periodic applications with intervals as short as 500 μs.\n\nComparative tests were conducted on modularized industrial applications of PLCs [46]. This analysis examines how container-based virtualization affects real-time constraints. It suggests that migrating application containers could extend system lifetimes, despite a worst-case latency of about 15 ms on Intel-based hosts. The authors suggest reducing and optimizing container overhead for real-time execution.\n\nA multi-purpose architecture has been formulated and tested in a real case [32]. The results show a worst-case latency of about 1 ms on a Raspberry Pi, making it suitable for cycle times of 100 ms to 1 s. However, challenges remain with memory congestion, container access limitations, and immature technologies.\n\nThe Fourth Industrial Revolution requires flexible control processing systems to optimize operational processes throughout the quality chain, which involves breaking down and processing new data at different hierarchical levels within automated processes. However, adding new functionality and ensuring interoperability is challenging. Traditional approaches, such as adding new hardware nodes, are costly and have difficulty supporting new data transfers and information exchange between platforms from different vendors. A more flexible approach is needed that focuses on rearranging existing nodes to meet the functionality requirements of the new system. Technologies such as virtualization offer cost-effective solutions for incorporating new components and facilitating information exchange between them. However, meeting long-term deadlines remains critical.\n\nOn the other hand, the centralization of heterogeneous information systems in a reduced set of servers and platforms of OS contributes to the reduction in the quantity of hardware and operative systems to manage. It commonly brings some level of standardization, offering advantages like managing fewer individual machines which means fewer machines to patch and less hardware to protect from risks. Through the use of virtualization technologies and the platform performance of heritage hardware and software like virtual machines, the problem diagnosis or even the reimplementation can be remotely managed and reduce the inactivity time, fundamental in the control process throughout the whole day.\n\nCPSs, with their complex interconnections between physical and cyber components, face heightened vulnerability to disruptions compared to traditional embedded systems due to their interconnected networks. This susceptibility exposes both computing and physical systems to significant risks.\n\nThe CPS architecture consists of three main layers: physical, network, and application. In the cyber domain, software performs intelligent tasks through the computing system in the application layer. This layer serves CPS users and supervises physical systems, while the network layer connects physical and cyber domains, enabling communication between different systems. It ensures real-time data transfer for reliable operation of physical systems in the CPS architecture [47]. The physical layer encompasses real-world physical systems equipped with sensors and actuators that transmit data to the network domain computer system for real-time updates. Actuators operate based on received commands, facilitating system functionality from perception to action. The critical role of this layer is to perform complex computations at the application layer, ensuring system success.\n\nCyberattacks directed at these systems happen in the layers specified above. According to [48], denial of service (DoS) attacks [49] and replay attacks [50] usually take place at the network layer, while false data injection (FDI) attacks [51] typically aim at the physical layer. The network layer is vital for reliable data exchange between system layers. However, attackers can disrupt transmission, risking data integrity in the system.\n\nDetecting CPS attacks is critical due to their prevalence in vital assets. Machine learning techniques, including a single semi-supervised autoencoder, show promise in intrusion detection systems (IDSs) [52]. Designing effective IDSs involves considering factors like system objectives, data rates, and attack characteristics.\n\nIn systems such as smart grids, the objective of attack detection is to identify malicious activities, which frequently involve compromised measurements or data manipulation. Attackers aim to cause damage or influence systems without detection by blending their strategies with normal errors. A robust detection strategy is therefore essential to differentiate attack behavior from system disturbances and errors [53]. However, traditional techniques are unable to detect these attacks, leading to proposals for detection frameworks based on symmetric CPSs [54]. One such model employs unknown input observers (UIOs) and the cosine similarity theorem to mitigate the impact of attacks on state estimation. Additionally, a novel detection criterion based on cosine similarity is suggested to replace traditional thresholds.\n\nTo ensure the security of these systems, we must consider advanced detection methods such as state estimators, combinatorial optimization methods, and artificial systems to detect malicious data and potential cyberattacks [55]. The detection and estimation of attacks in distributed systems presents significant challenges due to their inherent complexity and spatial distribution. However, these challenges should not impede efforts to effectively protect such systems. Moreover, the capacity to handle multiple simultaneous attacks is of paramount importance. Consequently, the ability to locate and estimate multiple attacks in a distributed manner is of critical importance in these endeavors.\n\nCPSs face deliberate and stealthy cyberattacks, notably deception attacks involving false data injection or component compromise. Detecting these attacks is crucial for system integrity, especially given the volume of data. Machine learning aids in uncovering hidden patterns. This study models CPSs as agent networks, employing deep neural networks for early attack detection and robust control algorithms to isolate misbehaving agents. Experimental results highlight the superior performance of deep learning in attack detection, offering a proactive, cost-effective, and efficient cybersecurity solution [56].\n\nIntelligent systems detect symmetric anomalies to identify cyberattacks targeting autonomous vehicle control systems using compromised sensors [57]. Long short-term memory (LSTM) architectures are utilized for early anomaly detection, ensuring stable vehicle operation. The method categorizes collected data into normal and abnormal sets.\n\nFurthermore, mathematical modeling in information security has led to the development of immunological methods to protect critical system nodes from a predefined range of attacks and minimize their success [58]. This method organizes immunization strategies, methods, and tasks to mitigate the spread of computer attacks, facilitating quick and symmetrical responses to intruders within secured systems.\n\nAdditionally, new strategies and algorithms are necessary to provide the detection and mitigation of the generated impacts from these attacks. The strategies must fulfill the development of trustworthy control systems, with fault detection capabilities and operational rearrangements in the presence of uncertainties, component failures, and adversary attacks [59,60,61]. In conclusion, the development of robust cyberattack strategies for CPSs requires a holistic security approach, considering the complex interplay between physical and cyber elements, real-time responsiveness, and potential consequences. These measures enhance CPS resilience, protecting critical infrastructure and ensuring safety and reliability [62].\n\nAt present, research is being conducted to improve the design of these systems. For instance, the CRYSTAL framework offers a comprehensive set of tools for modeling and testing system resilience against cyberattacks, with case studies demonstrating its effectiveness in detecting various types of attacks [63]. The framework performs security testing by checking the model at design time and implements the system to simulate and evaluate detection at runtime. The key features include actor-based modeling, attack model definition, model abstraction, creation of a Tiny Digital Twin, and a monitor for cyberattack detection. However, a notable drawback is the potential delay in detecting attacks on the actuators. This is because the monitor relies on comparing sensor data with the Tiny Digital Twin, which can be problematic in high-speed environments such as robotics.\n\nIn addition, new methods for designing CPSs are essential to support the changing landscape of cyber manufacturing. These methods must address both the cyber and physical aspects of system design, while ensuring modularity, connectivity, and intelligence. A modular system design approach, based on the systematic deployment of modular functions, leads to a modular system architecture that integrates physical and cyber components [64]. Future work in this area should focus on exploring different modularity concepts and improving module interfaces to further refine CPS design.\n\nFinally, implementing resilience strategies in industrial networks presents several challenges, including practical implementation issues, network connectivity, and device management. Furthermore, limitations in communication protocols, bandwidth constraints, computational requirements, scalability issues, and specialized engineering needs further complicate the achievement of desired resilience levels [65]. Collectively, these factors demonstrate the intricate nature of CPSs and emphasize the necessity for continued innovation and advancement in this field. This proposal therefore sets out a procedure that addresses these aspects, guaranteeing a robust and scalable design for use in different application sectors.\n\n3. Procedure for Real-Time Cyber–Physical Systems Design to Tolerate Cyberattacks\n\nThis section presents the proposed design procedure, explores the strategy to detect cyberattacks in CPS-supported control systems, introduces the proposed CPS development architecture, and validates the temporal requirements.\n\n3.1. Proposal of the Design Procedure\n\nConsidering the diverse range of architectures available for designing such systems, the design procedure was carefully formulated, taking into consideration the following aspects:\n\nThe application should be decomposed into components that enable the offering or requesting of microservices from other components.\n\nEach previously decomposed microservice should be associated with a container, strategically grouping them according to the required needs.\n\nIn each container, microservices should be associated with whether the service is offered or required through a publish–subscribe mechanism.\n\nImplementing a detection and isolation system for cyberattacks that enables locating which component of the system is being affected.\n\nAssessing the detection system performance through metrics that enable the establishment of its effectiveness.\n\nImplementing replicas of containers and/or microservices allows for seamless replacement of any affected components with functional counterparts in the event of an issue.\n\nIdentifying and validating the temporal limitations of the applications.\n\nThe subsequent section will present these crucial elements to ensure an effective and robust design approach. Figure 1 illustrates the formulation of the design procedure.\n\nThis approach encompasses the aforementioned steps. In the initial stage, it is necessary to establish the system components and the required applications for proper functioning. Defining these applications involves specifying the temporal constraints they must adhere to achieve adequate performance.\n\nA phase follows where a system is designed to detect and isolate cyberattacks to identify the affected component based on input information. System performance will be evaluated using metrics. If performance levels are not satisfactory, the design of the detection system will be re-evaluated until optimum performance is achieved. Figure 2 presents the algorithm for the stages of the procedure related to the design and evaluation of the detection system.\n\nIn the next stage, the nodes that will integrate into the system are defined. These nodes will be developed using an architecture with microservices supported by container technology, enabling communication between services through a publish/subscribe philosophy. This design employs decoupling to connect interacting entities based on data exchange needs, thereby enhancing the integration of technologies and scalability.\n\nFollowing the publish/subscribe paradigm, if the detection system determines that a microservice or system component is affected by a cyberattack, its execution can be halted, and a replica of the properly functioning microservice can be activated. This concept forms the basic idea behind designing CPSs tolerant to cyberattacks. In this research, the detection of the affected microservice is performed. The validation of this process was presented in previous works [66,67].\n\nIn the concluding phase, the application requirements undergo rigorous validation. Should the system fail to meet the imposed constraints and conditions during this validation process, it necessitates reverting to the previous stages to undertake a comprehensive redesign.\n\nThe following subsections present the various elements to be considered in the proposed design procedure. Firstly, the architecture for the development of CPSs, and the verification of temporal requirements is addressed, which is fundamental to ensure that the systems meet critical time parameters. Subsequently, the design of cyberattack detection and isolation systems is described, which represents an essential component for the protection of the integrity and functionality of CPSs against external threats. Finally, the architecture of the nodes comprising the CPS is detailed, emphasizing the significance of a robust and well-defined infrastructure for the optimal functioning of the entire system.\n\n3.2. Architecture for the Development of the CPS and Verification of Temporal Requirements\n\nIn this section, the architecture of the CPS is presented, along with the architecture of the nodes that comprise it. Furthermore, a schedulability analysis was performed to verify the temporal requirements of the applications.\n\n3.2.1. Architecture of the CPS\n\nFigure 3 illustrates the comprehensive scheme of the CPS alongside the cyberattack detection system. The attack vector, A = a k u , a k y , denotes cyberattacks potentially showcasing characteristics described in [68] for integrity and DoS attacks. These attacks can affect both process measurements and control actions at time k. Section 3.3.1 will provide a comprehensive overview of these attacks.\n\nFurthermore, this scheme can accommodate disturbances to the process, as well as uncertainty associated with identifying the dynamic model of the process and noise related to the measurement process.\n\nThe system model for the design of CPSs comprises a number of key components. The scheduling of tasks is of fundamental importance in the context of system design. In order to efficiently manage system tasks, schedulers utilize both cyclic executives and priority-based methods. The network access control algorithm is also operated by a cyclic executive, thereby ensuring an orderly and predictable administration of network traffic. All system nodes are connected to a common network segment, thereby enabling communication and coordination among them. To ensure temporal accuracy, the system is synchronized, with data tagged with timestamps. Moreover, messages on the network have pre-established recipients, which facilitates clear and directed communication. This comprehensive and structured approach to the design of CPSs ensures the coordinated and efficient operation of the system as a whole.\n\n3.2.2. Schedulability Analysis\n\nThe schedulability analysis is a crucial aspect of the proposed architecture. It involves assessing the system ability to meet temporal requirements and ensure the reliable and timely execution of tasks. This analysis assesses the feasibility of meeting specified time constraints for critical tasks by evaluating task deadlines, priorities, and resource availability.\n\nA real-time application is one in which the performance depends not only on the logic of its algorithm but also on the fulfillment of temporal parameters. To achieve this, the behavior of its elements must be predictable throughout the application execution time, enabling the verification of properties that ensure the fulfillment of the application requirements [69].\n\nThe response time in a system is the maximum duration from task triggering, be it periodic or sporadic, with task execution varying. In real-time systems, tasks must consistently meet deadlines, requiring completion within their specified time constraints. Hence, each worst-case execution time must not surpass its response time. This is verified through schedulability analysis tests [70].\n\nIn the context of control systems supported by CPSs, the application is distributed among various components that interact through messages. Therefore, these applications have real-time constraints with end-to-end response times. This duration is calculated from the moment variables for control action calculation are measured to when the system is acted upon, influenced by task completion and message transmission times.\n\nAssessing the schedulability of a distributed real-time system presents an NP-hard problem. To address this challenge, constraints and heuristics are often utilized instead. One common strategy involves statically assigning tasks to nodes within the system and employing local scheduling algorithms such as EDF (Earliest Deadline First) or RM (Rate Monotonic) [71]. Conversely, applications within distributed systems exhibit precedence relationships among their tasks. When tasks are assigned to different processors, analyzing end-to-end timing constraints requires considering the relationship between jitters [72].\n\nThe growing interest in leveraging the advantages of the EDF algorithm in real-time application development environments is indicative of the increasing importance of meeting stringent timing constraints and enhancing system performance. The analysis of schedulability for EDF [73] is defined as follows:\n\nThe task model is represented as Γ = τ 1 , τ 2 , τ 3 , where τ i = ( C i , D i , T i ) , and C i , D i , and T i are the respective values of worst-case computation time, deadline, and period of task τ i .\n\nH τ ( t ) = ∑ i = 1 n C i ∗ t + T i − D i T i represents the amount of computation time that must be completed by the processor until time t to meet the system deadlines.\n\nThe Initial Critical Interval (ICI) is the time interval between zero and the first instant when there are no pending activations [ 0 , R ) . R can be calculated recursively using the following method:\n\n-\n\nK 0 = 1\n\n-\n\nK i + 1 = G τ ( K i ) , where G τ ( t ) = ∑ i = 1 n C i ∗ t P i\n\nThe calculation terminates when K i = K i + 1 . The value of R is defined by the last value of K i .\n\nThe test of schedulability for a set of tasks executed on the same node, using an EDF scheduling policy, consists of verifying Equation (1):\n\nH τ ( t ) ≤ t ∀ t ≤ R\n\n(1)\n\nThe solution schedulability analysis involves two evaluations: a local assessment of the components implemented on the same node and an end-to-end evaluation. In the local schedulability analysis, considering the proposed node architecture in this work, the focus is on verifying the compliance of individual deadlines, specifically D M , D C , and D A . This verification is carried out using Equation (1), where D M , D C , and D A represent the deadlines for the measurement, control, and actuation tasks, respectively.\n\nIn control applications, the components (measurement, control, and actuation) execute in a sequential and exclusive manner, necessitating that each function be completed before the next begins. In the synthesis of defense-in-depth architectures for CPSs, it is assumed that all nodes are connected to the same network. The worst-case execution time of the measurement and control components includes their own execution time and the time needed to send messages to subsequent components. The end-to-end schedulability test verifies the following Equation (2):\n\nD C G ≥ D M + D C + D A\n\n(2)\n\nwhere D C G is the end-to-end deadline. This represents the maximum duration from the initiation of measurement to the finalization of actuation, as required by the performance criteria of the control algorithms.\n\n3.3. Designing Cyberattack Detection and Isolation Systems\n\nThis section outlines the design of systems to detect and isolate cyberattacks within CPSs. Given the increasing complexity and interconnectivity of CPSs, it is of the utmost importance to protect these systems from malicious threats. This section is divided into two parts. The first focuses on modeling the types of cyberattacks that were considered in the research. This provides a fundamental understanding of how these impact the functioning of the process. The second section presents an approach to detecting these cyberattacks in CPSs. It describes the methodology and strategy used.\n\n3.3.1. Modeling of the Cyberattack\n\nAccurate process signal and control action measurements are vital for control system efficacy. Cyberattacks altering these values can induce system instability [48,51,74,75]. A cyberattack scenario can involve data manipulation, termed an integrity attack, modeled by (3). Another attack, resulting in prolonged signal loss, is known as a denial of service (DoS) attack, modeled by Equation (4):\n\ny ¯ i ( k ) = y i ( k ) + y i ( k ) a\n\n(3)\n\ny ¯ i ( k ) = y i ( k ) t s − 1\n\n(4)\n\nIn the given equations, y ¯ i ( k ) stands for the sensor measurement received by the controller at time k, while y i ( k ) represents the sensor measurement before it is transmitted to the controller at the same time k. The vector y i ( k ) a denotes the injected data by attackers, altering the measurement y i ( k ) at time k. y i ( k ) t s − 1 indicates the measurement prior to the onset of the DoS attack. The time interval during which the attack occurs is defined by τ a = [ t s t e ] .\n\nIn developing the proposal, it was assumed that any sensor could be susceptible to DoS or integrity attacks, which may occur unpredictably across different system segments. As a result, the nature of the attack executed on the system output depends on the specific characteristics of the attack and may exhibit behavior similar to what is described by Equations (3) and/or (4).\n\n3.3.2. Approach for Detecting Cyberattacks in Cyber–Physical Systems\n\nDetecting cyberattacks in CPSs involves comparing an ideal system with the actual system. This begins with generating a residual signal r e s ( k ) using Equation (5):\n\nr e s ( k ) = y ( k ) − y ^ ( k )\n\n(5)\n\nHere, y ( k ) signifies the measurements from the actual process, while y ^ ( k ) represents the set of outputs estimated by a model. Subsequently, Equation (6) is employed to assess the residual using predefined thresholds:\n\n| r e s ( k ) | > τ t h r e s h o l d s\n\n(6)\n\nThe thresholds are established through a testing phase, producing symptoms S ( r ) that facilitate attack detection and isolation. Subsequently, a decision-making process is conducted using indicators. This procedure is outlined in Algorithm 1, where N represents the sample count, y ^ d ( k ) denotes decoupled outputs, a d signifies the detection signal, and a i indicates the isolation signal.\n\nAlgorithm 1: Algorithm for cyberattack detection and isolation.\n\nInput: Inputs and outputs of the process\n\nOutput: Detection and isolation signals\n\nInitialization: Initial conditions of the process\n\nfor i = 1 to N do\n\nMeasure y ( i )\n\nEstimate y ^ ( i ) y y ^ d ( i )\n\nCalculate r e s ( i ) = | y ( i ) − y ^ ( i ) |\n\nCalculate r e s d ( i ) = | y ( i ) − y ^ d ( i ) |\n\nif ( r e s ( i ) > = τ d e t ) then\n\na d ( i ) = 1\n\nelse\n\na d ( i ) = 0\n\nend if\n\nif ( r e s d ( i ) > = τ i s o o n & r e s d ( i ) < = τ i s o o f f ) then\n\na i ( i ) = 1\n\nelse\n\na i ( i ) = 0\n\nend if\n\nend for\n\nreturn a d , a i\n\nThroughout these stages, the residuals ideally hover around zero in non-attack scenarios. However, in the event of an attack, it is anticipated that the residual signals will deviate significantly from this value.\n\nWhile a lone residual signal may spot a cyberattack, a collection of residuals is required for isolation. Each residual should be attuned to distinct system components to pinpoint the origin. Hence, the residuals need to be independent of other specified cyberattacks. Employing a structured reservoir of residuals facilitates attack isolation, with each vector able to detect an attack at a distinct system location. The threshold ( τ i s o o f f ) is defined for normal situations, whereas during an attack, deviations from zero are expected. In this case, thresholds τ i s o o n and τ d e t represent isolation and detection, respectively. Even though one residual signal ( r e s ( k ) ) can identify a cyberattack, a collection of these signals ( r e s d ( k ) ) is essential for isolation. This approach allows for the assessment of individual system components, thereby facilitating the identification of the source of the cyberattack.\n\nThe architecture used for cyberattack detection and isolation is presented in Figure 4 [68]. In this framework, a prediction model employs a dataset of input values x 0 , x 1 , ⋯ , x k − 1 to forecast the outputs y ^ 1 , y ^ 2 , ⋯ , y ^ k (the dataset varies based on available process data). These predicted values are then utilized to derive the residual signal r e s ( k ) , as depicted in Equation (5). Subsequently, a classifier leverages these signals to identify inconsistencies within the system.\n\nThe architecture provided lays a robust groundwork for employing diverse machine learning techniques for prediction and classification. Specifically, it leverages deep neural networks like LSTM or 1D CNN to extract patterns facilitating cyberattack detection. Although a method for explicitly identifying spatiotemporal correlations to detect cyberattacks is not included, it is confidently anticipated that neural networks can implicitly handle this task.\n\nArtificial neural networks implement the detection and isolation functions. They utilize signal residuals r e s ( k ) , process states x ( k ) , reference signals r ( k ) , control actions u ( k ) , and signals from the prediction model y ^ k to generate alerts and pinpoint ongoing cyberattacks.\n\nThe architecture was validated by simulating control processes that researchers have studied when proposing systems to detect cyberattacks in control systems. The neural network models presented performance indices that exceeded those of related works, demonstrating the effectiveness of the proposed system [68].\n\n3.4. Architecture of the Nodes Comprising the Cyber–Physical System\n\nThe proposed architecture for the nodes comprising the CPS is depicted in Figure 5. This architecture leverages a virtualization level, employing a container engine to provide high flexibility in interfaces and seamless application integration. Applications requiring spatial and temporal isolation can be virtualized within containers, and their resources are efficiently managed and assigned by their respective container engine. These applications may include measurement and control tasks. Meanwhile, other applications, such as the cyberattack detection system and user interfaces, can be executed directly on the host operating system. This approach ensures a well-organized and adaptable system, allowing for effective management and optimization of resources across the entire CPS.\n\nTo facilitate rapid and adaptable system reconfiguration, components must allow for online addition or removal without compromising robustness. Hence, a component-based microservice framework was proposed in [66]. It orchestrates interconnected components to support robustness, interoperability, and flexibility in Industry 4.0 applications.\n\nComponent-based microservices employ containers and microservice implementations to achieve integrated capabilities with computational isolation. A middleware that utilizes publish/subscribe facilitates microservice decoupling, thereby fostering constructive software development. Microservices, seamlessly integrated within containers, enhance portability, scalability, and flexibility. Each container hosts one or multiple microservices, providing an environment for code execution and data storage.\n\nThe proposal not only meets the requisite specifications but also addresses crucial aspects for developing applications with maintainable code through service separation. It supports updates and scalability across multiple programming languages and accommodates various service and data levels. For instance, it employs a Data Distribution Service (DDS), which reduces coupling between entities and enhances efficiency. This ensures efficient management, updates, and scalability of applications while maintaining the necessary service and data separation.\n\nThe holistic approach to addressing industrial challenges globally integrates microservices, containers, and publish and subscribe patterns within a unified framework. This ensures seamless integration, isolation, and efficient communication between services, meeting demands for flexibility, scalability, and adaptability. The plug-and-play approach enables components, including sensors and controllers, to communicate seamlessly with HMIs and databases. Communication between components and microservices is represented through five message structures, facilitating interaction, as illustrated in Table 1.\n\nFigure 6 illustrates the architectural components, microservices, and containers along with their relationships. This diagram provides a comprehensive view of the system structure and interconnections, highlighting the organization and communication between different elements within the CPS.\n\nThe database service, accessible through HTTP services, holds comprehensive system state information. Its implementation via containers and a distributed database tailored to application needs allows for micro-databases in specific areas or applications. This flexibility enables seamless integration of new data, adapting to evolving needs. Essential within the CPS, the database serves as a central repository for managing data from components and microservices, supporting storage, retrieval, and manipulation. It facilitates critical functionalities such as historical record-keeping, logging, and analysis, fostering efficient data processing and decision-making, ultimately enhancing system effectiveness and reliability.\n\nThe input/output (I/O) modules, implemented as containers, directly interface with end devices via fieldbuses containing sensors and actuators. They exchange information with other components, periodically requesting sensor readings. Sensors, which are crucial in CPSs, acquire real-world data such as temperature and pressure, converting them into digital signals for processing by system controllers and microservices.\n\nActuator services provide direct access to physical actuators, enabling communication with controllers. Sensors within containers are offered as services to clients, facilitating communication. Actuators play a crucial role in CPSs by converting digital signals into physical actions and executing control commands from controllers. They are available in various forms, such as motors and valves. The approach introduces a plug-and-play software pattern, supporting online reconfiguration of components without compromising robustness.\n\nContainers are optimized for developing and deploying diverse control algorithms, including classic industrial controllers tailored to specific application requirements. This flexibility allows for easy modification or enhancement of controllers and components without sacrificing robustness, ensuring continuous improvement and seamless integration of new functionalities.\n\nFurthermore, there is a container that hosts an HMI service, enabling the system to capture and exchange information with users. The data management flexibility allows for easy integration of different technologies, enhancing the capabilities and adaptability of the HMI.\n\nThis architecture enables the implementation of cyberattack detection methods and strategies to mitigate the impact of attacks. Once an attack is identified, the architecture allows for pinpointing the affected microservice/component and suspending its service. To achieve this, two aspects are proposed.\n\nThe first aspect involves having replicas of the architecture ready to replace any malfunctioning components with ones that are functioning correctly. In the proposed publish/subscribe model, all subscribers of a specific topic immediately receive any message published on that topic. This information exchange within the paradigm enables event-based architectures and decouples applications to enhance performance, reliability, and scalability. The detection system identifies affected microservices or components, allowing the container engine to pause impacted applications and activate their unaffected copies. This ensures uninterrupted system operation and the effective mitigation of cyberattacks.\n\nIn the publish/subscribe model, subscribers filter messages through topic-based or content-based methods. Topic-based filtering delivers all messages from subscribed topics, while content-based filtering sends only those matching subscriber-defined attributes or content constraints.\n\nThe second aspect focuses on optimizing the system security and isolation by partitioning and centralizing exposed functionalities to the external environment. This approach involves designating one partition, specifically the data server, to handle external communications. By utilizing the internal mechanisms offered by the hypervisor, inter-application communication within the system is facilitated.\n\nThrough this partitioning strategy, critical components are shielded from potential external cyberattacks, effectively reducing system vulnerability and improving overall security. This approach contributes to system robustness and reliability, making it an effective and promising solution for developing CPSs that are resilient to cyber threats.\n\nIn a control system, a basic example depicts the setup with sensor, controller, actuator, and HMI containers. The “Sensor” container gathers data and publishes it regularly. The “Controller” container receives sensor data, formulates control actions, and publishes them. The “Actuator” container executes actions. The HMI showcases variables, interacting with users. This design concludes with Table 2 and visualized in Figure 7, which demonstrate the integration of components and microservices using the publish/subscribe model, enabling efficient communication and facilitating plug-and-play capability in automated control systems.\n\nCertainly, the coexistence of the cyberattack detection system within the HMI or its placement in a separate service highlights the versatility of the proposed architecture.\n\nThe component-based design not only ensures scalability but also provides microservices and applications with temporal and spatial isolation, enhancing overall system robustness. The modular nature of this platform enables seamless updates of individual functionalities without disrupting existing implementations. Moreover, it accommodates applications of different criticality levels, granting the flexibility needed to cater to diverse requirements effectively.\n\n4. Results\n\nThis section presents the approach used in developing a case study utilizing the proposed procedure in this work. The study focused on the pH control system of Punta Delicia, a company located in Colima, México.\n\nRegarding the architecture of the nodes, evaluations were conducted using two technologies, RTLinux and Singularity on Linux, to support the partitions. While Singularity does not utilize a scheduling policy for handling critical real-time solutions (also known as hard real-time), its high flexibility in terms of interfaces and ease of application integration has led to widespread usage. Additionally, as presented in the review of current development technologies, reported results demonstrate a good performance of this technology in dealing with non-critical real-time systems (also known as soft real-time).\n\n4.1. Case Study\n\nPunta Delicia, a company located in Colima, México, specializes in the production of various types of beverages. Their production plant involves multiple processes, and to demonstrate the cyberattack detection system and the design procedure, this study focused on the stage where the final beverage is stored. In the formulation of final beverages, achieving the desired pH value is crucial, typically accomplished in a 2000 L mixing tank. The target pH values vary between 4 and 9, depending on the desired product attributes. Meeting these industrial requirements demands a robust control system and implementation [67].\n\n4.1.1. Controller Design\n\nWe consider a pH neutralization process as shown in Figure 8. The flow rates of the acid, buffer, basic, and effluent streams are denoted by q 1 , q 2 , q 3 , and q 4 , respectively. The process output is represented by the pH value of the effluent stream. The control inputs consist of the flow rates of the basic and acid streams, namely q 1 and q 3 . A dynamic model is formulated as per Equation (7), by applying the principles of conservation laws and reaction equilibrium, the modeling assumptions incorporate factors such as perfect mixing, a constant volume for the neutralization tank (V), and the complete solubility of the ions involved [76].\n\nx ˙ i = q 1 V ( w 1 i − x i ) + q 2 V ( w 2 i − x i ) + ( α i − x i ) V q 3\n\n(7)\n\nwhere w 1 i , w 2 i , and α i represent the concentrations of acid, buffer, and base, respectively. The states x i correspond to the concentrations of the invariant reactions.\n\np H control plays a vital role in processing every product within the company, each with its specific requirements and characteristics. Moreover, the dynamics within these processes harbor nonlinearities, which render modeling, parameter estimation, and control tasks challenging.\n\nThe control algorithm implemented at Punta Delicia follows a control structure known as the master–slave synchronization. In this case, the “slave” is the actual process, while the “master” is generated through a closed-loop simulation of the mathematical process model. The main goal is pH control with limited process information, managing a time-varying reference that shifts between acidic and basic regions. This algorithm drives process measurements to follow a changing reference over time, despite uncertainties.\n\nTo do this, we followed the scheme derived from [77].\n\nx ˙ 1 m = q 1 V ( w 11 − x 1 m ) + q 2 V ( w 21 − x 1 m ) + ( α 1 − x 1 m ) V u x ˙ 2 m = q 1 V ( w 12 − x 2 m ) + q 2 V ( w 22 − x 2 m ) + ( α 2 − x 2 m ) V u x ˙ 3 m = q 1 V ( w 13 − x 3 m ) + q 2 V ( w 23 − x 3 m ) + ( α 3 − x 3 m ) V u\n\n(8)\n\nx ˙ 1 = q 2 V ( w 21 − x 1 ) + ( α 1 − x 1 ) V u 1 + ( w 11 − x 1 ) V u 2 x ˙ 2 = q 2 V ( w 22 − x 2 ) + ( α 2 − x 2 ) V u 1 + ( w 12 − x 2 ) V u 2 x ˙ 3 = q 2 V ( w 23 − x 3 ) + ( α 3 − x 3 ) V u 1 + ( w 13 − x 3 ) V u 2\n\n(9)\n\nEquation (8) corresponds to the master model, and Equation (9) corresponds to the slave model, which represents the actual process. The process output is given by Equation (10), where y = p H :\n\nh ( x , y ) = − x 1 + x 2 − x 3 C x 3 + 10 − y − 10 y − p K w = 0\n\n(10)\n\nwhere C x 3 is a function of pH and the dissociation constants for the i-th species, in this case for the anion of the weak diprotic acid (H2A); it is described by Equation (11):\n\nC x 3 = 2 + 10 p K 2 − y 1 + 10 p K 2 − y + 10 p K 1 + p K 2 − 2 y\n\n(11)\n\nIn these equations, the system states are given by x 1 , 2 , 3 , 1 m , 2 m , 3 m , which represent the invariant reaction of the i-th species in mol/L, u and u 1 are the flow rates of the base stream in mL/s, u 2 is the flow rate of the acid stream in mL/s, and y represents the pH value. The system parameters are defined in Table 3 [67].\n\nThe controller structure is shown in Figure 9 and is based on the work presented in [67].\n\n4.1.2. Master Controller\n\nThis section outlines the controller designed for the master system operating within a master–slave synchronization framework. The initial focus is on the master control using input–output feedback linearization, a widely used method for controlling nonlinear systems. This technique transforms the nonlinear system into an equivalent linear form through variable changes and appropriate control inputs, as opposed to conventional Taylor series-based linearization through exact state transformations and feedback rather than linear approximations.\n\nThe aim is to transform the nonlinear system represented by Equation (12) into a linear one through state transformation and control action redefinition. This yields a global description of the system dynamics in the resulting linear model.\n\nx ˙ = f ( x ) + g ( x ) u y = h ( x )\n\n(12)\n\nIt is assumed that the system is linearizable and has a relative degree r (number of times the output y is derived for the input signal u to appear, r ≤ n , where n is the number of states of the system). Therefore, the transformation of the input u is given by Equation (13):\n\nu = v − L f r y L g L f r − 1 y\n\n(13)\n\nwhere L f r y and L g L f r − 1 y are Lie derivatives. In this way, using differential geometry, a linear differential equation can be generated that relates the output y to a new input v, Equation (14):\n\ny r = v\n\n(14)\n\nwhere y r is the derivative of order r applied to y [78,79].\n\nFor the master controller, based on the model outlined in Equation (8), the following functions are derived by Equations (15) and (16):\n\nf ( x ) = q 1 V ( w 11 − x 1 m ) + q 2 V ( w 21 − x 1 m ) q 1 V ( w 12 − x 2 m ) + q 2 V ( w 22 − x 2 m ) q 1 V ( w 13 − x 3 m ) + q 3 V ( w 23 − x 3 m )\n\n(15)\n\ng ( x ) = α 1 − x 1 m V α 2 − x 2 m V α 3 − x 3 m V\n\n(16)\n\nIn the case of h ( x ) , Equation (10) represents an implicit function.\n\nIn this case, the system has a relative degree of r = 1 , meaning that differentiating the output once results in the control input. Therefore, the control action will be determined by Equation (17):\n\nu = v − L f y L g y\n\n(17)\n\nThus, the following set of Lie derivatives is required, Equations (18) and (19):\n\nL g y = ∂ y ∂ x g ( x ) = − h x h y g ( x )\n\n(18)\n\nL f y = ∂ y ∂ x f ( x ) = − h x h y f ( x )\n\n(19)\n\nThe transformation is given by Equation (20):\n\nd y d t = − h x h y d x d t = v\n\n(20)\n\nIn this way, it is possible to design a controller that allows tracking the reference using the model described by Equation (20). In this case, a pole assignment state feedback controller is designed to ensure the stability of the linear model between the variable y and the control action v. The desired poles are p d = [ − 4 − 10 ] , and the corresponding gains for the proportional and integral parts are defined by Equation (21):\n\nK = [ K p | K i ] = [ 14 | − 40 ]\n\n(21)\n\nThis controller is discretized with a sampling time of 0.1 s, and the discrete gains are defined by Equation (22):\n\nK d = [ K p d | K i d ] = [ 9.6180 | − 2.0840 ]\n\n(22)\n\nThe outcome of the master controller implementation is depicted in Figure 10. It is evident that the output effectively tracks the reference signal.\n\n4.1.3. Slave Controller—Master–Slave Synchronization\n\nThis section aims to devise a controller facilitating synchronization between the slave and the master, guaranteeing asymptotic convergence of the system error to zero, as illustrated in Equation (23):\n\nlim t → ∞ e ( t ) = 0\n\n(23)\n\nBased on the master and slave models presented in Equations (8) and (9), the error for each state of the system is defined by Equation (24):\n\ne = e x 1 e x 2 e x 3 = x 1 − x 1 m x 2 − x 3 m x 3 − x 3 m\n\n(24)\n\nThus, the dynamics of the error can be described by Equation (25):\n\ne ˙ x 1 = x ˙ 1 − x ˙ 1 m e ˙ x 2 = x ˙ 2 − x ˙ 3 m e ˙ x 3 = x ˙ 3 − x ˙ 3 m\n\n(25)\n\nThe expressions given in Equation (24) can be rewritten by Equation (26):\n\ne ˙ = B e + F ( x , x m ) + u ( t )\n\n(26)\n\nThe system common matrix components are denoted as B, while F ( x , x m ) encompasses the nonlinear functions and the uncommon terms. The input signal is represented by u ( t ) . Employing a suitable control strategy through u ( t ) enables the attainment of an error signal converging to zero. Consequently, synchronization between the two systems is achieved.\n\nTherefore, the synchronization challenge revolves around designing an appropriate controller that eliminates the nonlinear and uncommon components while introducing other elements that ensure system stability, Equation (27):\n\nu ( t ) = − F ( x , x m ) + v ( t )\n\n(27)\n\nwhere v ( t ) = − K e ( t ) represents a linear controller, and K is the feedback gain matrix. Thus, Equation (26) can be reformulated by Equation (28):\n\ne ˙ = B e + v ( t ) = B e ( t ) − K e ( t ) = ( B − K ) e ( t ) = M e ( t )\n\n(28)\n\nwhere M = B − K . By Equation (28), which represents a first-order linear differential equation, achieving global synchronization of the systems is possible when the system matrix M is Hurwitz, signifying that all of its eigenvalues are negative. This aligns with principles from linear control theory, where system error becomes asymptotically stable. Consequently, it enables the attainment of asymptotic global synchronization between the systems [80,81].\n\nTo achieve master–slave synchronization in this case, the dynamic error equations are given by Equation (29):\n\ne ˙ x 1 = q 2 V ( w 21 − x 1 ) + ( α 1 − x 1 ) V u 1 + ( w 11 − x 1 ) V u 2 − q 1 V ( w 11 − x 1 m ) + q 2 V ( w 21 − x 1 m ) + ( α 1 − x 1 m ) V u e ˙ x 2 = q 2 V ( w 22 − x 2 ) + ( α 2 − x 2 ) V u 1 + ( w 12 − x 2 ) V u 2 − q 1 V ( w 12 − x 2 m ) + q 2 V ( w 22 − x 2 m ) + ( α 2 − x 2 m ) V u e ˙ x 3 = q 2 V ( w 23 − x 3 ) + ( α 3 − x 3 ) V u 1 + ( w 13 − x 3 ) V u 2 − q 1 V ( w 13 − x 3 m ) + q 3 V ( w 23 − x 3 m ) + ( α 3 − x 3 m ) V u\n\n(29)\n\nBy eliminating similar terms and reformulating the dynamic errors in the form of Equation (28), Equation (31) can be derived:\n\ne ˙ x 1 = − q 2 V e x 1 + v 1 e ˙ x 2 = − q 2 V e x 2 + v 2 e ˙ x 3 = − q 2 V e x 3 + v 3\n\n(30)\n\nwhere\n\nv 1 = ( w 11 − x 1 ) V u 2 + ( α 1 − x 1 ) V u 1 − ( α 1 − x 1 m ) V u − ( w 11 − x 1 m ) V q 1 v 2 = ( w 12 − x 2 ) V u 2 + ( α 2 − x 2 ) V u 1 − ( α 2 − x 2 m ) V u − ( w 12 − x 2 m ) V q 1 v 3 = ( w 13 − x 3 ) V u 2 + ( α 3 − x 3 ) V u 1 − ( α 3 − x 3 m ) V u − ( w 13 − x 3 m ) V q 1\n\n(31)\n\nThis allows for the design of a controller in a manner that\n\nv = F ( x , x m ) + u = − K e v = − k 11 k 12 k 13 k 21 k 22 k 23 k 31 k 32 k 33 e x 1 e x 2 e x 3\n\n(32)\n\nUsing the relation e ˙ = ( B − K ) e ( t ) = M e ( t ) , it is possible to determine a matrix K by Equation (32), which allows to guarantee the stability of the system by choosing a matrix M whose eigenvalues are all negative, and thus, the synchronization would be obtained by Equation (33):\n\ne ˙ = − q 2 V − k 11 − k 12 − k 13 − k 21 − q 2 V − k 22 − k 23 − k 31 − k 32 − q 2 V − k 33 e x 1 e x 2 e x 3 = − 1 0 0 0 − 1 0 0 0 − 1 e x 1 e x 2 e x 3\n\n(33)\n\nThus, by solving the set of equations represented by Equation (33), it is obtained that k 11 = k 22 = k 33 = 1 − q 2 / V , and the remaining constants are zero. Therefore, from Equations (27) and (31), the control law to achieve synchronization between the master and slave systems can be defined. The control law is expressed by Equation (34):\n\nu 1 u 2 = G + ( v − F ( x , x m ) )\n\n(34)\n\nwhere G + is the pseudoinverse of the matrix G, as defined in Equation (35). Here, v represents the vector defined in Equation (32), and F ( x , x m ) is the vector described by Equation (36):\n\nG = α 1 − x 1 V w 11 − x 1 V α 2 − x 2 V w 12 − x 2 V α 3 − x 3 V w 13 − x 3 V\n\n(35)\n\nF ( x , x m ) = − q 1 V ( w 11 − x 1 m ) + u V ( α 1 − x 1 m ) q 1 V ( w 12 − x 2 m ) + u V ( α 2 − x 2 m ) q 1 V ( w 13 − x 3 m ) + u V ( α 3 − x 3 m )\n\n(36)\n\nThe result of implementing master–slave synchronization can be observed in Figure 11.\n\nIn this study, reference alterations are introduced randomly, adhering to a uniform distribution within the previously mentioned pH range. The graphical display shows the smooth synchronization between the slave and master systems, allowing accurate tracking of reference variations.\n\n4.1.4. pH Control Systems: Cyberattack Detection Framework\n\nThe attack generation was carried out at the output of the actual process, which is the measurement used by the slave controller to execute its algorithm. Three cases were considered for attack generation: normal operation (Class 0), integrity attacks (Class 1), and denial of service (DoS) attacks (Class 2). The distribution of the generated data is illustrated in Figure 12.\n\nEach of these cases was randomly generated, ensuring a balanced distribution among the different classes. Figure 13 illustrates the process behavior under attack. It can be observed that the real process fails to track the reference when cyberattacks occur. This is primarily attributed to the controller incapacity to address such situations.\n\nFor the design of the cyberattack detection and isolation system, a model is required to estimate the process output y ^ k . This estimation is used to compare it with the real process output y k , generating a residual signal r e s k = | y ^ k − y k | for the classifier to detect the situations described. The architecture model for detection and isolation is the same as presented in the previous chapter, as shown in Figure 4.\n\nThe model responsible for estimating the process output performs regression using a one-dimensional convolutional neural network architecture. This architecture comprises the following layers.\n\nThe initial layer comprises a convolutional layer featuring eight filters, each with a size of 9. This is succeeded by a batch normalization layer and a Leaky ReLU activation function. The same structure is reiterated with 16 filters in the convolutional layer, preserving the previous filter size. A dropout layer with a rate of 0.15 is then included to mitigate overfitting. Following this, a flattened layer is introduced to prepare the data for a fully connected layer responsible for output estimation.\n\nThe input to this network for estimating the output is composed of Equation (37):\n\ni n p u t = [ y s ( k − 3 ) y s ( k − 2 ) y s ( k − 1 ) u 1 ( k − 3 ) u 1 ( k − 2 ) u 1 ( k − 1 ) u 2 ( k − 3 ) u 2 ( k − 2 ) u 2 ( k − 1 ) ] T\n\n(37)\n\nFrom this, a prediction model is obtained that allows estimating y ^ k . The variable y s represents the process output, and the signals u 1 and u 2 represent the control actions generated by the slave controller\n\nSubsequently, the classification model is trained to distinguish the three classes presented in Figure 12. This model has a convolutional neural network architecture, normalization layers, average pooling layers, and fully connected networks. The input to this network is composed of Equation (38):\n\ni n p u t = [ y s ( k ) y m ( k ) y ^ ( k ) y r e f ( k ) r e s s ( k ) r e s m ( k ) ] T\n\n(38)\n\nwhere y m ( k ) , y ^ ( k ) , y r e f ( k ) , r e s s ( k ) , and r e s m ( k ) represent the output of the master model, the output estimated by the prediction model, the reference, the residual generated by the slave, and the residual generated by the master, respectively. Using these features, the classification model provides a probability of belonging to each of the predefined classes, thereby detecting the presence of any anomalies related to cyberattacks and determining the specific type of cyberattack taking place.\n\nFrom the training data, the classifier performance in terms of accuracy, precision, recall, and F1 score is presented in Table 4.\n\nThis capability exemplifies the efficacy of the classifier in discerning between normal and abnormal scenarios, markedly diminishing both false positive and false negative rates. The corresponding confusion matrix and ROC curve are depicted in Figure 14 and Figure 15.\n\n4.1.5. Implementing pH Control Processes Using Component-Based Microservices\n\nTo approximate the proposal to a real-world environment, the use of microservices-based components was determined. This approach allows for easy implementation and integration of the detection system without disrupting any existing developments within the process.\n\nIn addition to complying with pH control, the implementation requirements are described below:\n\nDesign the component architecture for scalability.\n\nEnsure complete isolation of features in both time and space.\n\nSupport innovation without restrictions, including new input types, target platforms, visualization methods, and strategies, using the most effective programming language.\n\nFoster modularity for easy updates and enhancements to individual features, ensuring seamless addition of new features to the running system.\n\nEnsure a minimum execution time of at least 1 s for the fastest processes.\n\nMeeting these requirements ensures the industrial scalability of the pH control process. The foundational framework outlined earlier serves as a blueprint for component design. By identifying the components and their associated services, along with their functionalities, a clear model for implementation is established.\n\nTable 5 outlines the required containers, their corresponding services, and the service types offered by the architecture.\n\nThe implemented case study architecture, depicted in Figure 16, showcases the seamless integration of various components through interconnected links. The I/O block comprises three key containers: Measurement, which periodically publishes pH measurements through the m e d p H s topic, and two additional containers—Valves 1 and 2. These containers subscribe to slave control actions, enabling direct control of the respective peristaltic valves.\n\nFurthermore, two containers house the master and slave controllers. The master container subscribes to the s e t _ p o i n t s service, receiving the reference values for tracking, while it periodically publishes the master output, c p H m . On the other hand, the slave container subscribes to two topics, m e d p H s and c p H m , linked to the measurement and master control containers discussed earlier. Within this container, two periodic services, u 1 p H s and u 2 p H s , execute the master–slave synchronization control algorithm.\n\nFinally, the system includes a monitoring system that facilitates the creation of monitoring graphs to monitor key process variables. Additionally, it integrates a detection system, discussed in a previous section, to identify potential cyberattack events occurring within the process.\n\nThis architecture provides a comprehensive view of the interplay between the various components, demonstrating their seamless integration and functionality within the system.\n\nThis way, the detection system retrieves data from various microservice-based components distributed within the architecture depicted in Figure 9. Utilizing this data, the system follows the aforementioned steps, enabling the generation of alarms upon the occurrence of cyberattacks in the process while ensuring adherence to temporal deadlines.\n\nSpecifically, for realizing pH control and all functionalities listed in Table 5, singularity containers were employed. While alternative container options were available, singularity was chosen due to its size and ease of migration compared to others.\n\nBy integrating the logic of the control algorithms and the detection system, implemented in Python for its ability to handle mathematical expressions and its rich libraries for data science and machine learning, the architecture achieved seamless integration between the hardware/software infrastructure and an industrial-scale control process.\n\nFigure 17 depicts the process variable monitoring, as well as the evolution over time of the residual signals and the corresponding alarms related to the type of attack that may be occurring. These residuals are obtained by comparing the estimated output from the prediction model with the process variables, both from the slave and the master. Subsequently, based on these residuals and the other characteristics mentioned in Equation (38), the presence of a cyberattack can be detected through alarm signals.\n\nIn Figure 17, the generation of alarms during a cyberattack is depicted. Notably, specific time intervals are marked by the occurrence of both integrity and DoS attacks, resulting in the slave system failing to attain the desired p H reference. During these intervals, the system promptly identifies the situation, signaling its detection by setting the corresponding alarm to 1. This effectively demonstrates the system’s ability to detect and respond to cyberattacks, safeguarding the integrity and performance of the pH control process in real-time.\n\n5. Discussion\n\nThese results provide validation for the proposed approach in the mentioned context, enabling real-time monitoring of cyberattack occurrences and facilitating prompt responsive actions.\n\nFurthermore, a qualitative comparison with traditional implementations assessed the scalability and flexibility of the pH control system framework. The following criteria were employed in this comparative analysis:\n\n(1)\n\nScalability: the ability of the framework to seamlessly accommodate an increasing number of components or services to address the needs of a growing industrial process.\n\n(2)\n\nModularity: the degree of isolation between system components in terms of time and space, allowing for independent updates or replacements without affecting the entire system.\n\n(3)\n\nInnovation: the framework capacity to adapt and support new input types, destination platforms, visualization methods, control strategies, and other functionalities efficiently.\n\n(4)\n\nUpgradability: the ease with which new features or functionalities can be incorporated into the existing system, ensuring compatibility and transparency with the current runtime environment.\n\n(5)\n\nMinimum Execution Speed: the requirement for processes with rapid dynamics to operate with at least a one-second execution interval.\n\nTable 6 shows a qualitative comparison of the proposal and traditional implementations for pH control, assessing flexibility and scalability.\n\nThe traditional implementations were found to fall short of meeting all of the requirements that have been outlined. However, the microservices-based components enabled reconfiguration without interrupting ongoing operations or requiring additional function rewrites. With plug-and-play features, new functionalities can be seamlessly integrated. Testing confirmed the feasibility of the control service without impacting existing or ongoing operations. Overall, the experimental results align with the simulation outcomes, indicating that the platform effectively meets the system requirements, enhancing scalability, flexibility, and modularity in production.\n\nFinally, a latency test was conducted to verify that the execution times of the various applications in the predefined containers were below the application sampling times. Figure 18 and Figure 19, as well as Table 7, present the compiled execution times of the measurement-related applications, control algorithms, and the detection system.\n\nThe violin plots in Figure 18 display the execution times of the measurement and control applications. In these plots, a horizontal line representing the median execution time can be observed, with vertical lines denoting the first and third quartiles (Q1 and Q3). Figure 19 provides the distribution of the data, which appears to follow a positively skewed distribution. In general, the execution times are below 2 ms. It notable that the monitoring system task takes the most execution time, which is reasonable as this system encompasses various tasks (plotting variables of interest, the detection system, alarm generation, etc., and it can be further decomposed into another component), resulting in longer computation times compared to simpler tasks like measurement and control-related operations.\n\nIn the presented cases, the execution times of applications virtualized in containers are observed to be below 1 second, meeting the design temporal requirements.\n\nDue to the technology support deployed in Punta Delicia, where the control system nodes are integrated with Singularity and DDS, and considering the relatively non-stringent sampling periods for the addressed control case, it was decided to evaluate using Singularity alone.\n\nVirtualization provides the capacity to integrate disparate technologies on a single hardware platform while regulating their impact on system behavior. It serves as a transitional tool for the adoption of new technological platforms, allowing both legacy and new systems to operate simultaneously. This approach extends the lifespan of industrial control systems by replacing obsolete hardware with virtual counterparts, thereby mitigating compatibility issues and the need for costly software rewriting. It is, however, important to note that this case study was primarily concerned with evaluating the functionality of the architecture and ensuring that it met the design and implementation requirements, rather than with optimizing the control algorithm.\n\nIt is crucial to emphasize that the process under investigation in this case study is not subject to the constraints of sampling times on the order of milliseconds or microseconds. Consequently, future studies should focus on containers that can reach the established times for this type of system.\n\n6. Conclusions\n\nThis study showcases resilient industrial automation through container technologies, microservices, and publish/subscribe middleware. A case study in a juice production plant illustrated its application for complex processes like pH control, emphasizing a plug-and-play approach and technology integration.\n\nThe proposed detection system employs a multi-step strategy that departs from conventional threshold-based methods. This strategy is designed to detect and categorize cyberattacks without the need for specific thresholds. When evaluated against integrity and denial of service (DoS) attacks, the system was shown to effectively identify and categorize various attack types.\n\nThe study concludes that this approach provides an accurate environment for the management of cyber data flows in beverage processing, meeting the requirements for flexibility, adaptability, and operational efficiency.\n\nFurthermore, a schedulability analysis was proposed to verify the temporal requirements of the applications within the architecture. This analysis allowed for the local evaluation of components implemented on the same node, as well as end-to-end assessment of the application.\n\nThe experimental results confirm the simulation model outcomes, validating the platform with the control system requirements. This underscores the ability to manage each development autonomously until processes reach their optimal state, minimizing expenses.\n\nAs part of our future work, we will integrate replicas into the node architecture. This measure will involve replacing any component affected by a cyberattack with another that functions optimally, which will help mitigate the impact of the attack. To achieve this, we will leverage containerized microservices. The container engine will have the ability to suspend the affected service and orchestrate a new one with identical behavior. Future research will study the response times of this task as well as its impact. We will also create scheduling algorithms for component activation that can withstand cyberattacks, while considering node resources, network traffic impact, and message delivery delays.\n\nAuthor Contributions\n\nConceptualization, C.M.P.; methodology, C.M.P. and D.M.C.; software, C.M.P.; validation, C.M.P. and D.M.C.; formal analysis, C.M.P., D.M.C., and V.I.J.; investigation C.M.P.; resources, D.M.C., A.G.P., and A.R.P.; data curation, C.M.P.; writing—original draft preparation, C.M.P., D.M.C., and A.R.P.; writing—review and editing, C.M.P. and A.R.P.; visualization, D.M.C. and A.G.P.; supervision, D.M.C., A.G.P., and V.I.J.; project administration, D.M.C. and A.G.P. All authors have read and agreed to the published version of the manuscript.\n\nFunding\n\nThis was funded by Universidad Central del Valle del Cauca (UCEVA) grant number PI-1300-50.2-2022-27 and The APC was funded by UCEVA.\n\nData Availability Statement\n\nData are contained within the article.\n\nAcknowledgments\n\nThe research was made possible thanks to the support of the Universidad de Colima in México and the Universidad Autónoma de Occidente in Cali, Colombia. Additionally, funding was provided by the Universidad Central del Valle del Cauca for grant project number PI-1300-50.2-2022-27.\n\nConflicts of Interest\n\nThe authors declare no conflicts of interest.\n\nAbbreviations\n\nThe following abbreviations are used in this manuscript:\n\nCMMSComputerised Maintenance Management SystemsCPSCyber–Physical SystemDCSDistributed Control SystemDDSData Distribution ServiceDoSDenial of serviceEDFEarliest Deadline FirstERPEnterprise Resource PlanningHMIHuman–Machine InterfaceICS-CERTIndustrial Control Systems Cyber Emergency Response TeamIDSIntrusion Detection SystemOSOperating SystemPLCProgrammable Logic ControllerRMRate MonotonicSCADASupervision Control Systems and Data AcquisitionVMMVirtual Machine Manager\n\nReferences\n\nYuan, S.; Yang, M.; Reniers, G. Integrated process safety and process security risk assessment of industrial cyber-physical systems in chemical plants. Comput. Ind. 2024, 155, 104056. [Google Scholar] [CrossRef]\n\nAbdelrahman, M.; Nguyen, T.L.; Kharchouf, I.; Mohammed, O. A Hybrid Physical Co-Simulation Smart Grid Testbed for Testing and Impact Analysis of Cyber-Attacks on Power Systems: Framework and Attack Scenarios. Energies 2023, 16, 7771. [Google Scholar] [CrossRef]\n\nHumayed, A.; Lin, J.; Li, F.; Luo, B. Cyber-Physical Systems Security—A Survey. IEEE Internet Things J. 2017, 4, 1802–1831. [Google Scholar] [CrossRef]\n\nSegovia-Ferreira, M.; Rubio Hernan, J.; Cavalli, A.; Garcia-Alfaro, J. Cyber-Resilience Approaches for Cyber-Physical Systems. arXiv 2023, arXiv:2302.05402. [Google Scholar] [CrossRef]\n\nShoukry, Y. SMT-Based Observer Design for Cyber-Physical Systems under Sensor Attacks. In Proceedings of the 2016 ACM/IEEE 7th International Conference on Cyber-Physical Systems, ICCPS 2016—Proceedings, Vienna, Austria, 11–14 April 2016. [Google Scholar]\n\nHasan, M.K.; Habib, A.A.; Shukur, Z.; Ibrahim, F.; Islam, S.; Razzaque, M.A. Review on cyber-physical and cyber-security system in smart grid: Standards, protocols, constraints, and recommendations. J. Netw. Comput. Appl. 2023, 209, 103540. [Google Scholar] [CrossRef]\n\nSun, C.; Cembrano, G.; Puig, V.; Meseguer, J. Cyber-Physical Systems for Real-Time Management in the Urban Water Cycle. In Proceedings of the 2018 International Workshop on Cyber-Physical Systems for Smart Water Networks (CySWater), Porto, Portugal, 10 April 2018; pp. 5–8. [Google Scholar] [CrossRef]\n\nMalathi, C.; Padmaja, I.N. Identification of cyber attacks using machine learning in smart IoT networks. Mater. Today Proc. 2023, 80, 2518–2523. [Google Scholar] [CrossRef]\n\nMiah, M.S.U.; Sarwar, T.B.; Islam, S.S.; Haque, M.S.; Masuduzzaman, M.; Bhowmik, A. An adaptive Medical Cyber-Physical System for post diagnosis patient care using cloud computing and machine learning approach. In Proceedings of the 2022 3rd International Conference for Emerging Technology (INCET), Belgaum, India, 27–29 May 2022; pp. 1–6. [Google Scholar] [CrossRef]\n\nDiedrich, A. On Diagnosing Cyber-Physical Systems. Ph.D. Thesis, Helmut-Schmidt-Universität/Universität der Bundeswehr Hamburg, Hamburg, Germany, 2023. [Google Scholar] [CrossRef]\n\nAruväli, T.; De Marchi, M.; Rauch, E.; Matt, D. Design Decomposition for Cyber Resiliency in Cyber- Physical Production Systems. In International Conference on Axiomatic Design; Springer: Cham, Switzerland, 2023. [Google Scholar]\n\nYu, Z.; Gao, H.; Cong, X.; Wu, N.; Song, H. A Survey on Cyber-Physical Systems Security. IEEE Internet Things J. 2023, 10, 21670–21686. [Google Scholar] [CrossRef]\n\nTanaka, R.; Murota, K. Symmetric failures in symmetric control systems. Linear Algebra Its Appl. 2000, 318, 145–172. [Google Scholar] [CrossRef]\n\nFeng, X.; Wang, K.; Zhang, J.; Guan, J. A New Measure for Determining the Equivalent Symmetry of Decomposed Subsystems from Large Complex Cyber—Physical Systems. Symmetry 2023, 15, 37. [Google Scholar] [CrossRef]\n\nAyodeji, A.; Mohamed, M.; Li, L.; Di Buono, A.; Pierce, I.; Ahmed, H. Cyber security in the nuclear industry: A closer look at digital control systems, networks and human factors. Prog. Nucl. Energy 2023, 161, 104738. [Google Scholar] [CrossRef]\n\nHu, L.; Wang, Z.; Naeem, W. Security analysis of stochastic networked control systems under false data injection attacks. In Proceedings of the 2016 UKACC International Conference on Control, UKACC Control, Belfast, UK, 28 August 2016. [Google Scholar]\n\nSilva, M.; Puys, M.; Thevenon, P.H.; Mocanu, S. PLC Logic-Based Cybersecurity Risks Identification for ICS. In Proceedings of the 18th International Conference on Availability, Reliability and Security, Benevento, Italy, 29 August–1 September 2023; pp. 1–10. [Google Scholar] [CrossRef]\n\nGe, H.; Yue, D.; Xie, X.; Deng, S.; Zhang, Y. Analysis of cyber physical systems security via networked attacks. In Proceedings of the 2017 36th Chinese Control Conference (CCC), Dalian, China, 26–28 July 2017; pp. 4266–4272. [Google Scholar]\n\nKnowles, W.; Prince, D.; Hutchison, D.; Disso, J.; Jones, K. A survey of cyber security management in industrial control systems. Int. J. Crit. Infrastruct. Prot. 2015, 9, 52–80. [Google Scholar] [CrossRef]\n\nOrojloo, H.; Azgomi, M. A method for evaluating the consequence propagation of security attacks in cyber—Physical systems. Futur. Gener. Comput. Syst. 2017, 67, 57–71. [Google Scholar] [CrossRef]\n\nChapman, J.; Ofner, S.; Pauksztelo, P. Key Factors in Industrial Control System Security. In Proceedings of the 2016 IEEE 41st Conference on Local Computer Networks (LCN), Dubai, United Arab Emirates, 7–10 November 2016; pp. 551–554. [Google Scholar]\n\nBernieri, G.; Conti, M.; Pascucci, F. A Novel Architecture for Cyber-Physical Security in Industrial Control Networks. In Proceedings of the 2018 IEEE 4th International Forum on Research and Technology for Society and Industry (RTSI), Palermo, Italy, 10–13 September 2018; pp. 1–6. [Google Scholar]\n\nBela, G.; Piroska, H.; Roman, A. E-APTDetect: Early Advanced Persistent Threat Detection in Critical Infrastructures with Dynamic Attestation. Appl. Sci. 2023, 13, 3409. [Google Scholar] [CrossRef]\n\nChen, P.Y.; Yang, S.; McCann, J. Distributed Real-Time Anomaly Detection in Networked Industrial Sensing Systems. IEEE Trans. Ind. Electron. 2014, 62, 1. [Google Scholar] [CrossRef]\n\nKeijzer, T. Advances in Safety and Security of Cyber-Physical Systems—Sliding Mode Observers, Coalitional Control and Homomorphic Encryption. Ph.D. Thesis, Delft University of Technology, Delft, The Netherlands, 2023. [Google Scholar] [CrossRef]\n\nAhmadian, M.; Shajari, M.; Shafiee, M. Industrial control system security taxonomic framework with application to a comprehensive incidents survey. Int. J. Crit. Infrastruct. Prot. 2020, 29, 100356. [Google Scholar] [CrossRef]\n\nZhai, X. Exploring ICMetrics to detect abnormal program behaviour on embedded devices. J. Syst. Archit. 2015, 61, 567–575. [Google Scholar] [CrossRef]\n\nChen, Y.; Poskitt, C.; Sun, J. Learning from Mutants: Using Code Mutation to Learn and Monitor Invariants of a Cyber-Physical System. In Proceedings of the IEEE Symposium on Security and Privacy, San Francisco, CA, USA, 20–24 May 2018; pp. 648–660. [Google Scholar]\n\nBreivold, H.P.; Jansen, A.; Sandström, K.; Crnkovic, I. Virtualize for Architecture Sustainability in Industrial Automation. In Proceedings of the 2013 IEEE 16th International Conference on Computational Science and Engineering, Sydney, Australia, 3–5 December 2013; pp. 409–415. [Google Scholar] [CrossRef]\n\nInternational Society of Automation (ISA). Enterprise-Control System Integration—Part 1–5; Technical Report ANSI/ISA-95.00.01-2000; ISA: Research Triangle Park, NC, USA, 2007. [Google Scholar]\n\nHofer, F.; Sehr, M.; Iannopollo, A.; Ugalde, I.; Sangiovanni-Vincentelli, A.; Russo, B. Industrial control via application containers: Migrating from bare-metal to IAAS. arXiv 2019, arXiv:1908.04465. [Google Scholar]\n\nGoldschmidt, T.; Hauck-Stattelmann, S.; Malakuti, S.; Grüner, S. Container-based architecture for flexible industrial control applications. J. Syst. Archit. 2018, 84, 28–36. [Google Scholar] [CrossRef]\n\nCaliskan, M.; Ozsiginan, M.; Kugu, E. Benefits of the virtualization technologies with intrusion detection and prevention systems. In Proceedings of the AICT 2013–7th International Conference on Application of Information and Communication Technologies, Conference Proceedings, Azerbaijan, Baku, 9–11 October 2013. [Google Scholar]\n\nGu, Z.; Zhao, Q. A State-of-the-Art Survey on Real-Time Issues in Embedded Systems Virtualization. J. Softw. Eng. Appl. 2012, 5, 277–290. [Google Scholar] [CrossRef]\n\nBock, Y.; Broeckhove, J.; Hellinckx, P. Hierarchical Real-Time Multi-core Scheduling through Virtualization: A Survey. In Proceedings of the 2015 10th International Conference on P2P, Parallel, Grid, Cloud and Internet Computing (3PGCIC), Krakow, Poland, 4–6 November 2015; pp. 611–616. [Google Scholar]\n\nTasci, T.; Melcher, J.; Verl, A. A Container-based Architecture for Real-Time Control Applications. In Proceedings of the 2018 IEEE International Conference on Engineering, Technology and Innovation (ICE/ITMC), Stuttgart, Germany, 17–20 June 2018; pp. 1–9. [Google Scholar] [CrossRef]\n\nQueiroz, R.; Cruz, T.; Mendes, J.; Sousa, P.; Simoes, P. Container-based Virtualization for Real-Time Industrial Systems—A Systematic Review. ACM Comput. Surv. 2023, 56, 59. [Google Scholar] [CrossRef]\n\nLumpp, F.; Fummi, F.; Patel, H.; Bombieri, N. Enabling Kubernetes Orchestration of Mixed-Criticality Software for Autonomous Mobile Robots. IEEE Trans. Robot. 2023, 40, 540–553. [Google Scholar] [CrossRef]\n\nKirkendoll, Z.; Lueck, M. Real-time Simulation Executive Architecture and Subsystem Containerization. In Proceedings of the 2022 Interservice/Industry Training, Simulation, and Education Conference (I/ITSEC), Orlando, FL, USA, 28 November–2 December 2022. [Google Scholar]\n\nZhao, Y.; Hu, N.; Zhao, Y.; Zhu, Z. A secure and flexible edge computing scheme for AI-driven industrial IoT. Clust. Comput. 2021, 26, 283–301. [Google Scholar] [CrossRef]\n\nStruhár, V.; Behnam, M.; Ashjaei, M.; Papadopoulos, A.V. Real-Time Containers: A Survey. In 2nd Workshop on Fog Computing and the IoT (Fog-IoT 2020); Schloss Dagstuhl–Leibniz-Zentrum für Informatik: Wadern, Germany, 2020. [Google Scholar]\n\nBreivold, H.P.; Sandström, K. Virtualize for test environment in industrial automation. In Proceedings of the 2014 IEEE Emerging Technology and Factory Automation (ETFA), Padova, Italy, 10–13 September 2014; pp. 1–8. [Google Scholar] [CrossRef]\n\nGonzález-Nalda, P.; Etxeberria-Agiriano, I.; Calvo, I.; Otero, M. A modular CPS architecture design based on ROS and Docker. Int. J. Interact. Des. Manuf. 2017, 11, 949–955. [Google Scholar] [CrossRef]\n\nMoga, A.; Sivanthi, T.; Franke, C. OS-level virtualization for industrial automation systems: Are we there yet? In Proceedings of the 31st Annual ACM Symposium on Applied Computing, Pisa, Italy, 4–8 April 2016. [Google Scholar]\n\nMelcher, J. Design and Implementation of a Container-based Architecture for Real-Time Control Applications. Master’s Thesis, University of Stuttgart, Institute of Software Technology, Stuttgart, Germany, 2018. [Google Scholar]\n\nGoldschmidt, T.; Hauck-Stattelmann, S. Software Containers for Industrial Control. In Proceedings of the 2016 42th Euromicro Conference on Software Engineering and Advanced Applications (SEAA), Limassol, Cyprus, 31 August–2 September 2016; pp. 258–265. [Google Scholar] [CrossRef]\n\nPark, P.; Coleri Ergen, S.; Fischione, C.; Lu, C.; Johansson, K.H. Wireless Network Design for Control Systems: A Survey. IEEE Commun. Surv. Tutor. 2018, 20, 978–1013. [Google Scholar] [CrossRef]\n\nKim, S.; Park, K.J. A Survey on Machine-Learning Based Security Design for Cyber-Physical Systems. Appl. Sci. 2021, 11, 5458. [Google Scholar] [CrossRef]\n\nLi, S.; Ahn, C.K.; Xiang, Z. Decentralized Sampled-Data Control for Cyber-Physical Systems Subject to DoS Attacks. IEEE Syst. J. 2021, 15, 5126–5134. [Google Scholar] [CrossRef]\n\nSánchez, H.S.; Rotondo, D.; Escobet, T.; Puig, V.; Saludes, J.; Quevedo, J. Detection of replay attacks in cyber-physical systems using a frequency-based signature. J. Frankl. Inst. 2019, 356, 2798–2824. [Google Scholar] [CrossRef]\n\nZhang, T.Y.; Ye, D. False data injection attacks with complete stealthiness in cyber–physical systems: A self-generated approach. Automatica 2020, 120, 109117. [Google Scholar] [CrossRef]\n\nCatillo, M.; Pecchia, A.; Villano, U. CPS-GUARD: Intrusion detection for cyber-physical systems and IoT devices using outlier-aware deep autoencoders. Comput. Secur. 2023, 129, 103210. [Google Scholar] [CrossRef]\n\nPeng, C.; Sun, H.; Yang, M.; Wang, Y. A Survey on Security Communication and Control for Smart Grids Under Malicious Cyber Attacks. IEEE Trans. Syst. Man Cybern. Syst 2019, 49, 1554–1569. [Google Scholar] [CrossRef]\n\nZhang, H.; Wang, X.; Ban, L.; Sun, M. A Novel Detection and Identification Mechanism for Malicious Injection Attacks in Power Systems. Symmetry 2023, 15, 2104. [Google Scholar] [CrossRef]\n\nCao, L.; Jiang, X.; Zhao, Y.; Wang, S.; You, D.; Xu, X. A Survey of Network Attacks on Cyber-Physical Systems. IEEE Access 2020, 8, 44219–44227. [Google Scholar] [CrossRef]\n\nZarandi, Z.N.; Sharifi, I. Detection and Identification of Cyber-Attacks in Cyber-Physical Systems Based on Machine Learning Methods. In Proceedings of the 2020 11th International Conference on Information and Knowledge Technology (IKT), Tehran, Iran, 22–23 December 2020; pp. 107–112. [Google Scholar] [CrossRef]\n\nAlsulami, A.A.; Abu Al-Haija, Q.; Alqahtani, A.; Alsini, R. Symmetrical Simulation Scheme for Anomaly Detection in Autonomous Vehicles Based on LSTM Model. Symmetry 2022, 14, 1450. [Google Scholar] [CrossRef]\n\nZegzhda, D.; Pavlenko, E.; Aleksandrova, E. Modelling Artificial Immunization Processes to Counter Cyberthreats. Symmetry 2021, 13, 2453. [Google Scholar] [CrossRef]\n\nJin, X.; Haddad, W. An Adaptive Control Architecture for Leader-Follower Multiagent Systems with Stochastic Disturbances and Sensor and Actuator Attacks. In Proceedings of the 2018 Annual American Control Conference (ACC), Milwaukee, WI, USA, 27–29 June 2018; pp. 980–985. [Google Scholar]\n\nSakhnini, J.; Karimipour, H.; Dehghantanha, A.; Parizi, R. Physical layer attack identification and localization in cyber-physical grid: An ensemble deep learning based approach. Phys. Commun. 2021, 47, 101394. [Google Scholar] [CrossRef]\n\nWu, S.; Jiang, Y.; Luo, H.; Zhang, J.; Yin, S.; Kaynak, O. An integrated data-driven scheme for the defense of typical cyber–physical attacks. Reliab. Eng. Syst. Saf. 2021, 220, 108257. [Google Scholar] [CrossRef]\n\nMtukushe, N.; Onaolapo, A.K.; Aluko, A.; Dorrell, D.G. Review of Cyberattack Implementation, Detection, and Mitigation Methods in"
    }
}