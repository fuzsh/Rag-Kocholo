{
    "id": "dbpedia_4202_1",
    "rank": 90,
    "data": {
        "url": "https://medium.com/%40caglarlaledemir/openai-gpt-3-5-turbo-in-action-building-a-simple-chatbot-interface-41300696094b",
        "read_more_link": "",
        "language": "en",
        "title": "Using OpenAI API with GPT-3.5-turbo in Python",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*3twDLepwsuNErETEGq_sYA.jpeg",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*3twDLepwsuNErETEGq_sYA.jpeg",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*_02JLDh_QzeN3ccxyzbL_w.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*_02JLDh_QzeN3ccxyzbL_w.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "√áaƒülar Laledemir",
            "medium.com"
        ],
        "publish_date": "2023-10-12T15:59:25.899000+00:00",
        "summary": "",
        "meta_description": "In this post, we‚Äôll delve into a Python code snippet that demonstrates how to create a basic chatbot using the GPT-3.5-turbo API. Let‚Äôs break down the code, step by step, to understand how to‚Ä¶",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@caglarlaledemir/openai-gpt-3-5-turbo-in-action-building-a-simple-chatbot-interface-41300696094b",
        "text": "In this post, we‚Äôll delve into a Python code snippet that demonstrates how to create a basic chatbot using the GPT-3.5-turbo API. Let‚Äôs break down the code, step by step, to understand how to seamlessly integrate this sophisticated language model into your applications.\n\nSetting Up OpenAI GPT-3.5-turbo:\n\nThe initial lines of code set up the OpenAI environment, providing your organization ID and API key. Replace ‚ÄúYOUR_ORG_ID‚Äù and ‚ÄúYOUR API KEY‚Äù with your actual OpenAI credentials. This ensures secure and authorized access to the GPT-3.5-turbo API.\n\nYou can utilize https://platform.openai.com/docs/api-reference/introduction for finding out your organization id and creating your own api key.\n\nimport os\n\nimport openai\n\nopenai.organization = \"YOUR_ORG_ID\"\n\nopenai.api_key = \"YOUR API KEY\"\n\n# Use a model from OpenAI (assuming \"text-embedding-ada-002\" exists for this example)\n\nmodel_name=\"gpt-3.5-turbo\"\n\nThe Main Interaction Loop:\n\nThe main function initiates the core interaction loop for the chatbot. Users can input text, and the chatbot responds accordingly. The loop continues until the user types \"quit,\" allowing for a seamless and intuitive conversational experience.\n\ndef main():\n\n\"\"\"\n\nMain interaction loop for the chatbot.\n\n\"\"\"\n\nprint(\"Welcome to Chatbot! Type 'quit' to exit.\")\n\nuser_input = \"\"\n\nwhile user_input.lower() != \"quit\":\n\nuser_input = input(\"You: \")\n\nif user_input.lower() != \"quit\":\n\nresponse = chat_with_openai(user_input) # Pass user_input as an argument\n\nprint(f\"Chatbot: {response}\")\n\nInteracting with OpenAI API:\n\nThe heart of the chatbot lies in the chat_with_openai function. This function interfaces with the OpenAI API, sending user prompts and receiving responses. The OpenAI API uses a chat-based approach, where a series of messages are exchanged. The function formats the user's input, sends it to the API, and extracts the chatbot's response for display.\n\ndef chat_with_openai(prompt):\n\n\"\"\"\n\nSends the prompt to OpenAI API using the chat interface and gets the model's response.\n\n\"\"\"\n\nmessage = {\n\n'role': 'user',\n\n'content': prompt\n\n}\n\nresponse = openai.chat.completions.create(\n\nmodel=model_name,\n\nmessages=[message]\n\n)\n\n# Extract the chatbot's message from the response.\n\n# Assuming there's at least one response and taking the last one as the chatbot's reply.\n\nchatbot_response = response.choices[0].message['content']\n\nreturn chatbot_response.strip()\n\nif __name__ == \"__main__\":\n\nmain()\n\nThis code serves as a foundational framework for a basic chatbot. Depending on your application, you can enhance the functionality by incorporating user context, handling multiple turns, or implementing specific use-case scenarios.\n\nExplore various models beyond GPT-3.5 Turbo by visiting the OpenAI models link at https://platform.openai.com/docs/models/overview. Each model comes with distinctive features, providing opportunities for a wide range of applications.\n\nFind the complete code on my GitHub profile: https://github.com/caglarldemir/openai_gpt-3.5-turbo_API_usage.\n\nDelighted to share this with you! üåü I hope you enjoy reading it ‚Äî happy coding! üíªüöÄ #TechEnthusiasts #HappyCoding #ShareTheKnowledge"
    }
}