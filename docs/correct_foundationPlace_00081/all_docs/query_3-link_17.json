{
    "id": "correct_foundationPlace_00081_3",
    "rank": 17,
    "data": {
        "url": "https://www.cio.com/article/2091709/cloud-native-platforms-to-build-or-to-buy.html",
        "read_more_link": "",
        "language": "en",
        "title": "Cloud native platforms: To build or to buy?",
        "top_image": "https://www.cio.com/wp-content/uploads/2024/04/iStock-1483869912.png?w=1024",
        "meta_img": "https://www.cio.com/wp-content/uploads/2024/04/iStock-1483869912.png?w=1024",
        "images": [
            "https://www.cio.com/wp-content/uploads/2024/07/TZLG-VMwareTanzu-Stacked-FULLCOLOR.png?w=1024",
            "https://www.cio.com/wp-content/uploads/2024/04/iStock-1483869912.png?w=1024",
            "https://www.cio.com/wp-content/uploads/2024/07/2520890-0-73833900-1721642546-shutterstock_661115842.jpg?quality=50&strip=all&w=444",
            "https://www.cio.com/wp-content/uploads/2024/07/2517997-0-94355600-1721642494-shutterstock_2149947783.jpg?quality=50&strip=all&w=380",
            "https://www.cio.com/wp-content/uploads/2024/07/2874005-0-15810700-1721463182-CrowdStrike.jpg?quality=50&strip=all&w=333",
            "https://www.cio.com/wp-content/uploads/2024/07/sinan-thumb-16x9-1-2.jpg?quality=50&strip=all&w=444",
            "https://www.cio.com/wp-content/uploads/2024/07/Thumb_CIOLL_ME24_Mosa_A.png?w=444",
            "https://www.cio.com/wp-content/uploads/2024/07/Thumb_CIOLL_ME24_Al_Moawda_RA-1.png?w=444",
            "https://www.cio.com/wp-content/uploads/2024/07/2520487-0-45106700-1721290364-CIOLL-India-thumb_Irshad-Saifi.jpg?quality=50&strip=all&w=444",
            "https://www.cio.com/wp-content/uploads/2024/07/sinan-thumb-16x9-1-3.jpg?quality=50&strip=all&w=444",
            "https://www.cio.com/wp-content/uploads/2024/07/Thumb_CIOLL_ME24_Al_Moawda_RA-2.png?w=444"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Michael Coté, Senior Member of Technical Staff, Tanzu Division, Broadcom"
        ],
        "publish_date": "2024-04-15T20:23:55-07:00",
        "summary": "",
        "meta_description": "Ask yourself…should you choose the components you need for a platform and integrate them, or should you buy a pre-integrated platform? Learn more today.",
        "meta_lang": "en",
        "meta_favicon": "https://www.cio.com/wp-content/themes/cio-b2b-child-theme/src/static/img/favicon.ico",
        "meta_site_name": "CIO",
        "canonical_link": "https://www.cio.com/article/2091709/cloud-native-platforms-to-build-or-to-buy.html",
        "text": "When it comes to cloud native application platforms, we’re at an important evolutionary point: will the best practice for platforms be to build or to buy? Should you choose the components you need for a platform and integrate them together, or should you buy a pre-integrated platform? Unless you’re a handful of organizations, the practical answer is that you should buy the platform.\n\nBefore I get to why, what even is a “cloud native platform”?\n\nDefining a cloud native platform\n\nThe Platforms Working Group at the Cloud Native Computing Foundation (CNCF) has a great paper defining “platform.” Trying their best to boil down 13 pages into one paragraph, the authors summarize a platform as:\n\nPlatforms curate and present foundational capabilities, frameworks, and experiences to facilitate and accelerate the work of internal customers such as application developers, data scientists, and information workers… A platform for cloud-native computing is an integrated collection of capabilities defined and presented according to the needs of the platform’s users. It is a cross-cutting layer that ensures a consistent experience for acquiring and integrating typical capabilities and services for a broad set of applications and use cases. A good platform provides consistent user experiences for using and managing its capabilities and services, such as Web portals, project templates, and self-service APIs.\n\nPlatforms support the software you’ve built to run your business. A platform not only runs that software, but it manages the services your apps need. Typically, the platform also specifies how your apps are packaged, configured, and deployed to your platform. The platform usually has opinions about your app’s architecture. For example, a cloud native platform really wants your apps to follow the 12-factor best practices and use a microservices architecture.\n\nAvoid accidental platforms\n\nPlatforms are the interface between your application developers and the cloud infrastructure and services their apps use. To me, that’s the key thing that makes it a platform instead of just a pile of clouds or catalogs full of “services” that developers have to find, learn, and integrate into their applications.\n\nAll apps need a platform to run. Developers will create that platform if one doesn’t exist. This leads to the spread of “accidental platforms” across the organization. All of these platforms need to be managed and cared for, and since they’re all different, staff spend a lot of time managing each platform. In a large organization with thousands of developers and applications, teams don’t get the benefits of scale when they have a bunch of different platforms. This creates a huge amount of drag on IT: an IT manager, for example, and his staff could end up spending between 70% and 80% of their time on maintenance just keeping all the platforms running, with little time left over to improve those platforms or add new functionality developers need.\n\nThe main issue here is that it drags down the actual business because an organization’s apps are increasingly how the business functions, and even what the business is to customers. Think about how people interact with businesses, government agencies, schools, and even their hobbies and entertainment. Most of that is done through an app, through software as the primary, if not mission critical, component and “storefront.” And it’s not only that, software is how businesses get better, grow, and innovate.\n\nIs Kubernetes a platform?\n\nOver the past few years, there’s been a lot of confusion about where the line between a platform and infrastructure is, mostly driven by everyone’s interest in Kubernetes. Kubernetes is more focused on standardizing how infrastructure is used and managed, and how apps are configured and run.\n\nThat standardization is the goal of Kubernetes: wrapping an industry-standard API around all the different cloud infrastructures. It’s removing variability, which is always good in large IT shops. But, as said long ago, Kubernetes is a platform for building platforms. You use it to standardize your infrastructure across clouds, across on-premises, and even “edge,” so that you can then build your application-focused platform. On its own, Kubernetes just delivers a blinking cursor: an empty cloud that’s ready to be filled with useful services and apps.\n\nBut if you stop there, things go poorly. Many organizations are much too quick to hand over that blinking cursor to developer teams who have to first understand how Kubernetes works, and then, second, build the platform they need on top of Kubernetes. The result is a backslide into a mess of accidental platforms.\n\nSo, is Kubernetes a platform? Not the kind we’re talking about here, a platform for application developers. It’s the foundation for a platform. You still need to add the services, interfaces, and tools that application developers use. There are also all the usual operations, security, and compliance services you need.\n\nPitfalls to building a platform\n\nThis is all to say that if you’re building a platform, you have a lot of work to do. You need to select each of the components, integrate them together, keep them updated, and improve them as you learn what works and doesn’t. In short, you now “own” a full product, including supporting it. And you need to run it and manage it. Ongoing, as new capabilities come along you’ll need to add those into your platform, for example, AI, new versions of programming languages and UI frameworks, databases, and so forth.\n\nThis is a lot of work. There used to be a quip that “all companies are software companies now.” which always seemed weird to me. No matter how good at software my favorite fried chicken restaurant is, if I order some Korean fried chicken, I want to find some fried chicken and fried cauliflower in the box, not software. But, once you start building your own platform, then you are a software company with the responsibility to build and maintain a software product. That requires a lot of corporate resources like time, money, and attention.\n\nWhether your business is fast food, insurance, manufacturing cars, collecting taxes, or whatever else, you’d probably rather spend time being good at your business than good at platform building.\n\nBenefits of buying a platform\n\nFor most organizations, a platform contributes very little to a business’ differentiation. You need a platform, but like electricity, email, ERP systems, and even analytics, the platform itself isn’t what makes a difference. What makes a difference is what you do with the platform and how you use the platform. The more time you spend building and maintaining your own, homegrown platform, the less time you spend focused on your actual differentiation, including your applications.\n\nSo, unless your customers buy from you because of your unique platform, you should probably buy your platform instead of building it.\n\nThis frees up your resources to focus on your actual competitive advantages. You’ll also benefit from the platform being an actual product. For example, at the Tanzu Division of Broadcom, we build a platform, and we spend all of our time adding new features, improving it, and integrating it with as many types of infrastructure and services as possible.\n\nThe feature-set isn’t static like so many homemade platforms in large organizations end up being. You can see this with the AI services we’re adding to the Tanzu Platform – that’s become a priority for many organizations, so we’ve been adding it to our platform. The comprehensive integration with the Spring Framework is another example. If you have enterprise applications, you likely have many Java applications, and if you have Java applications, you’re very likely using a lot of Spring. If you use the Tanzu Platform, you can update your Spring apps quickly and easily, benefiting not only from new features in Spring and Java but also getting the performance and cost savings improvements.\n\nWhat that means is that you have more time to focus on what actually matters: your own software and applications. That’s enough work, and hard enough, without having to worry about how you configure and deploy software, manage security, handle data, and otherwise do all that stuff below your apps.\n\nTo the question of whether it’s ultimately better to build or buy: buying a platform means you can focus all of your effort and resources on making your business better by perfecting how you make your software.\n\nIf you’re interested in how a platform fits into improving how your organization builds and runs software, check out this discussion I had on that topic with Purnima Padmanabhan and James Watters.\n\nWe of course talk about the VMware Tanzu platform, but you’ll also hear how large organizations are thinking through this build/buy decision."
    }
}