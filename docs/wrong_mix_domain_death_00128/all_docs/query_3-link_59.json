{
    "id": "wrong_mix_domain_death_00128_3",
    "rank": 59,
    "data": {
        "url": "https://snowfakery.readthedocs.io/en/v2.3/fakedata/fil_PH.html",
        "read_more_link": "",
        "language": "en",
        "title": "Fake Data: Filipino as spoken in Philippines (fil_PH) ¶",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "../img/favicon.ico",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Fake Data: Filipino as spoken in Philippines (fil_PH)¶\n\nThe basic concepts of fake data are described in the main tutorial.\n\nOur fake data can be localized to many languages. We have detailed docs about the other languages.\n\nCurrent Locale: fil_PH (Philippines)\n\nCommonly Used¶\n\nSalesforce Fakers¶\n\nfake: Email¶\n\nEmail address using one of the \"example\" domains\n\nAliases: email\n\nSource: snowfakery : snowfakery.fakedata.fake_data_generator.FakeNames.email\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Contact fields: FirstName: fake: FirstName LastName: fake: LastName Email: fake: Email - object: Contact fields: FirstName: ${{fake.FirstName}} Sam LastName: ${{fake.FirstName}} Senior Email: ${{fake.Email}}\n\nOutputs:\n\nContact(id=1, FirstName=Kerri, LastName=Vasquez, Email=Ke+Vasquez1979@example.com) Contact(id=2, FirstName=Hunter Sam, LastName=Dwayne Senior, Email=lydia92@example.com)\n\nfake: Postalcode¶\n\nReturn whatever counts as a postalcode for a particular locale\n\nAliases: postalcode\n\nSource: snowfakery : snowfakery.fakedata.fake_data_generator.FakeNames.postalcode\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Account fields: Name: fake: Company BillingPostalCode: fake: postalcode - object: Account fields: Name: ${{fake.Company}} Holdings BillingPostalCode: ${{fake.Postalcode}}\n\nOutputs:\n\nAccount(id=1, Name=Manila Crown Ventures Corporation, BillingPostalCode=0418) Account(id=2, Name=RRL Trust Inc. Holdings, BillingPostalCode=3531)\n\nfake: State¶\n\nReturn a state, province or other appropriate administrative unit\n\nAliases: state\n\nSource: snowfakery : snowfakery.fakedata.fake_data_generator.FakeNames.state\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Account fields: Name: fake: Company BillingState: fake: State - object: Account fields: Name: ${{fake.Company}} Holdings BillingState: ${{fake.State}}\n\nOutputs:\n\nAccount(id=1, Name=QCY Shipping Limited, BillingState=Surigao del Norte) Account(id=2, Name=Strickland Star Group Limited Holdings, BillingState=Pangasinan)\n\nAddress Fakers¶\n\nfake: City¶\n\nExample: 'Sashabury'\n\nAliases: city\n\nSource: faker : faker.providers.address.fil_PH.Provider.city\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Account fields: Name: fake: Company BillingCity: fake: City - object: Account fields: Name: ${{fake.Company}} Holdings BillingCity: ${{fake.City}}\n\nOutputs:\n\nAccount(id=1, Name=SU Services Corporation, BillingCity=Holly Ville) Account(id=2, Name=Koch Trust Corporation Holdings, BillingCity=Alicia Ville)\n\nfake: Country¶\n\nAliases: country\n\nSource: faker : faker.providers.address.fil_PH.Provider.country\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Account fields: Name: fake: Company BillingCountry: fake: Country - object: Account fields: Name: ${{fake.Company}} Holdings BillingCountry: ${{fake.Country}}\n\nOutputs:\n\nAccount(id=1, Name=National Bottle Corporation of the Philippines, BillingCountry=Belize) Account(id=2, Name=National Computer Corporation of the Philippines Holdings, BillingCountry=Monaco)\n\nfake: CurrentCountry¶\n\nAliases: current_country, currentcountry\n\nSource: faker : faker.providers.address.fil_PH.Provider.current_country\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Account fields: Name: fake: Company BillingCountry: fake: CurrentCountry - object: Account fields: Name: ${{fake.Company}} Holdings BillingCountry: ${{fake.CurrentCountry}}\n\nOutputs:\n\nAccount(id=1, Name=LY Century Resources Corporation, BillingCountry=Philippines) Account(id=2, Name=RD Capital Limited Holdings, BillingCountry=Philippines)\n\nfake: StreetAddress¶\n\nExample: '791 Crist Parks'\n\nAliases: street_address, streetaddress\n\nSource: faker : faker.providers.address.fil_PH.Provider.street_address\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Account fields: Name: fake: Company BillingStreet: fake: StreetAddress - object: Account fields: Name: ${{fake.Company}} Holdings BillingStreet: ${{fake.StreetAddress}}\n\nOutputs:\n\nAccount(id=1, Name=Pacific Development Inc., BillingStreet=Block 19 Lot 66 Turquoise Drive, Mercury Grove Phase 3) Account(id=2, Name=AMRC Finance Inc. Holdings, BillingStreet=9997 Unit F Zircon Drive)\n\nCompany Fakers¶\n\nfake: Company¶\n\nExample: 'Acme Ltd'\n\nAliases: company\n\nSource: faker : faker.providers.company.fil_PH.Provider.company\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Account fields: Name: fake: Company - object: Account fields: Name: ${{fake.Company}} Holdings\n\nOutputs:\n\nAccount(id=1, Name=XKJT Star Trust Limited) Account(id=2, Name=Prime Technologies Limited Holdings)\n\nfake: Time¶\n\nGet a time string (24h format by default)\n\nParam: pattern format\n\nExample: '15:02:34'\n\nAliases: time\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.time\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Time}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=08:43:22)\n\nfake: Year¶\n\nAliases: year\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.year\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Student fields: GraduationYear: fake: year - object: Student fields: GraduationYear: ${{year}}\n\nOutputs:\n\nStudent(id=1, GraduationYear=1987) Student(id=2, GraduationYear=)\n\nFil_Ph Fakers¶\n\nfake: CatchPhrase¶\n\nAliases: catch_phrase, catchphrase\n\nSource: faker : faker.providers.company.fil_PH.Provider.catch_phrase\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Account fields: Name: fake: Company Description: fake: CatchPhrase - object: Account fields: Name: ${{fake.Company}} Holdings Description: 'Our Motto: ${{fake.CatchPhrase}}'\n\nOutputs:\n\nAccount(id=1, Name=Coleman Morning Properties Limited, Description={{english_catch_phrase}}) Account(id=2, Name=Wise Gold Sun Mining Limited Holdings, Description=Our Motto: Serbisyong {{random_good_service_adjective}} para sa {{random_object_of_concern}}!)\n\nLorem Fakers¶\n\nfake: Paragraph¶\n\nGenerate a paragraph.\n\nThe nb_sentences argument controls how many sentences the paragraph will contain, and setting variable_nb_sentences to False will generate the exact amount, while setting it to True (default) will generate a random amount (+/-40%, minimum of 1) using |randomize_nb_elements|.\n\nUnder the hood, |sentences| is used to generate the sentences, so the argument ext_word_list works in the same way here as it would in that method.\n\next_word_list=['abc', 'def', 'ghi', 'jkl']\n\nAliases: paragraph\n\nSource: faker : faker.providers.lorem.fil_PH.Provider.paragraph\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Paragraph(nb_sentences=5)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Bagaman oras bigay braso apat bakal palapag. Paa silangan larawan langoy ganap enerhiya oras. Maaari katangian nawala wika tapang sa. Husay bayad magkano ilang.)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Paragraph(nb_sentences=5, variable_nb_sentences=False)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Patlang ilang asawa hanap gastos tren ipon. Numero mahal takot siyam bigkas. Kaisa-Isa kanya na abo dapat. Buntot gabi kaso panganib oo suot. Kama pamilya kapal.)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Paragraph(nb_sentences=5, ext_word_list=['abc', 'def', 'ghi', 'jkl'])}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Def def abc ghi. Jkl ghi abc abc def jkl abc. Abc jkl ghi abc ghi jkl.)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Paragraph(nb_sentences=5, variable_nb_sentences=False, ext_word_list=['abc', 'def', 'ghi', 'jkl'])}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Jkl def abc abc jkl jkl. Ghi abc ghi abc def ghi abc. Jkl def abc def def jkl jkl. Ghi jkl ghi abc. Def abc abc ghi.)\n\nfake: Sentence¶\n\nGenerate a sentence.\n\nThe nb_words argument controls how many words the sentence will contain, and setting variable_nb_words to False will generate the exact amount, while setting it to True (default) will generate a random amount (+/-40%, minimum of 1) using |randomize_nb_elements|.\n\nUnder the hood, |words| is used to generate the words, so the argument ext_word_list works in the same way here as it would in that method.\n\next_word_list=['abc', 'def', 'ghi', 'jkl']\n\nAliases: sentence\n\nSource: faker : faker.providers.lorem.fil_PH.Provider.sentence\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Sentence(nb_words=10)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Ko basa karanasan mangyaring tao tuloy kopya sulong gulo salamin.)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Sentence(nb_words=10, variable_nb_words=False)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Laman timbang batay lima pandiwa likha sang-ayon ligaw tulog mali.)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Sentence(nb_words=10, ext_word_list=['abc', 'def', 'ghi', 'jkl'])}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Def abc jkl def abc abc jkl abc jkl def abc ghi abc.)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Sentence(nb_words=10, variable_nb_words=True, ext_word_list=['abc', 'def', 'ghi', 'jkl'])}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Jkl jkl jkl jkl ghi def ghi.)\n\nfake: Text¶\n\nGenerate a text string.\n\nThe max_nb_chars argument controls the approximate number of characters the text string will have, and depending on its value, this method may use either |words|, |sentences|, or |paragraphs| for text generation. The ext_word_list argument works in exactly the same way it would in any of those methods.\n\nAliases: text\n\nSource: faker : faker.providers.lorem.fil_PH.Provider.text\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Text(max_nb_chars=20)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Lakas radyo.)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Text(max_nb_chars=80)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Mangyaring sayaw ilan. Panahon baba tapang estado salamat binti.)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Text(max_nb_chars=160)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Marami sila bagay bago hila karaniwan. Laki aral basa upo. Gulo tandaan klase tama luma. Radyo bulaklak buo lawa. Mainam kasama dagdag klase.)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Text(ext_word_list=['abc', 'def', 'ghi', 'jkl'])}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Ghi jkl abc ghi ghi abc. Ghi def jkl ghi def. Def ghi abc def def abc ghi. Jkl ghi abc abc def jkl abc. Abc jkl ghi abc ghi jkl. Def abc ghi abc jkl ghi. Abc ghi abc def. Abc jkl def abc.)\n\nfake: Word¶\n\nGenerate a word.\n\nThis method uses |words| under the hood with the nb argument set to 1 to generate the result.\n\nAliases: word\n\nSource: faker : faker.providers.lorem.fil_PH.Provider.word\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Word}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=bagal)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Word(ext_word_list=['abc', 'def', 'ghi', 'jkl'])}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=ghi)\n\nPerson Fakers¶\n\nfake: FirstName¶\n\nAliases: first_name, firstname\n\nSource: faker : faker.providers.person.en_US.Provider.first_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Contact fields: FirstName: fake: FirstName LastName: fake: LastName - object: Contact fields: FirstName: ${{fake.FirstName}} Sam LastName: ${{fake.LastName}}-Jones\n\nOutputs:\n\nContact(id=1, FirstName=Vernon, LastName=Bright) Contact(id=2, FirstName=Jodi Sam, LastName=Cortez-Jones)\n\nfake: FirstNameFemale¶\n\nAliases: first_name_female, firstnamefemale\n\nSource: faker : faker.providers.person.en_US.Provider.first_name_female\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Contact fields: FirstName: fake: FirstNameFemale LastName: fake: LastName - object: Contact fields: FirstName: ${{fake.FirstNameFemale}} Beth LastName: ${{fake.LastName}}-Jones\n\nOutputs:\n\nContact(id=1, FirstName=Catherine, LastName=Hopkins) Contact(id=2, FirstName=Catherine Beth, LastName=Frost-Jones)\n\nfake: FirstNameMale¶\n\nAliases: first_name_male, firstnamemale\n\nSource: faker : faker.providers.person.en_US.Provider.first_name_male\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Contact fields: FirstName: fake: FirstNameMale LastName: fake: LastName - object: Contact fields: FirstName: ${{fake.FirstNameMale}} Beth LastName: ${{fake.LastName}}-Jones\n\nOutputs:\n\nContact(id=1, FirstName=Ruben, LastName=Escobar) Contact(id=2, FirstName=Tyler Beth, LastName=Davila-Jones)\n\nfake: FirstNameNonbinary¶\n\nAliases: first_name_nonbinary, firstnamenonbinary\n\nSource: faker : faker.providers.person.en_US.Provider.first_name_nonbinary\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Contact fields: FirstName: fake: FirstNameNonBinary LastName: fake: LastName - object: Contact fields: FirstName: ${{fake.FirstNameNonBinary}} Mary-John LastName: ${{fake.LastName}}-Jones\n\nOutputs:\n\nContact(id=1, FirstName=Darin, LastName=Daugherty) Contact(id=2, FirstName=Amber Mary-John, LastName=Bauer-Jones)\n\nfake: LastName¶\n\nAliases: last_name, lastname\n\nSource: faker : faker.providers.person.en_US.Provider.last_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: Contact fields: FirstName: fake: FirstName LastName: fake: LastName - object: Contact fields: FirstName: ${{fake.FirstName}} Sam LastName: ${{fake.FirstName}} Senior\n\nOutputs:\n\nContact(id=1, FirstName=Abigail, LastName=Grimes) Contact(id=2, FirstName=Sylvia Sam, LastName=Louis Senior)\n\nRarely Used¶\n\nSalesforce Fakers¶\n\nfake: UserName¶\n\nSalesforce-style username in the form of an email address\n\nAliases: user_name, username\n\nSource: snowfakery : snowfakery.fakedata.fake_data_generator.FakeNames.user_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UserName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Karina_Ramos_b4e1357d-4a84-4b03-8d1f-d9b74d2b9deb@web-28.doublemorning.com.ph)\n\nfake: Alias¶\n\nSalesforce-style 8-character alias: really an 8 char-truncated firstname. Not necessarily unique, but likely to be unique if you create small numbers of them.\n\nAliases: alias\n\nSource: snowfakery : snowfakery.fakedata.fake_data_generator.FakeNames.alias\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Alias}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Ana)\n\nfake: RealisticMaybeRealEmail¶\n\nLike fake: email except that the email domain may be real and therefore the email address itself may be real. Use with caution, you might accidentally email strangers!!!\n\nAliases: realistic_maybe_real_email, realisticmayberealemail\n\nSource: snowfakery : snowfakery.fakedata.fake_data_generator.FakeNames.realistic_maybe_real_email\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RealisticMaybeRealEmail}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=nichole34@example.org)\n\nAddress Fakers¶\n\nfake: CitySuffix¶\n\nExample: 'town'\n\nAliases: city_suffix, citysuffix\n\nSource: faker : faker.providers.address.fil_PH.Provider.city_suffix\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CitySuffix}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Ville)\n\nfake: CountryCode¶\n\nAliases: country_code, countrycode\n\nSource: faker : faker.providers.address.fil_PH.Provider.country_code\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CountryCode}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=NL)\n\nfake: CurrentCountryCode¶\n\nAliases: current_country_code, currentcountrycode\n\nSource: faker : faker.providers.address.fil_PH.Provider.current_country_code\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CurrentCountryCode}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=PH)\n\nfake: StreetName¶\n\nExample: 'Crist Parks'\n\nAliases: street_name, streetname\n\nSource: faker : faker.providers.address.fil_PH.Provider.street_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.StreetName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Makiling Service Road)\n\nfake: StreetSuffix¶\n\nExample: 'Avenue'\n\nAliases: street_suffix, streetsuffix\n\nSource: faker : faker.providers.address.fil_PH.Provider.street_suffix\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.StreetSuffix}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Service Road)\n\nBank Fakers¶\n\nfake: Aba¶\n\nGenerate an ABA routing transit number.\n\nAliases: aba\n\nSource: faker : faker.providers.bank.fil_PH.Provider.aba\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Aba}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=052194896)\n\nfake: BankCountry¶\n\nGenerate the bank provider's ISO 3166-1 alpha-2 country code.\n\nAliases: bank_country, bankcountry\n\nSource: faker : faker.providers.bank.fil_PH.Provider.bank_country\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.BankCountry}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=PH)\n\nfake: Swift¶\n\nGenerate a SWIFT code.\n\nSWIFT codes, reading from left to right, are composed of a 4 alphabet character bank code, a 2 alphabet character country code, a 2 alphanumeric location code, and an optional 3 alphanumeric branch code. This means SWIFT codes can only have 8 or 11 characters, so the value of length can only be None or the integers 8 or 11. If the value is None, then a value of 8 or 11 will randomly be assigned.\n\nBecause all 8-digit SWIFT codes already refer to the primary branch or office, the primary argument only has an effect if the value of length is 11. If primary is True and length is 11, the 11-digit SWIFT codes generated will always end in 'XXX' to denote that they belong to primary branches/offices.\n\nFor extra authenticity, localized providers may opt to include SWIFT bank codes, location codes, and branch codes used in their respective locales. If use_dataset is True, this method will generate SWIFT codes based on those locale-specific codes if included. If those codes were not included, then it will behave as if use_dataset were False, and in that mode, all those codes will just be randomly generated as per the specification.\n\nAliases: swift\n\nSource: faker : faker.providers.bank.fil_PH.Provider.swift\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Swift}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=JDXCPHV4)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Swift(length=8)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=ZRACPHZA)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Swift(length=8, use_dataset=True)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=CITIPHMX)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Swift(length=11)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=WDRKPH8N9S2)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Swift(length=11, primary=True)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=PCCVPHIJXXX)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Swift(length=11, use_dataset=True)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=PABIPH2XEQI)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Swift(length=11, primary=True, use_dataset=True)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=PNBMPHM1XXX)\n\nfake: Swift11¶\n\nGenerate an 11-digit SWIFT code.\n\nThis method uses |swift| under the hood with the length argument set to 11. If primary is set to True, the SWIFT code will always end with 'XXX'. All 11-digit SWIFT codes use this convention to refer to the primary branch/office.\n\nAliases: swift11\n\nSource: faker : faker.providers.bank.fil_PH.Provider.swift11\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Swift11}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=TZIRPHJTGEV)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Swift11(use_dataset=True)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=RCBCPHMXEQI)\n\nfake: Swift8¶\n\nGenerate an 8-digit SWIFT code.\n\nThis method uses |swift| under the hood with the length argument set to 8 and with the primary argument omitted. All 8-digit SWIFT codes already refer to the primary branch/office.\n\nAliases: swift8\n\nSource: faker : faker.providers.bank.fil_PH.Provider.swift8\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Swift8}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=SGQEPHSI)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Swift8(use_dataset=True)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=PHSBPHMX)\n\nBarcode Fakers¶\n\nfake: Ean¶\n\nGenerate an EAN barcode of the specified length.\n\nThe value of length can only be 8 or 13 (default) which will create an EAN-8 or an EAN-13 barcode respectively.\n\nIf a value for prefixes is specified, the result will begin with one of the sequences in prefixes.\n\nAliases: ean\n\nSource: faker : faker.providers.barcode.en_US.Provider.ean\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean(length=13)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=1578156593879)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean(length=8)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=13933289)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean(prefixes=('00', ))}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=0015871484187)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean(prefixes=('45', '49'))}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=4598947196598)\n\nfake: Ean13¶\n\nGenerate an EAN-13 barcode.\n\nIf leading_zero is True, the leftmost digit of the barcode will be set to 0. If False, the leftmost digit cannot be 0. If None (default), the leftmost digit can be any digit.\n\nIf a value for prefixes is specified, the result will begin with one of the sequences in prefixes and will ignore leading_zero.\n\nThis method uses the standard barcode provider's |ean13| under the hood with the prefixes argument set to the correct value to attain the behavior described above.\n\n.. note:: EAN-13 barcode that starts with a zero can be converted to UPC-A by dropping the leading zero. This may cause problems with readers that treat all of these code as UPC-A codes and drop the first digit when reading it.\n\nYou can set the argument prefixes ( or leading_zero for convenience) explicitly to avoid or to force the generated barcode to start with a zero. You can also generate actual UPC-A barcode with |EnUsBarcodeProvider.upc_a|.\n\nAliases: ean13\n\nSource: faker : faker.providers.barcode.en_US.Provider.ean13\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean13}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=1578156593879)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean13(leading_zero=False)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=5418583989479)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean13(leading_zero=True)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=0694775159171)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean13(prefixes=('00', ))}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=0004135256011)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean13(prefixes=('45', '49'))}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=4998910139919)\n\nfake: Ean8¶\n\nGenerate an EAN-8 barcode.\n\nThis method uses |ean| under the hood with the length argument explicitly set to 8.\n\nIf a value for prefixes is specified, the result will begin with one of the sequences in prefixes.\n\nAliases: ean8\n\nSource: faker : faker.providers.barcode.en_US.Provider.ean8\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean8}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=42194897)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean8(prefixes=('00', ))}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=00115780)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ean8(prefixes=('45', '49'))}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=49593877)\n\nfake: LocalizedEan¶\n\nGenerate a localized EAN barcode of the specified length.\n\nThe value of length can only be 8 or 13 (default) which will create an EAN-8 or an EAN-13 barcode respectively.\n\nThis method uses the standard barcode provider's |ean| under the hood with the prefixes argument explicitly set to local_prefixes of a localized barcode provider implementation.\n\nAliases: localized_ean, localizedean\n\nSource: faker : faker.providers.barcode.en_US.Provider.localized_ean\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.LocalizedEan}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=1381565938779)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.LocalizedEan(length=13)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=0948418583985)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.LocalizedEan(length=8)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=10220184)\n\nfake: LocalizedEan13¶\n\nGenerate a localized EAN-13 barcode.\n\nThis method uses |localized_ean| under the hood with the length argument explicitly set to 13.\n\nAliases: localized_ean13, localizedean13\n\nSource: faker : faker.providers.barcode.en_US.Provider.localized_ean13\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.LocalizedEan13}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=1381565938779)\n\nfake: LocalizedEan8¶\n\nGenerate a localized EAN-8 barcode.\n\nThis method uses |localized_ean| under the hood with the length argument explicitly set to 8.\n\nAliases: localized_ean8, localizedean8\n\nSource: faker : faker.providers.barcode.en_US.Provider.localized_ean8\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.LocalizedEan8}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=04948926)\n\nfake: UpcA¶\n\nGenerate a 12-digit UPC-A barcode.\n\nThe value of upc_ae_mode controls how barcodes will be generated. If False (default), barcodes are not guaranteed to have a UPC-E equivalent. In this mode, the method uses |EnUsBarcodeProvider.ean13| under the hood, and the values of base and number_system_digit will be ignored.\n\nIf upc_ae_mode is True, the resulting barcodes are guaranteed to have a UPC-E equivalent, and the values of base and number_system_digit will be used to control what is generated.\n\nUnder this mode, base is expected to have a 6-digit string value. If any other value is supplied, a random 6-digit string will be used instead. As for number_system_digit, the expected value is a 0 or a 1. If any other value is provided, this method will randomly choose from the two.\n\n.. important:: When upc_ae_mode is enabled, you might encounter instances where different values of base (e.g. '120003' and '120004') produce the same UPC-A barcode. This is normal, and the reason lies within the whole conversion process. To learn more about this and what base and number_system_digit actually represent, please refer to |EnUsBarcodeProvider.upc_e|.\n\nAliases: upc_a, upca\n\nSource: faker : faker.providers.barcode.en_US.Provider.upc_a\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcA}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=156593877847)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcA(upc_ae_mode=True, number_system_digit=0)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=093328000074)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcA(upc_ae_mode=True, number_system_digit=1)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=183980000090)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcA(upc_ae_mode=True, base='123456', number_system_digit=0)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=012345000065)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcA(upc_ae_mode=True, base='120003', number_system_digit=0)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=012000000003)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcA(upc_ae_mode=True, base='120004', number_system_digit=0)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=012000000003)\n\nfake: UpcE¶\n\nGenerate an 8-digit UPC-E barcode.\n\nUPC-E barcodes can be expressed in 6, 7, or 8-digit formats, but this method uses the 8 digit format, since it is trivial to convert to the other two formats. The first digit (starting from the left) is controlled by number_system_digit, and it can only be a 0 or a 1. The last digit is the check digit that is inherited from the UPC-E barcode's UPC-A equivalent. The middle six digits are collectively referred to as the base (for a lack of a better term).\n\nOn that note, this method uses base and number_system_digit to first generate a UPC-A barcode for the check digit, and what happens next depends on the value of safe_mode. The argument safe_mode exists, because there are some UPC-E values that share the same UPC-A equivalent. For example, any UPC-E barcode of the form abc0000d, abc0003d, and abc0004d share the same UPC-A value abc00000000d, but that UPC-A value will only convert to abc0000d because of (a) how UPC-E is just a zero-suppressed version of UPC-A and (b) the rules around the conversion.\n\nIf safe_mode is True (default), this method performs another set of conversions to guarantee that the UPC-E barcodes generated can be converted to UPC-A, and that UPC-A barcode can be converted back to the original UPC-E barcode. Using the example above, even if the bases 120003 or 120004 are used, the resulting UPC-E barcode will always use the base 120000.\n\nIf safe_mode is False, then the number_system_digit, base, and the computed check digit will just be concatenated together to produce the UPC-E barcode, and attempting to convert the barcode to UPC-A and back again to UPC-E will exhibit the behavior described above.\n\nAliases: upc_e, upce\n\nSource: faker : faker.providers.barcode.en_US.Provider.upc_e\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcE}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=04219484)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcE(base='123456')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=11234562)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcE(base='123456', number_system_digit=0)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=01234565)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcE(base='123456', number_system_digit=1)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=11234562)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcE(base='120000', number_system_digit=0)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=01200003)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcE(base='120003', number_system_digit=0)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=01200003)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcE(base='120004', number_system_digit=0)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=01200003)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcE(base='120000', number_system_digit=0, safe_mode=False)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=01200003)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcE(base='120003', number_system_digit=0, safe_mode=False)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=01200033)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UpcE(base='120004', number_system_digit=0, safe_mode=False)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=01200043)\n\nColor Fakers¶\n\nfake: Color¶\n\nGenerate a color in a human-friendly way.\n\nUnder the hood, this method first creates a color represented in the HSV color model and then converts it to the desired color_format. The argument hue controls the H value according to the following rules:\n\nIf the value is a number from 0 to 360, it will serve as the H value of the generated color.\n\nIf the value is a tuple/list of 2 numbers from 0 to 360, the color's H value will be randomly selected from that range.\n\nIf the value is a valid string, the color's H value will be randomly selected from the H range corresponding to the supplied string. Valid values are 'monochrome', 'red', 'orange', 'yellow', 'green', 'blue', 'purple', and 'pink'.\n\nThe argument luminosity influences both S and V values and is partially affected by hue as well. The finer details of this relationship are somewhat involved, so please refer to the source code instead if you wish to dig deeper. To keep the interface simple, this argument either can be omitted or can accept the following string values:'bright', 'dark', 'light', or 'random'.\n\nThe argument color_format controls in which color model the color is represented. Valid values are 'hsv', 'hsl', 'rgb', or 'hex' (default).\n\nAliases: color\n\nSource: faker : faker.providers.color.en_US.Provider.color\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Color(hue='red')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=#ef6466)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Color(luminosity='light')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=#f9e38b)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Color(hue=(100, 200), color_format='rgb')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=rgb(119, 229, 207))\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Color(hue='orange', luminosity='bright')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=#cc7824)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Color(hue=135, luminosity='dark', color_format='hsv')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=hsv(135, 98, 42))\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Color(hue=(300, 20), luminosity='random', color_format='hsl')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=hsl(67, 85, 27))\n\nfake: ColorName¶\n\nGenerate a color name.\n\nAliases: color_name, colorname\n\nSource: faker : faker.providers.color.en_US.Provider.color_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.ColorName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=BlueViolet)\n\nfake: HexColor¶\n\nGenerate a color formatted as a hex triplet.\n\nAliases: hex_color, hexcolor\n\nSource: faker : faker.providers.color.en_US.Provider.hex_color\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.HexColor}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=#c2094d)\n\nfake: RgbColor¶\n\nGenerate a color formatted as a comma-separated RGB value.\n\nAliases: rgb_color, rgbcolor\n\nSource: faker : faker.providers.color.en_US.Provider.rgb_color\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RgbColor}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=155,244,183)\n\nfake: RgbCssColor¶\n\nGenerate a color formatted as a CSS rgb() function.\n\nAliases: rgb_css_color, rgbcsscolor\n\nSource: faker : faker.providers.color.en_US.Provider.rgb_css_color\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RgbCssColor}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=rgb(155,244,183))\n\nfake: SafeColorName¶\n\nGenerate a web-safe color name.\n\nAliases: safe_color_name, safecolorname\n\nSource: faker : faker.providers.color.en_US.Provider.safe_color_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SafeColorName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=fuchsia)\n\nfake: SafeHexColor¶\n\nGenerate a web-safe color formatted as a hex triplet.\n\nAliases: safe_hex_color, safehexcolor\n\nSource: faker : faker.providers.color.en_US.Provider.safe_hex_color\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SafeHexColor}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=#99ffbb)\n\nCompany Fakers¶\n\nfake: Bs¶\n\nExample: 'integrate extensible convergence'\n\nAliases: bs\n\nSource: faker : faker.providers.company.fil_PH.Provider.bs\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Bs}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=synthesize wireless content)\n\nfake: CompanySuffix¶\n\nExample: 'Ltd'\n\nAliases: company_suffix, companysuffix\n\nSource: faker : faker.providers.company.fil_PH.Provider.company_suffix\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CompanySuffix}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Inc.)\n\nCredit_Card Fakers¶\n\nfake: CreditCardExpire¶\n\nGenerate a credit card expiry date.\n\nThis method uses |date_time_between| under the hood to generate the expiry date, so the start and end arguments work in the same way here as it would in that method. For the actual formatting of the expiry date, |strftime| is used and date_format is simply passed to that method.\n\nAliases: credit_card_expire, creditcardexpire\n\nSource: faker : faker.providers.credit_card.en_US.Provider.credit_card_expire\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CreditCardExpire}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=08/22)\n\nfake: CreditCardFull¶\n\nGenerate a set of credit card details.\n\nAliases: credit_card_full, creditcardfull\n\nSource: faker : faker.providers.credit_card.en_US.Provider.credit_card_full\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CreditCardFull}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Diners Club / Carte Blanche Andrea Dean 30513933287118 05/27 CVC: 871 )\n\nfake: CreditCardNumber¶\n\nGenerate a valid credit card number.\n\nAliases: credit_card_number, creditcardnumber\n\nSource: faker : faker.providers.credit_card.en_US.Provider.credit_card_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CreditCardNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=348778408016097)\n\nfake: CreditCardProvider¶\n\nGenerate a credit card provider name.\n\nAliases: credit_card_provider, creditcardprovider\n\nSource: faker : faker.providers.credit_card.en_US.Provider.credit_card_provider\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CreditCardProvider}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Maestro)\n\nfake: CreditCardSecurityCode¶\n\nGenerate a credit card security code.\n\nAliases: credit_card_security_code, creditcardsecuritycode\n\nSource: faker : faker.providers.credit_card.en_US.Provider.credit_card_security_code\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CreditCardSecurityCode}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=593)\n\nCurrency Fakers¶\n\nfake: Cryptocurrency¶\n\nAliases: cryptocurrency\n\nSource: faker : faker.providers.currency.en_US.Provider.cryptocurrency\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Cryptocurrency}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=('BC', 'BlackCoin'))\n\nfake: CryptocurrencyCode¶\n\nAliases: cryptocurrency_code, cryptocurrencycode\n\nSource: faker : faker.providers.currency.en_US.Provider.cryptocurrency_code\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CryptocurrencyCode}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=BC)\n\nfake: CryptocurrencyName¶\n\nAliases: cryptocurrency_name, cryptocurrencyname\n\nSource: faker : faker.providers.currency.en_US.Provider.cryptocurrency_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CryptocurrencyName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=BlackCoin)\n\nfake: Currency¶\n\nAliases: currency\n\nSource: faker : faker.providers.currency.en_US.Provider.currency\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Currency}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=('BAM', 'Bosnia and Herzegovina convertible mark'))\n\nfake: CurrencyCode¶\n\nAliases: currency_code, currencycode\n\nSource: faker : faker.providers.currency.en_US.Provider.currency_code\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CurrencyCode}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=BAM)\n\nfake: CurrencyName¶\n\nAliases: currency_name, currencyname\n\nSource: faker : faker.providers.currency.en_US.Provider.currency_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CurrencyName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Bosnia and Herzegovina convertible mark)\n\nfake: CurrencySymbol¶\n\nExample:: $\n\nAliases: currency_symbol, currencysymbol\n\nSource: faker : faker.providers.currency.en_US.Provider.currency_symbol\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CurrencySymbol}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=$)\n\nfake: Pricetag¶\n\nAliases: pricetag\n\nSource: faker : faker.providers.currency.en_US.Provider.pricetag\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Pricetag}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=$54.21)\n\nfake: AmPm¶\n\nAliases: am_pm, ampm\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.am_pm\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.AmPm}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=AM)\n\nfake: Century¶\n\nExample: 'XVII'\n\nAliases: century\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.century\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Century}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=II)\n\nGet a date string between January 1, 1970 and now\n\nParam: pattern format\n\nExample: '2008-11-27'\n\nAliases: date\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Date}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=1998-08-15)\n\nGet a Date object based on a random date between two given dates. Accepts date strings that can be recognized by strtotime().\n\nParam: start_date Defaults to 30 years ago\n\nParam: end_date Defaults to \"today\"\n\nExample: Date('1999-02-02')\n\nReturn: Date\n\nAliases: date_between, datebetween\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_between\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateBetween}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2017-09-21)\n\nTakes two Date objects and returns a random date between the two given dates. Accepts Date or datetime objects\n\nParam: date_start: Date\n\nParam: date_end: Date\n\nReturn: Date\n\nAliases: date_between_dates, datebetweendates\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_between_dates\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateBetweenDates}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-12-08)\n\nGet a date object between January 1, 1970 and now\n\nExample: datetime.date(2016, 9, 20)\n\nAliases: date_object, dateobject\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_object\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateObject}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=1998-08-15)\n\nGenerate a random date of birth represented as a Date object, constrained by optional miminimum_age and maximum_age parameters.\n\nParam: tzinfo Defaults to None.\n\nParam: minimum_age Defaults to 0.\n\nParam: maximum_age Defaults to 115.\n\nExample: Date('1979-02-02')\n\nReturn: Date\n\nAliases: date_of_birth, dateofbirth\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_of_birth\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateOfBirth}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2009-02-03)\n\nGets a Date object for the current century.\n\nParam: before_today: include days in current century before today\n\nParam: after_today: include days in current century after today\n\nExample: Date('2012-04-04')\n\nReturn: Date\n\nAliases: date_this_century, datethiscentury\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_this_century\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateThisCentury}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2001-05-18)\n\nGets a Date object for the decade year.\n\nParam: before_today: include days in current decade before today\n\nParam: after_today: include days in current decade after today\n\nExample: Date('2012-04-04')\n\nReturn: Date\n\nAliases: date_this_decade, datethisdecade\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_this_decade\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateThisDecade}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-08-11)\n\nGets a Date object for the current month.\n\nParam: before_today: include days in current month before today\n\nParam: after_today: include days in current month after today\n\nExample: dtdate('2012-04-04')\n\nReturn: dtdate\n\nAliases: date_this_month, datethismonth\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_this_month\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateThisMonth}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-12-01)\n\nGets a Date object for the current year.\n\nParam: before_today: include days in current year before today\n\nParam: after_today: include days in current year after today\n\nExample: Date('2012-04-04')\n\nReturn: Date\n\nAliases: date_this_year, datethisyear\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_this_year\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateThisYear}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-10-22)\n\nGet a datetime object for a date between January 1, 1970 and now\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: datetime('2005-08-16 20:39:21')\n\nReturn: datetime\n\nAliases: date_time, datetime\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_time\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateTime}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=1998-08-15 08:43:22)\n\nGet a datetime object for a date between January 1, 001 and now\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: datetime('1265-03-22 21:15:52')\n\nReturn: datetime\n\nAliases: date_time_ad, datetimead\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_time_ad\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateTimeAd}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=0058-03-29 17:26:45)\n\nGet a datetime object based on a random date between two given dates. Accepts date strings that can be recognized by strtotime().\n\nParam: start_date Defaults to 30 years ago\n\nParam: end_date Defaults to \"now\"\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: datetime('1999-02-02 11:42:52')\n\nReturn: datetime\n\nAliases: date_time_between, datetimebetween\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_time_between\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateTimeBetween}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2017-09-23 01:07:53)\n\nTakes two datetime objects and returns a random datetime between the two given datetimes. Accepts datetime objects.\n\nParam: datetime_start: datetime\n\nParam: datetime_end: datetime\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: datetime('1999-02-02 11:42:52')\n\nReturn: datetime\n\nAliases: date_time_between_dates, datetimebetweendates\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_time_between_dates\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateTimeBetweenDates}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-12-08 17:13:34)\n\nGets a datetime object for the current century.\n\nParam: before_now: include days in current century before today\n\nParam: after_now: include days in current century after today\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: datetime('2012-04-04 11:02:02')\n\nReturn: datetime\n\nAliases: date_time_this_century, datetimethiscentury\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_time_this_century\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateTimeThisCentury}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2001-05-18 02:56:13)\n\nGets a datetime object for the decade year.\n\nParam: before_now: include days in current decade before today\n\nParam: after_now: include days in current decade after today\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: datetime('2012-04-04 11:02:02')\n\nReturn: datetime\n\nAliases: date_time_this_decade, datetimethisdecade\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_time_this_decade\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateTimeThisDecade}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-08-11 17:17:38)\n\nGets a datetime object for the current month.\n\nParam: before_now: include days in current month before today\n\nParam: after_now: include days in current month after today\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: datetime('2012-04-04 11:02:02')\n\nReturn: datetime\n\nAliases: date_time_this_month, datetimethismonth\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_time_this_month\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateTimeThisMonth}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-12-01 11:47:30)\n\nGets a datetime object for the current year.\n\nParam: before_now: include days in current year before today\n\nParam: after_now: include days in current year after today\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: datetime('2012-04-04 11:02:02')\n\nReturn: datetime\n\nAliases: date_time_this_year, datetimethisyear\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.date_time_this_year\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DateTimeThisYear}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-10-22 08:38:49)\n\nfake: DayOfMonth¶\n\nAliases: day_of_month, dayofmonth\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.day_of_month\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DayOfMonth}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=15)\n\nGet a Date object based on a random date between 1 day from now and a given date. Accepts date strings that can be recognized by strtotime().\n\nParam: end_date Defaults to \"+30d\"\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: dtdate('2030-01-01')\n\nReturn: dtdate\n\nAliases: future_date, futuredate\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.future_date\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FutureDate}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-12-10)\n\nGet a datetime object based on a random date between 1 second form now and a given date. Accepts date strings that can be recognized by strtotime().\n\nParam: end_date Defaults to \"+30d\"\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: datetime('1999-02-02 11:42:52')\n\nReturn: datetime\n\nAliases: future_datetime, futuredatetime\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.future_datetime\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FutureDatetime}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-12-10 16:23:38)\n\nfake: Iso8601¶\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: '2003-10-21T16:05:52+0000'\n\nAliases: iso8601\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.iso8601\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Iso8601}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=1998-08-15T08:43:22)\n\nfake: Month¶\n\nAliases: month\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.month\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Month}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=08)\n\nGet a Date object based on a random date between a given date and 1 day ago. Accepts date strings that can be recognized by strtotime().\n\nParam: start_date Defaults to \"-30d\"\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: dtdate('1999-02-02')\n\nReturn: dtdate\n\nAliases: past_date, pastdate\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.past_date\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.PastDate}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-11-09)\n\nGet a datetime object based on a random date between a given date and 1 second ago. Accepts date strings that can be recognized by strtotime().\n\nParam: start_date Defaults to \"-30d\"\n\nParam: tzinfo: timezone, instance of datetime.tzinfo subclass\n\nExample: datetime('1999-02-02 11:42:52')\n\nReturn: datetime\n\nAliases: past_datetime, pastdatetime\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.past_datetime\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.PastDatetime}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2021-11-10 16:23:37)\n\nfake: Pytimezone¶\n\nGenerate a random timezone (see faker.timezone for any args) and return as a python object usable as a tzinfo to datetime or other fakers.\n\nExample: faker.pytimezone()\n\nReturn: dateutil.tz.tz.tzfile\n\nAliases: pytimezone\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.pytimezone\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Pytimezone}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=tzfile('/usr/share/zoneinfo/Europe/Stockholm'))\n\nfake: TimeDelta¶\n\nGet a timedelta object\n\nAliases: time_delta, timedelta\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.time_delta\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.TimeDelta}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=0:00:00)\n\nfake: TimeObject¶\n\nGet a time object\n\nExample: datetime.time(15, 56, 56, 772876)\n\nAliases: time_object, timeobject\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.time_object\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.TimeObject}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=08:43:22)\n\nfake: TimeSeries¶\n\nReturns a generator yielding tuples of (<datetime>, <value>).\n\nThe data points will start at start_date, and be at every time interval specified by precision. distrib is a callable that accepts <datetime> and returns <value>\n\nAliases: time_series, timeseries\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.time_series\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.TimeSeries}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=<generator object Provider.time_series at 0x7fa67cfe0c50>)\n\nfake: Timezone¶\n\nAliases: timezone\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.timezone\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Timezone}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Europe/Stockholm)\n\nfake: UnixTime¶\n\nGet a timestamp between January 1, 1970 and now, unless passed explicit start_datetime or end_datetime values.\n\nExample: 1061306726\n\nAliases: unix_time, unixtime\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.unix_time\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UnixTime}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=903170602)\n\nDecorators.Py Fakers¶\n\nfake: AsciiCompanyEmail¶\n\nAliases: ascii_company_email, asciicompanyemail\n\nSource: faker : faker.providers.internet.fil_PH.Provider.ascii_company_email\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.AsciiCompanyEmail}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=williamcoleman@dsdholdings.ph)\n\nfake: AsciiEmail¶\n\nAliases: ascii_email, asciiemail\n\nSource: faker : faker.providers.internet.fil_PH.Provider.ascii_email\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.AsciiEmail}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=patricia38@gmail.com)\n\nfake: AsciiFreeEmail¶\n\nAliases: ascii_free_email, asciifreeemail\n\nSource: faker : faker.providers.internet.fil_PH.Provider.ascii_free_email\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.AsciiFreeEmail}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=lcortez@gmail.com)\n\nfake: AsciiSafeEmail¶\n\nAliases: ascii_safe_email, asciisafeemail\n\nSource: faker : faker.providers.internet.fil_PH.Provider.ascii_safe_email\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.AsciiSafeEmail}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=lcortez@example.org)\n\nfake: CompanyEmail¶\n\nAliases: company_email, companyemail\n\nSource: faker : faker.providers.internet.fil_PH.Provider.company_email\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CompanyEmail}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=williamcoleman@dsdholdings.ph)\n\nfake: DomainName¶\n\nProduce an Internet domain name with the specified number of subdomain levels.\n\ndomain_name() nichols-phillips.com domain_name(2) williamson-hopkins.jackson.com\n\nAliases: domain_name, domainname\n\nSource: faker : faker.providers.internet.fil_PH.Provider.domain_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DomainName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=ngfinance.com.ph)\n\nfake: DomainWord¶\n\nAliases: domain_word, domainword\n\nSource: faker : faker.providers.internet.fil_PH.Provider.domain_word\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DomainWord}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=hhep)\n\nfake: FreeEmail¶\n\nAliases: free_email, freeemail\n\nSource: faker : faker.providers.internet.fil_PH.Provider.free_email\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FreeEmail}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=lcortez@gmail.com)\n\nfake: FreeEmailDomain¶\n\nAliases: free_email_domain, freeemaildomain\n\nSource: faker : faker.providers.internet.fil_PH.Provider.free_email_domain\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FreeEmailDomain}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=gmail.com)\n\nfake: Hostname¶\n\nProduce a hostname with specified number of subdomain levels.\n\nhostname() db-01.nichols-phillips.com hostname(0) laptop-56 hostname(2) web-12.williamson-hopkins.jackson.com\n\nAliases: hostname\n\nSource: faker : faker.providers.internet.fil_PH.Provider.hostname\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Hostname}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=desktop-21.greatmillennium.com)\n\nfake: SafeDomainName¶\n\nAliases: safe_domain_name, safedomainname\n\nSource: faker : faker.providers.internet.fil_PH.Provider.safe_domain_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SafeDomainName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=example.org)\n\nfake: SafeEmail¶\n\nAliases: safe_email, safeemail\n\nSource: faker : faker.providers.internet.fil_PH.Provider.safe_email\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SafeEmail}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=lcortez@example.org)\n\nfake: Slug¶\n\nDjango algorithm\n\nAliases: slug\n\nSource: faker : faker.providers.internet.fil_PH.Provider.slug\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Slug}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=lakas-radyo)\n\nEn_Ph Fakers¶\n\nfake: Address¶\n\nAliases: address\n\nSource: faker : faker.providers.address.fil_PH.Provider.address\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Address}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Block 20 Lot 82 71st Expressway, Rosas Grove Phase 1, Caloocan, 0591 Metro Manila)\n\nfake: AdministrativeUnit¶\n\nAliases: administrative_unit, administrativeunit\n\nSource: faker : faker.providers.address.fil_PH.Provider.administrative_unit\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.AdministrativeUnit}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Batanes)\n\nfake: Area2LandlineNumber¶\n\nAliases: area2_landline_number, area2landlinenumber\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.area2_landline_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Area2LandlineNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=02-8421-9489)\n\nfake: AutomobileLicensePlate¶\n\nGenerate an automobile license plate.\n\n.. note:: Cars, SUVs, vans, trucks, and other 4-wheeled civilian vehicles are considered automobiles for this purpose.\n\nAliases: automobile_license_plate, automobilelicenseplate\n\nSource: faker : faker.providers.automotive.fil_PH.Provider.automobile_license_plate\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.AutomobileLicensePlate}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=RWZ194)\n\nfake: BayantelArea2LandlineNumber¶\n\nAliases: bayantel_area2_landline_number, bayantelarea2landlinenumber\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.bayantel_area2_landline_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.BayantelArea2LandlineNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=02-3258-2421)\n\nfake: BayantelLandlineIdentifier¶\n\nAliases: bayantel_landline_identifier, bayantellandlineidentifier\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.bayantel_landline_identifier\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.BayantelLandlineIdentifier}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=3388)\n\nfake: Bban¶\n\nGenerate a Basic Bank Account Number (BBAN).\n\n.. warning:: Philippine bank accounts do not have BBANs or IBANs, so any number generated by this method is a purely hypothetical number. Local bank account numbers are typically 10 or 12 digits long, so the BBAN format used in this implementation has been arbitrarily set to 16 digits to simulate a hypothetical standardization of account numbers. Using this method will log a warning regarding the hypotheticality of the result.\n\nAliases: bban\n\nSource: faker : faker.providers.bank.fil_PH.Provider.bban\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Bban}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=9387784080160975)\n\nfake: BuildingName¶\n\nAliases: building_name, buildingname\n\nSource: faker : faker.providers.address.fil_PH.Provider.building_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.BuildingName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Mustard Residences)\n\nfake: BuildingNameSuffix¶\n\nAliases: building_name_suffix, buildingnamesuffix\n\nSource: faker : faker.providers.address.fil_PH.Provider.building_name_suffix\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.BuildingNameSuffix}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Place)\n\nfake: BuildingNumber¶\n\nAliases: building_number, buildingnumber\n\nSource: faker : faker.providers.address.fil_PH.Provider.building_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.BuildingNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=4970)\n\nfake: BuildingUnitNumber¶\n\nAliases: building_unit_number, buildingunitnumber\n\nSource: faker : faker.providers.address.fil_PH.Provider.building_unit_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.BuildingUnitNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=54th Floor)\n\nfake: CompanyType¶\n\nAliases: company_type, companytype\n\nSource: faker : faker.providers.company.fil_PH.Provider.company_type\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.CompanyType}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Banking)\n\nfake: FloorNumber¶\n\nAliases: floor_number, floornumber\n\nSource: faker : faker.providers.address.fil_PH.Provider.floor_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FloorNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=7)\n\nfake: FloorUnitNumber¶\n\nAliases: floor_unit_number, floorunitnumber\n\nSource: faker : faker.providers.address.fil_PH.Provider.floor_unit_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FloorUnitNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=6832)\n\nfake: GemstoneName¶\n\nAliases: gemstone_name, gemstonename\n\nSource: faker : faker.providers.misc.fil_PH.Provider.gemstone_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.GemstoneName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Amber)\n\nfake: GlobeArea2LandlineNumber¶\n\nAliases: globe_area2_landline_number, globearea2landlinenumber\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.globe_area2_landline_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.GlobeArea2LandlineNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=02-7948-9241)\n\nfake: GlobeMobileNumber¶\n\nAliases: globe_mobile_number, globemobilenumber\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.globe_mobile_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.GlobeMobileNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=+63967-924-1157)\n\nfake: GlobeMobileNumberPrefix¶\n\nAliases: globe_mobile_number_prefix, globemobilenumberprefix\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.globe_mobile_number_prefix\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.GlobeMobileNumberPrefix}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=994)\n\nfake: Gsis¶\n\nAliases: gsis\n\nSource: faker : faker.providers.ssn.fil_PH.Provider.gsis\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Gsis}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=78156593877)\n\nfake: Iban¶\n\nGenerate an International Bank Account Number (IBAN).\n\n.. warning:: Philippine bank accounts do not have BBANs or IBANs, so any number generated by this method is a purely hypothetical number. This method uses hypothetical PH BBANs and the PH country code as inputs to the IBAN generation algorithm. Using this method will log a warning regarding the hypotheticality of the result.\n\nAliases: iban\n\nSource: faker : faker.providers.bank.fil_PH.Provider.iban\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Iban}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=PH909387784080160975)\n\nfake: LandlineNumber¶\n\nAliases: landline_number, landlinenumber\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.landline_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.LandlineNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=044-421-9489)\n\nfake: LicensePlate¶\n\nGenerate a license plate.\n\n.. note:: This method will never generate protocol plates, because such plates are only for specific use cases.\n\nAliases: license_plate, licenseplate\n\nSource: faker : faker.providers.automotive.fil_PH.Provider.license_plate\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.LicensePlate}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=ZIR219)\n\nfake: LuzonProvince¶\n\nAliases: luzon_province, luzonprovince\n\nSource: faker : faker.providers.address.fil_PH.Provider.luzon_province\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.LuzonProvince}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Apayao)\n\nfake: LuzonProvinceAddress¶\n\nAliases: luzon_province_address, luzonprovinceaddress\n\nSource: faker : faker.providers.address.fil_PH.Provider.luzon_province_address\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.LuzonProvinceAddress}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Unit 9022 Tanguile Building 6, 7114 Topaz Road, Dipolog, 4113 Pangasinan)\n\nfake: LuzonProvincePostcode¶\n\nAliases: luzon_province_postcode, luzonprovincepostcode\n\nSource: faker : faker.providers.address.fil_PH.Provider.luzon_province_postcode\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.LuzonProvincePostcode}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=4954)\n\nfake: MetroManilaAddress¶\n\nAliases: metro_manila_address, metromanilaaddress\n\nSource: faker : faker.providers.address.fil_PH.Provider.metro_manila_address\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MetroManilaAddress}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Unit 9022 Tanguile Building 6, 7114 Topaz Road, Marikina, 1531 Metro Manila)\n\nfake: MetroManilaLgu¶\n\nAliases: metro_manila_lgu, metromanilalgu\n\nSource: faker : faker.providers.address.fil_PH.Provider.metro_manila_lgu\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MetroManilaLgu}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Las PiÃ±as)\n\nfake: MetroManilaPostcode¶\n\nAliases: metro_manila_postcode, metromanilapostcode\n\nSource: faker : faker.providers.address.fil_PH.Provider.metro_manila_postcode\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MetroManilaPostcode}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=0482)\n\nfake: MindanaoProvince¶\n\nAliases: mindanao_province, mindanaoprovince\n\nSource: faker : faker.providers.address.fil_PH.Provider.mindanao_province\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MindanaoProvince}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Lanao del Sur)\n\nfake: MindanaoProvinceAddress¶\n\nAliases: mindanao_province_address, mindanaoprovinceaddress\n\nSource: faker : faker.providers.address.fil_PH.Provider.mindanao_province_address\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MindanaoProvinceAddress}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Unit 9022 Tanguile Building 6, 7114 Topaz Road, Dipolog, 9763 Misamis Occidental)\n\nfake: MindanaoProvincePostcode¶\n\nAliases: mindanao_province_postcode, mindanaoprovincepostcode\n\nSource: faker : faker.providers.address.fil_PH.Provider.mindanao_province_postcode\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MindanaoProvincePostcode}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=7165)\n\nfake: MiscArea2LandlineNumber¶\n\nAliases: misc_area2_landline_number, miscarea2landlinenumber\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.misc_area2_landline_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MiscArea2LandlineNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=02-6077-2194)\n\nfake: MiscLandlineIdentifier¶\n\nAliases: misc_landline_identifier, misclandlineidentifier\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.misc_landline_identifier\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MiscLandlineIdentifier}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=5382)\n\nfake: MobileNumber¶\n\nAliases: mobile_number, mobilenumber\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.mobile_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MobileNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=0944-924-1157)\n\nfake: MotorcycleLicensePlate¶\n\nGenerate a motorcycle license plate.\n\n.. note:: Motorcycles and any improvised vehicle with a motorcycle as its base are issued motorcycle license plates.\n\nAliases: motorcycle_license_plate, motorcyclelicenseplate\n\nSource: faker : faker.providers.automotive.fil_PH.Provider.motorcycle_license_plate\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MotorcycleLicensePlate}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=WZ1948)\n\nfake: MountainName¶\n\nAliases: mountain_name, mountainname\n\nSource: faker : faker.providers.misc.fil_PH.Provider.mountain_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MountainName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Malinao)\n\nfake: NonArea2LandlineAreaCode¶\n\nAliases: non_area2_landline_area_code, nonarea2landlineareacode\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.non_area2_landline_area_code\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.NonArea2LandlineAreaCode}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=34)\n\nfake: NonArea2LandlineNumber¶\n\nAliases: non_area2_landline_number, nonarea2landlinenumber\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.non_area2_landline_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.NonArea2LandlineNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=062-115-7815)\n\nfake: OrdinalFloorNumber¶\n\nAliases: ordinal_floor_number, ordinalfloornumber\n\nSource: faker : faker.providers.address.fil_PH.Provider.ordinal_floor_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.OrdinalFloorNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=7th)\n\nfake: OrdinalStreetNumber¶\n\nAliases: ordinal_street_number, ordinalstreetnumber\n\nSource: faker : faker.providers.address.fil_PH.Provider.ordinal_street_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.OrdinalStreetNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=54th)\n\nfake: Pagibig¶\n\nAliases: pagibig\n\nSource: faker : faker.providers.ssn.fil_PH.Provider.pagibig\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Pagibig}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=8156-5938-7784)\n\nfake: PartitionedBuildingNumber¶\n\nAliases: partitioned_building_number, partitionedbuildingnumber\n\nSource: faker : faker.providers.address.fil_PH.Provider.partitioned_building_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.PartitionedBuildingNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=7809 Unit E)\n\nfake: Philhealth¶\n\nAliases: philhealth\n\nSource: faker : faker.providers.ssn.fil_PH.Provider.philhealth\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Philhealth}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=81-565938778-4)\n\nfake: PlantName¶\n\nAliases: plant_name, plantname\n\nSource: faker : faker.providers.misc.fil_PH.Provider.plant_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.PlantName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Jacaranda)\n\nfake: PldtArea2LandlineNumber¶\n\nAliases: pldt_area2_landline_number, pldtarea2landlinenumber\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.pldt_area2_landline_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.PldtArea2LandlineNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=02-8948-9241)\n\nfake: Postcode¶\n\nAliases: postcode\n\nSource: faker : faker.providers.address.fil_PH.Provider.postcode\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Postcode}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=1063)\n\nfake: ProtocolLicensePlate¶\n\nGenerate a protocol license plate.\n\n.. note:: High ranking government officials are entitled to use low numbered protocol license plates.\n\nAliases: protocol_license_plate, protocollicenseplate\n\nSource: faker : faker.providers.automotive.fil_PH.Provider.protocol_license_plate\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.ProtocolLicensePlate}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=2)\n\nfake: Province¶\n\nAliases: province\n\nSource: faker : faker.providers.address.fil_PH.Provider.administrative_unit\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Province}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Batanes)\n\nfake: ProvinceLgu¶\n\nAliases: province_lgu, provincelgu\n\nSource: faker : faker.providers.address.fil_PH.Provider.province_lgu\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.ProvinceLgu}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Babatngon)\n\nfake: RandomCompanyAcronym¶\n\nAliases: random_company_acronym, randomcompanyacronym\n\nSource: faker : faker.providers.company.fil_PH.Provider.random_company_acronym\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RandomCompanyAcronym}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=EVA)\n\nfake: RandomCompanyAdjective¶\n\nAliases: random_company_adjective, randomcompanyadjective\n\nSource: faker : faker.providers.company.fil_PH.Provider.random_company_adjective\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RandomCompanyAdjective}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Western)\n\nfake: RandomCompanyNounChain¶\n\nAliases: random_company_noun_chain, randomcompanynounchain\n\nSource: faker : faker.providers.company.fil_PH.Provider.random_company_noun_chain\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RandomCompanyNounChain}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Millennium Sun)\n\nfake: RandomCompanyProduct¶\n\nAliases: random_company_product, randomcompanyproduct\n\nSource: faker : faker.providers.company.fil_PH.Provider.random_company_product\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RandomCompanyProduct}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Bottle)\n\nfake: RandomObjectName¶\n\nAliases: random_object_name, randomobjectname\n\nSource: faker : faker.providers.misc.fil_PH.Provider.random_object_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RandomObjectName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Lapis Lazuli)\n\nfake: SmartMobileNumber¶\n\nAliases: smart_mobile_number, smartmobilenumber\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.smart_mobile_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SmartMobileNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=0946-115-7815)\n\nfake: SmartMobileNumberPrefix¶\n\nAliases: smart_mobile_number_prefix, smartmobilenumberprefix\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.smart_mobile_number_prefix\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SmartMobileNumberPrefix}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=908)\n\nfake: SpaceObjectName¶\n\nAliases: space_object_name, spaceobjectname\n\nSource: faker : faker.providers.misc.fil_PH.Provider.space_object_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SpaceObjectName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Aquarius)\n\nfake: Ssn¶\n\nAliases: ssn\n\nSource: faker : faker.providers.ssn.fil_PH.Provider.ssn\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Ssn}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=8156-5938778-4)\n\nfake: Sss¶\n\nAliases: sss\n\nSource: faker : faker.providers.ssn.fil_PH.Provider.sss\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Sss}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=11-5781565-9)\n\nfake: StandaloneBuildingNumber¶\n\nAliases: standalone_building_number, standalonebuildingnumber\n\nSource: faker : faker.providers.address.fil_PH.Provider.standalone_building_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.StandaloneBuildingNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=664)\n\nfake: SubdivisionBlockNumber¶\n\nAliases: subdivision_block_number, subdivisionblocknumber\n\nSource: faker : faker.providers.address.fil_PH.Provider.subdivision_block_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SubdivisionBlockNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=14)\n\nfake: SubdivisionLotNumber¶\n\nAliases: subdivision_lot_number, subdivisionlotnumber\n\nSource: faker : faker.providers.address.fil_PH.Provider.subdivision_lot_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SubdivisionLotNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=54)\n\nfake: SubdivisionName¶\n\nAliases: subdivision_name, subdivisionname\n\nSource: faker : faker.providers.address.fil_PH.Provider.subdivision_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SubdivisionName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Duhat Grove)\n\nfake: SubdivisionNameSuffix¶\n\nAliases: subdivision_name_suffix, subdivisionnamesuffix\n\nSource: faker : faker.providers.address.fil_PH.Provider.subdivision_name_suffix\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SubdivisionNameSuffix}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Grove Phase 9)\n\nfake: SubdivisionUnitNumber¶\n\nAliases: subdivision_unit_number, subdivisionunitnumber\n\nSource: faker : faker.providers.address.fil_PH.Provider.subdivision_unit_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SubdivisionUnitNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Block 13 Lot 39)\n\nfake: SunMobileNumber¶\n\nAliases: sun_mobile_number, sunmobilenumber\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.sun_mobile_number\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SunMobileNumber}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=+63941-924-1157)\n\nfake: SunMobileNumberPrefix¶\n\nAliases: sun_mobile_number_prefix, sunmobilenumberprefix\n\nSource: faker : faker.providers.phone_number.fil_PH.Provider.sun_mobile_number_prefix\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.SunMobileNumberPrefix}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=922)\n\nfake: Umid¶\n\nAliases: umid\n\nSource: faker : faker.providers.ssn.fil_PH.Provider.umid\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Umid}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=8156-5938778-4)\n\nfake: VisayasProvince¶\n\nAliases: visayas_province, visayasprovince\n\nSource: faker : faker.providers.address.fil_PH.Provider.visayas_province\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.VisayasProvince}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Antique)\n\nfake: VisayasProvinceAddress¶\n\nAliases: visayas_province_address, visayasprovinceaddress\n\nSource: faker : faker.providers.address.fil_PH.Provider.visayas_province_address\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.VisayasProvinceAddress}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Unit 9022 Tanguile Building 6, 7114 Topaz Road, Dipolog, 6831 Southern Leyte)\n\nfake: VisayasProvincePostcode¶\n\nAliases: visayas_province_postcode, visayasprovincepostcode\n\nSource: faker : faker.providers.address.fil_PH.Provider.visayas_province_postcode\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.VisayasProvincePostcode}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=5082)\n\nFil_Ph Fakers¶\n\nfake: DayOfWeek¶\n\nAliases: day_of_week, dayofweek\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.day_of_week\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.DayOfWeek}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Sabado)\n\nfake: EnglishCatchPhrase¶\n\nAliases: english_catch_phrase, englishcatchphrase\n\nSource: faker : faker.providers.company.fil_PH.Provider.english_catch_phrase\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.EnglishCatchPhrase}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Pre-emptive impactful toolset)\n\nfake: MonthName¶\n\nAliases: month_name, monthname\n\nSource: faker : faker.providers.date_time.fil_PH.Provider.month_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MonthName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Agosto)\n\nfake: RandomGoodServiceAdjective¶\n\nAliases: random_good_service_adjective, randomgoodserviceadjective\n\nSource: faker : faker.providers.company.fil_PH.Provider.random_good_service_adjective\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RandomGoodServiceAdjective}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=dekalidad)\n\nfake: RandomGoodServiceAdjectiveChain¶\n\nAliases: random_good_service_adjective_chain, randomgoodserviceadjectivechain\n\nSource: faker : faker.providers.company.fil_PH.Provider.random_good_service_adjective_chain\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RandomGoodServiceAdjectiveChain}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=walang tatalo at walang katulad)\n\nfake: RandomNounIshGoodTrait¶\n\nAliases: random_noun_ish_good_trait, randomnounishgoodtrait\n\nSource: faker : faker.providers.company.fil_PH.Provider.random_noun_ish_good_trait\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RandomNounIshGoodTrait}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=bida)\n\nfake: RandomObjectOfConcern¶\n\nAliases: random_object_of_concern, randomobjectofconcern\n\nSource: faker : faker.providers.company.fil_PH.Provider.random_object_of_concern\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.RandomObjectOfConcern}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=Filipino)\n\nFile Fakers¶\n\nfake: FileExtension¶\n\nGenerate a file extension under the specified category.\n\nIf category is None, a random category will be used. The list of valid categories include: 'audio', 'image', 'office', 'text', and 'video'.\n\nAliases: file_extension, fileextension\n\nSource: faker : faker.providers.file.Provider.file_extension\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FileExtension}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=webm)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FileExtension(category='image')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=jpg)\n\nfake: FileName¶\n\nGenerate a random file name with extension.\n\nIf extension is None, a random extension will be created under the hood using |file_extension| with the specified category. If a value for extension is provided, the value will be used instead, and category will be ignored. The actual name part itself is generated using |word|.\n\n:sample size=10:\n\nAliases: file_name, filename\n\nSource: faker : faker.providers.file.Provider.file_name\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FileName}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=radyo.html)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FileName(category='audio')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=kilos.flac)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FileName(extension='abcdef')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=kanya.abcdef)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FileName(category='audio', extension='abcdef')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=gawa.abcdef)\n\nfake: FilePath¶\n\nGenerate an absolute pathname to a file.\n\nThis method uses |file_name| under the hood to generate the file name itself, and depth controls the depth of the directory path, and |word| is used under the hood to generate the different directory names.\n\n:sample size=10:\n\nAliases: file_path, filepath\n\nSource: faker : faker.providers.file.Provider.file_path\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FilePath}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=/isla/tulong.html)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FilePath(depth=3)}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=/lapit/pangunahin/maginoo/buti.json)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FilePath(depth=5, category='video')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=/ganap/kalahati/iwan/tindahan/hugis/baso.mov)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.FilePath(depth=5, category='video', extension='abcdef')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=/tanggap/yaman/ilog/tala/likod/tanggap.abcdef)\n\nfake: MimeType¶\n\nGenerate a mime type under the specified category.\n\nIf category is None, a random category will be used. The list of valid categories include 'application', 'audio', 'image', 'message', 'model', 'multipart', 'text', and 'video'.\n\nAliases: mime_type, mimetype\n\nSource: faker : faker.providers.file.Provider.mime_type\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MimeType}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=video/x-ms-wmv)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.MimeType(category='application')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=application/rss+xml)\n\nfake: UnixDevice¶\n\nGenerate a Unix device file name.\n\nIf prefix is None, a random prefix will be used. The list of valid prefixes include: 'sd', 'vd', and 'xvd'.\n\nAliases: unix_device, unixdevice\n\nSource: faker : faker.providers.file.Provider.unix_device\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UnixDevice}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=/dev/vdq)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UnixDevice(prefix='mmcblk')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=/dev/mmcblkz)\n\nfake: UnixPartition¶\n\nGenerate a Unix partition name.\n\nThis method uses |unix_device| under the hood to create a device file name with the specified prefix.\n\nAliases: unix_partition, unixpartition\n\nSource: faker : faker.providers.file.Provider.unix_partition\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UnixPartition}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=/dev/vdm4)\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.UnixPartition(prefix='mmcblk')}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=/dev/mmcblkq2)\n\nGeo Fakers¶\n\nfake: Coordinate¶\n\nOptionally center the coord and pick a point within radius.\n\nAliases: coordinate\n\nSource: faker : faker.providers.geo.en_US.Provider.coordinate\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Coordinate}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=-158.265114)\n\nfake: Latitude¶\n\nAliases: latitude\n\nSource: faker : faker.providers.geo.en_US.Provider.latitude\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Latitude}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=-79.132557)\n\nfake: Latlng¶\n\nAliases: latlng\n\nSource: faker : faker.providers.geo.en_US.Provider.latlng\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fields: formula_field_example: ${{fake.Latlng}}\n\nOutputs:\n\nSomeObject(id=1, formula_field_example=(Decimal('47.244262'), Decimal('80.880444')))\n\nfake: LocalLatlng¶\n\nReturns a location known to exist on land in a country specified by country_code. Defaults to 'en_US'. See the land_coords list for available locations/countries.\n\nAliases: local_latlng, locallatlng\n\nSource: faker : faker.providers.geo.en_US.Provider.local_latlng\n\nRecipe:\n\n- var: snowfakery_locale value: fil_PH - object: SomeObject fi"
    }
}