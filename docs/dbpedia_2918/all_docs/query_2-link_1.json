{
    "id": "dbpedia_2918_2",
    "rank": 1,
    "data": {
        "url": "https://github.com/libcsp/libcsp",
        "read_more_link": "",
        "language": "en",
        "title": "layer delivery protocol designed for Cubesats",
        "top_image": "https://opengraph.githubassets.com/9c23eb8d4c92d59ae1170663685c8c1d369fe8c384cb6fe4a86f9f1f965e5efe/libcsp/libcsp",
        "meta_img": "https://opengraph.githubassets.com/9c23eb8d4c92d59ae1170663685c8c1d369fe8c384cb6fe4a86f9f1f965e5efe/libcsp/libcsp",
        "images": [
            "https://github.com/libcsp/libcsp/actions/workflows/build-test.yml/badge.svg",
            "https://github.com/libcsp/libcsp/raw/develop/doc/_images/csp.png",
            "https://avatars.githubusercontent.com/u/545264?s=64&v=4",
            "https://avatars.githubusercontent.com/u/10152?s=64&v=4",
            "https://avatars.githubusercontent.com/u/6190795?s=64&v=4",
            "https://avatars.githubusercontent.com/u/2781358?s=64&v=4",
            "https://avatars.githubusercontent.com/u/71638987?s=64&v=4",
            "https://avatars.githubusercontent.com/u/26788506?s=64&v=4",
            "https://avatars.githubusercontent.com/u/124855?s=64&v=4",
            "https://avatars.githubusercontent.com/u/93954843?s=64&v=4",
            "https://avatars.githubusercontent.com/u/34681323?s=64&v=4",
            "https://avatars.githubusercontent.com/u/42586041?s=64&v=4",
            "https://avatars.githubusercontent.com/u/35066854?s=64&v=4",
            "https://avatars.githubusercontent.com/u/5177161?s=64&v=4",
            "https://avatars.githubusercontent.com/u/57446369?s=64&v=4",
            "https://avatars.githubusercontent.com/u/83201581?s=64&v=4"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Cubesat Space Protocol - A small network-layer delivery protocol designed for Cubesats - libcsp/libcsp",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/libcsp/libcsp",
        "text": "Cubesat Space Protocol (CSP) is a small protocol stack written in C. CSP is designed to ease communication between distributed embedded systems in smaller networks, such as Cubesats. The design follows the TCP/IP model and includes a transport protocol, a routing protocol and several MAC-layer interfaces. The core of libcsp includes a router, a connection oriented socket API and message/connection pools.\n\nThe protocol is based on an very lightweight header containing both transport and network-layer information. Its implementation is designed for, but not limited to, embedded systems with very limited CPU and memory resources. The implementation is written in GNU C and is currently ported to run on FreeRTOS, Zephyr and Linux (POSIX).\n\nThe idea is to give sub-system developers of cubesats the same features of a TCP/IP stack, but without adding the huge overhead of the IP header. The small footprint and simple implementation allows a small 8-bit system to be fully connected on the network. This allows all subsystems to provide their services on the same network level, without any master node required. Using a service oriented architecture has several advantages compared to the traditional mater/slave topology used on many cubesats.\n\nStandardised network protocol: All subsystems can communicate with eachother (multi-master)\n\nService loose coupling: Services maintain a relationship that minimizes dependencies between subsystems\n\nService abstraction: Beyond descriptions in the service contract, services hide logic from the outside world\n\nService reusability: Logic is divided into services with the intention of promoting reuse.\n\nService autonomy: Services have control over the logic they encapsulate.\n\nService Redundancy: Easily add redundant services to the bus\n\nReduces single point of failure: The complexity is moved from a single master node to several well defined services on the network\n\nThe implementation of libcsp is written with simplicity in mind, but it's compile time configuration allows it to have some rather advanced features as well.\n\nThread safe Socket API\n\nRouter task with Quality of Services\n\nConnection-oriented operation (RFC 908 and 1151).\n\nConnection-less operation (similar to UDP)\n\nICMP-like requests such as ping and buffer status.\n\nLoopback interface\n\nVery Small Footprint in regards to code and memory required\n\nZero-copy buffer and queue system\n\nModular network interface system\n\nOS abstraction, currently ported to: FreeRTOS, Zephyr, Linux\n\nBroadcast traffic\n\nPromiscuous mode\n\nThe latest version of the /doc folder is compiled to HTML and hosted on:\n\nlibcsp.github.io/libcsp/\n\nThank you for considering contributing to libcsp! We welcome contributions from the community to help improve and grow the project. Please take a moment to review our guidelines before opening a Pull Request!\n\nThe source code is available under MIT license, see LICENSE for license text"
    }
}