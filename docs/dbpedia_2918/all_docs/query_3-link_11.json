{
    "id": "dbpedia_2918_3",
    "rank": 11,
    "data": {
        "url": "https://github.com/opensatellite/KS-1Q",
        "read_more_link": "",
        "language": "en",
        "title": "1Q: Opensat first generation cubesat bus, launch into orbit at 2016/11/11",
        "top_image": "https://opengraph.githubassets.com/f8e666d97a60804223bfd25f7c27c731b4804e251c8e914732693fa262630cae/opensatellite/KS-1Q",
        "meta_img": "https://opengraph.githubassets.com/f8e666d97a60804223bfd25f7c27c731b4804e251c8e914732693fa262630cae/opensatellite/KS-1Q",
        "images": [
            "https://github.com/opensatellite/KS-1Q/raw/master/hardware/photo/KS-1Q testing.jpg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "Opensat first generation cubesat bus, launch into orbit at 2016/11/11 - opensatellite/KS-1Q",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/opensatellite/KS-1Q",
        "text": "Opensat first generation cubesat bus\n\nOfficial Website http://sa.kechuang.org\n\nLicense: LGPL-2.1\n\nLaunch Vehicle: CALT CZ-11\n\nLaunch Date: 2016/11/11\n\nNORAD Object: 2016-066E\n\nComplete Cubesat bus design: hardware + software + documents\n\nPayloads: camera, LED array, radiation dosimeter\n\nOnboard computer: STM32F4, software stack including RTOS, FS, CANbus, libcsp (Cubesat Space Protocol), navigation, logging\n\nOnboard communications: half duplex or full duplex on amateur VHF and UHF band (140-148MHz, 430-440MHz). Tx power 2W, Rx sensitivity -113dBm @ 10kbps, both tx and rx support 2k~500kbps rate. FPGA radio baseband compliant to CCSDS standard, with libcsp support. With USRP B210, downlink rx sensitivity -126dBm @ 10kbps.\n\nPower system: MPPT solar charging, battery management, power distribution, safety switch, magnetorquer driver, sun sensor input, EED driver and RTC clock. Telemetry and protection for all critical components.\n\nGround control: Qt based UI, provide display and control for all onboard modules.\n\nGnuradio extension: custom OOT module gr-kcsa-ks1q for telemetry and telecommand. Contains necessary blocks for building custom satellite transceivers.\n\nDocuments: interface control document (ICD) and safety report submit to launch service provider, including mechanical stress test and EMC test report. Brief product introduction, schematic and flowgraph for all modules.\n\nLatest features\n\n2016/11/3: fix radio telemetry packet early-ending problem.\n\n2016/11/20: fix battery under-voltage protection issues.\n\n2018/6/2: gr-kcsa-ks1q pdu_to_stream2 support fractional decimation ratio.\n\nProject folders\n\ndocuments: system design documents, intro pages, ICD and safety report.\n\nfirmware: embedded software for all onborad modules.\n\nfirmware/binary: prebuilt firmware images.\n\nfirmware/(MODULE)_FW(VER)/: firmware VER, code and project files for MODULE.\n\nfirmware/(MODULE)_FW(VER)_flowgraph.pdf: firmware VER program flowgraph for MODULE.\n\nfirmware/(MODULE)_FW_ChangeLog.txt: firmware changelog for MODULE.\n\nhardware: module hardware design documents.\n\nhardware/*block.pdf: module block diagram.\n\nhardware/connector: connector list and pin definations.\n\nhardware/mech_outline*: KS-1Q final mechanical dimensions.\n\nhardware/photo: board photos.\n\nhost: software for ground control and debug purpose\n\nhost/csp: libcsp preconfigured. need by KS1GCS\n\nhost/DM: Data manager, all telemetry and telecommand data structure definations and service routines.\n\nhost/NTCTest: onboard NTC temp sensor lookup table generation tool, needed if custom NTC is used.\n\nhost/gr-kcsa-ks1q: custom OOT module for telemetry and telecommand.\n\nhost/KS1GCS: ground control user interface, qt based.\n\nMinimal KS-1Q devkit including:\n\nKS1_EPS ( electrical power system ) module\n\nKS1_SOLAR ( solar panel, sun sensor and LED array )\n\nTTC ( telemetry and telecommand, aka. onboard communication ) module\n\nOBC ( onboard computer ) module\n\nNI USRP B210 ( other SDR device like LimeSDR can be used, some software modification needed )\n\nKS-1Q internal cables.\n\nKS1 Debug Tool ( an interface wiring board, two stlink or jlink, one flashpro 4. )\n\nHow to buy\n\nhttp://deepace.net\n\nhttp://kcsa.taobao.com ( work in progress )\n\nBuild environment\n\nFirmware: IAR EWARM 7.2+ ( commerical toolchain. gcc support work in progress )\n\nFPGA: if you want to recompile fpga logics, install Microsemi Libero SoC 11.3+ ( it's free, see licensing section in https://www.microsemi.com/product-directory/design-resources/1750-libero-soc )\n\nGround control: Qt 5.2+ ( it's free )\n\nRadio transceiver: Ubuntu with Gnuradio 3.7.10+, UHD 003.010.001+ installed. ( USRP B210 only supported in UHD 003.010.001+, windows virtual machine won't work. )\n\nSTLink utility: if using stlink debugger, need this for firmware hex download. ( download link https://www.st.com/en/development-tools/stsw-link004.html )\n\nJ-Flash: if using jlink debugger, need this for firmware hex download. ( shipped with your jlink )\n\nHow to use\n\nPreparing - how to load mcu firmware\n\nif build with source, configure debugger in IAR Project Settings, then use Download and debug button.\n\nif loading prebuilt image, use STLink utility or J-Flash.\n\nPreparing - how to load fpga image\n\nif build with source, use Program Device in Libero SoC. ( https://www.eecs.umich.edu/courses/eecs373/labs/LiberoRefGuides/projectflow_SoC.html )\n\nif loading prebuilt image, use FlashPro software, user guide here http://coredocs.s3.amazonaws.com/Libero/11_7_0/Tool/flashpro_ug.pdf\n\nPreparing - how to install gnuradio and usrp driver\n\nif using Ubuntu 18.04, use sudo apt install gnuradio-dev uhd-host is the easist way\n\nif using Ubuntu 16.04, compile and install gnuradio from source ( http://github.com/gnuradio/gnuradio ) by yourself, usrp driver must use latest PPA ( https://files.ettus.com/manual/page_install.html )\n\nsudo add-apt-repository ppa:ettusresearch/uhd\n\nsudo apt-get update\n\nsudo apt-get install libuhd-dev libuhd003 uhd-host\n\nother linux distribution not tested, compile on your own is suggested.\n\nInstall host software\n\nInstall ubuntu linux\n\nInstall gnuradio and usrp driver\n\nBuild and install libcsp\n\ncd KS-1Q/host/csp\n\n./build_csp.sh\n\nsudo ./install_csp.sh\n\nBuild KS1GCS\n\nlaunch QtCreator, open project KS-1Q/host/KS1GCS/KS1GCS.pro\n\npress Build button ( the hammer icon near left-bottom )\n\nLoad bootloader / firmware\n\nStep 1: Connect KS1 debug tool to KS-1Q\n\nStep 2: Connect stlink or jlink to EPS SWD port\n\nStep 3: Connect li-ion battery charger to CHARGE port\n\nStep 4: Set EPS_RBF switch to UNLOCK position\n\nStep 5: Load KS1_EPS_FW03 (firmware) to KS1_EPS module\n\nif failed, check STM32 on KS1_EPS have power supply\n\npossible reason: RBF in LOCK position or battery rans out.\n\nStep 6: Set TTC_DEBUG_SELECT switch to JTAG position\n\nStep 7: Load TTC_V04_FPGA (fpga bitstream) to TTC module\n\nif failed, check TTC module have power supply.\n\npossible reason: KS1_EPS no output.\n\nRBF unlocked ? KS1_EPS firmware loaded ?\n\nStep 8: Set TTC_DEBUG_SELECT switch to SWD position\n\nStep 9: Load TTC_V04_FW00 to TTC module\n\nif failed, check TTC module have power supply.\n\nStep 10: connect USRP to host USB3.0 port\n\nStep 11: Run gnuradio to establish wireless connection to KS-1Q.\n\ncd KS-1Q/host/KS1GCS/\n\npython ccsds-halfduplex-tcpserver2.py\n\nto edit flowgraph, run gnuradio-companion and open KS-1Q/host/gr-kcsa-ks1q/examples/ccsds-halfduplex-tcpserver2.grc\n\nStep 12: Run KS1GCS, then click Connect button.\n\nStep 13: Send telecommand to enable OBC power. click EPS page in KS1GCS, then click OBC on button. if success, EPS telemetry PwrOBC will change to nonzero value after ~10seconds.\n\nNow OBC have power supply\n\nStep 14: Load OBC_2D_FW03 to OBC module.\n\nif failed, check OBC module have power supply.\n\nuse an external power supply ( equal to battery voltage, 7.2~8.4V ) can power on OBC directly. here step 10 - 13 is not required.\n\nTODO list\n\nMove all firmware to gcc toolchain\n\nWeb based ground control\n\nOnboard scripting support\n\nOBC firmware upgrade support\n\nBetter half-duplex radio link."
    }
}