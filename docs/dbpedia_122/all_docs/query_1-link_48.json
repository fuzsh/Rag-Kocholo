{
    "id": "dbpedia_122_1",
    "rank": 48,
    "data": {
        "url": "https://teachingtechyt.github.io/calibration.html",
        "read_more_link": "",
        "language": "en",
        "title": "",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://teachingtechyt.github.io/img/ablmesh.jpg",
            "https://teachingtechyt.github.io/img/zoffset.jpg",
            "https://teachingtechyt.github.io/img/firstlayerpreview.jpg",
            "https://teachingtechyt.github.io/img/firstlayer.jpg",
            "https://teachingtechyt.github.io/img/firstlayer2.jpg",
            "https://teachingtechyt.github.io/img/cube.jpg",
            "https://teachingtechyt.github.io/img/esteps1.jpg",
            "https://teachingtechyt.github.io/img/mark.jpg",
            "https://teachingtechyt.github.io/img/mark2.jpg",
            "https://teachingtechyt.github.io/img/distinct-e-factors.jpg",
            "https://teachingtechyt.github.io/img/curacube.jpg",
            "https://teachingtechyt.github.io/img/simplify3dcube.jpg",
            "https://teachingtechyt.github.io/img/prusaslicercube.jpg",
            "https://teachingtechyt.github.io/img/superslicercube.jpg",
            "https://teachingtechyt.github.io/img/ideamakercube.jpg",
            "https://teachingtechyt.github.io/img/measurecube.jpg",
            "https://teachingtechyt.github.io/img/xyzcube.jpg",
            "https://teachingtechyt.github.io/img/tmc1.jpg",
            "https://teachingtechyt.github.io/img/tmc2.jpg",
            "https://teachingtechyt.github.io/img/stringing.jpg",
            "https://teachingtechyt.github.io/img/retractionresults.jpg",
            "https://teachingtechyt.github.io/img/temperatureresults.jpg",
            "https://teachingtechyt.github.io/img/ghosting.jpg",
            "https://teachingtechyt.github.io/img/m205.jpg",
            "https://teachingtechyt.github.io/img/accelerationresults.jpg",
            "https://teachingtechyt.github.io/img/acceloverride.jpg",
            "https://teachingtechyt.github.io/img/patterngenerator.jpg",
            "https://teachingtechyt.github.io/img/linearadvanceresults.jpg",
            "https://teachingtechyt.github.io/img/lcdstepsperunit.jpg",
            "https://teachingtechyt.github.io/img/terminalstepsperunit.jpg",
            "https://teachingtechyt.github.io/img/cubeflowvariation.jpg",
            "https://teachingtechyt.github.io/img/prusaslicercompensation.jpg",
            "https://teachingtechyt.github.io/img/curacompensation.jpg",
            "https://teachingtechyt.github.io/img/bearingidlerdeformation.jpg",
            "https://teachingtechyt.github.io/img/speedartefacts.jpg",
            "https://teachingtechyt.github.io/img/slicerfeedratemodifiers.jpg"
        ],
        "movies": [
            "https://www.youtube.com/embed/rp3r921DBGI",
            "https://www.youtube.com/embed/9kDK7czgMxc",
            "https://www.youtube.com/embed/T-Z3GmM20JM",
            "https://www.youtube.com/embed/kAafiApJs9A",
            "https://www.youtube.com/embed/qCtL0Yd_w0I",
            "https://www.youtube.com/embed/Ze36SX1xzOE",
            "https://www.youtube.com/embed/fN_ndWvXGBQ",
            "https://www.youtube.com/embed/seBOQpjLCQ4",
            "https://www.youtube.com/embed/Vf7nSuDGHI0",
            "https://www.youtube.com/embed/H41hIXdB6js?start=307&end=359",
            "https://www.youtube.com/embed/H41hIXdB6js?start=389&end=438",
            "https://www.youtube.com/embed/JY6E9srwZm0",
            "https://www.youtube.com/embed/D6m_kYhOth0",
            "https://www.youtube.com/embed/Mnvj6xCzikM",
            "https://www.youtube.com/embed/SIsKQIyuzYs",
            "https://www.youtube.com/embed/er7q-CJL1lc",
            "https://www.youtube.com/embed/EJapxNsntsQ",
            "https://www.youtube.com/embed/n3yK0lJ8TWM",
            "https://www.youtube.com/embed/2v7EGDp55n4",
            "https://www.youtube.com/embed/CZC5n2J8k_c"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Introduction - read me!\n\nFrame Check\n\nPID Autotune\n\nExtruder E-steps Calibration\n\nFirst Layer\n\nBaseline Print\n\nSlicer Flow Calibration\n\nStepper Motor Driver Current\n\nTemperature Tuning\n\nRetraction Tuning\n\nSpeed & Max Flow Tuning\n\nAcceleration Tuning\n\nLinear Advance\n\nXYZ steps Calibration\n\nIntroduction\n\nThis page serves as a companion for this video: 3D printer calibration revolutionised - Step by step to better print quality\n\nIt has received a major update to bring it up to V2 which is explained in this video: 3D printer calibration site V2 - Still free and better than ever!\n\nIt aims to make calibrating your 3D printer as easy as possible. If you find it helps you and you would like to say thank you, here is a donation link: PayPal.me\n\nSpecial thanks to my Patrons for suggesting this video, helping define the contents and testing/proofing.\n\nWatch the videos and then work through each tab. I have created a custom gcode generator to assist in making testing towers. This used to be a laborious process and beyond the skills of many users. Other times pre-sliced gcode was used from the internet, but it is impossible to have gcode available for every printer configuration. Until now!\n\nWarning - Read carefully!\n\nEvery attempt has been made to ensure this is safe but ultimately there always is risk in running pre-sliced gcode from the internet. Preview the gcode in your slicer or Zupfe GCode Viewer and print at your own risk.\n\nOnly print this gcode when you are present, alert and capable of stopping the printer in case of emergency.\n\nValidation has been built into the forms to only allow sensible min and max values, however this is not foolproof.\n\nHow this site works\n\nThe gcode generated by this page is originally from Simplify3D. This website then uses Javascript to modify the contents based on user inputs. This site is not a web based slicer, therefore it is limited in some ways.\n\nThe aim for the site is to provide compatibility with the majority of 3D printers. It aims to be beginner friendly and as such where possible the interface is kept as minimal as possible. Because of this, some requests for extra functionality will not be accepted. Something that makes the experience better for 1% of users but confuses 40% of others is not worth including.\n\nPrint Settings from the calibration S3D slicer profile\n\nA 'calibration' slicer profile in S3D is used as the basis of the gcode on this site. S3D offers multiple processes to assist with splitting the towers into segments where the print settings can vary. Apart from this, the only special functionality used is post processing scripts to delete some lines, and to modify others with simple search and replace functions.\n\nThe general characteristics of the slicer profile are as follows:\n\nSliced for Marlin firmware, although in most cases will still be compatible with other firmwares.\n\nA build volume of 120 x 120 x 250 mm (This site can accommodate anything as small as this and anything larger)\n\n1.75mm filament (However M221 S38 for 2.85 mm filament and M221 S34 for 3.0 mm filament can be applied in the custom start gcode field as compensation)\n\nAbsolute extrusion values (M82 as opposed to relative/M83)\n\n0.4mm nozzle and 0.2mm layer height, although now additional configurations are now possible\n\nLine width on auto, typically 120% of nozzle diameter\n\nDefaut feedrate of 60mm/sec. Modifiers include 60% for perimeters, 80% for solid infill, 166% travel moves, and 50% for the first layer\n\nTravel moves of 20 mm/sec for Z\n\nFlow rate of 0.90. Please see the note on the bottom of the flow tab for instructions on adapting this to your printer.\n\nNozzle priming has been turned off to avoid bed clips or problems with delta printers. Use the custom start gcode feature to insert the priming sequence from your slicer profile.\n\nA single layer skirt (except on the acceleration test)\n\n100% part cooling fan for bridging\n\nFirst layer height of 100%, width 120%\n\nNo minimum layer time, auto part cooling, etc\n\n4 top layers, 3 bottom layers, 3 perimeters\n\n20% rectilinear infill\n\nThe default start gcode is as follows (this can be completely replaced by ticking the appropriate option on each form):\n\n; G-Code originally generated by Simplify3D(R) Version 4.1.2 ; This calibration test gcode modified by the Teaching Tech Calibration website: https://teachingtechyt.github.io/calibration.html ;M80 ; power supply on G90 M82 M106 S0 ;bed0a ;bed0b ;temp0a G28 ; home all axes ;G29 ; probe ABL ;M420 S1 ; restore ABL mesh ;temp0b ;customstart G0 Z3; fix for delta printers that home at max`;\n\nThe default end gcode is as follows (this can be completely replaced by ticking the approprpriate option on each form):\n\nG28 X0 ; home X axis M106 S0 ; turn off cooling fan M104 S0 ; turn off extruder M140 S0 ; turn off bed M84 ; disable motors ;customend\n\nThe information above is a summary, but if you wish to see the exact settings, the Simplify3D fff profile is available for download here.\n\nPlease note that non Simplify users can simply open this file in a text editor and everything will be listed.\n\nYou may notice settings related to temperatures, retraction, Z hop, part cooling, etc have set values, but these are altered by post processing scripts and this site to ultimately be set using the user's inputs. Several parameters work like this, please don't be fooled by what is in the slicing profile. Opening the final gcode file in a text editor and searching for 'custom' will show if the user's inputs have been successfully adopted.\n\nPost processing scripts in Simplify3D\n\nUnfortunately, there is no official reference for this provided by S3D. Instead, I have relied on this forum post.\n\nThe scripts in my profile perform the following tasks:\n\nStrip out all comments apart from new processes and layers.\n\nStrip out all start and end gcode. This gcode is instead provided by the site.\n\nFind specific lines relating to retraction and zhop, replacing them with comments this site expects to find and modify further.\n\n{REPLACE \"; process\" \";process\"} {REPLACE \"; layer\" \";layer\"} {STRIP \"; \"} {STRIP \"M82\"} {STRIP \"G90\"} {STRIP \"M106 S0\"} {STRIP \"M104\"} {STRIP \"M109\"} {STRIP \"M140\"} {STRIP \"M190\"} {STRIP \";layer end\"} {REPLACE \"G1 E-5.0000 F2400\\n\" \";retract1\\n\"} {REPLACE \"G1 E0.0000 F2400\\n\" \";unretract1\\n\"} {REPLACE \"G1 E-5.5000 F2460\\n\" \";retract2\\n\"} {REPLACE \"G1 E0.0000 F2460\\n\" \";unretract2\\n\"} {REPLACE \"G1 E-6.0000 F2520\\n\" \";retract3\\n\"} {REPLACE \"G1 E0.0000 F2520\\n\" \";unretract3\\n\"} {REPLACE \"G1 E-6.5000 F2580\\n\" \";retract4\\n\"} {REPLACE \"G1 E0.0000 F2580\\n\" \";unretract4\\n\"} {REPLACE \"G1 E-7.0000 F2640\\n\" \";retract5\\n\"} {REPLACE \"G1 E0.0000 F2640\\n\" \";unretract5\\n\"} {REPLACE \"G1 E-7.5000 F2700\\n\" \";retract6\\n\"} {REPLACE \"G1 E0.0000 F2700\\n\" \";unretract6\\n\"}\n\nChanges made per test to the base slicing profile\n\nThe information below is mainly for my reference. However, if you wish to duplicate the tests yourself out of interest or perhaps to develop a new test for the site, then the steps must be followed exactly, including replicating the process names.\n\nFirst layer test: No changes, although it should be noted that a single square is included which is then duplicated and positioned by this site. Non uniform scaling of the source STL needs to occur to suit certain nozzle/layer combinations. The square should be 25 x 25 mm with it's height scaled to match the target layer height.\n\nBaseline test: No changes\n\nRetraction test:\n\nZ seam alignment set to 50, 50 mm\n\n'Process-1' from 0mm\n\n'Process-2' from 1mm - 0% infill\n\n'Process-3' from 5mm - 5.5 mm retraction at 41 mm/sec - 0% infill\n\n'Process-4' from 10mm - 6.0 mm retraction at 42 mm/sec - 0% infill\n\n'Process-5' from 15mm - 6.5 mm retraction at 43 mm/sec - 0% infill\n\n'Process-6' from 20mm - 7.0 mm retraction at 44 mm/sec - 0% infill\n\n'Process-7' from 25mm - 7.5 mm retraction at 45 mm/sec - 0% infill\n\nTemperature test:\n\n'Process-1' from 0mm\n\n'Process-2' from 9mm\n\n'Process-3' from 17mm\n\n'Process-4' from 25mm\n\n'Process-5' from 33mm\n\nAcceleration test:\n\n5 perimeter wide brim instead of a skirt\n\n0% infill\n\n0 top and bottom layers\n\n2 perimeters\n\nZ seam alignment set to 0, 100 mm\n\n'Process-1' from 0mm\n\n'Process-2' from 5mm\n\n'Process-3' from 10mm\n\n'Process-4' from 15mm\n\n'Process-5' from 20mm\n\nSpeed tower test\n\nSingle outline corkscrew printing mode\n\n0 top layers\n\n1 bottom layer\n\n100% outline underspeed\n\n'Process-1' from 0mm\n\n'Process-2' from 10mm\n\n'Process-3' from 20mm\n\n'Process-4' from 30mm\n\n'Process-5' from 40mm\n\nFrame Check\n\nAim:\n\nTo ensure there are no underlying problems with the frame or mechanical components of the 3D printer.\n\nWhen required:\n\nAny time the frame or mechanical components have been disassembled or replaced.\n\nTools:\n\nBasic spanners, Allen keys, etc.\n\nIt would be easy to use the techniques elsewhere on this page to try and fix problems that were actually caused by a problem with the physical components, so we will eliminate this possibility first.\n\nMany of these procedures are covered in this video: Complete beginner's guide to 3D printing - Assembly, tour, slicing, levelling and first prints\n\nLoose nuts and bolts\n\nMove around the machine and check all fasteners. Crucial ones include those on the print head gantry such as those that hold the hot end on.\n\nV-roller tension\n\nIf your printer has a motion system based on V-roller wheels riding on V-slot extrusions, check they are properly tensioned. Each location will have one eccentric nut. This can be twisted to either add or remove tension on the wheels.\n\nIf the wheels are too loose: Wobble will be present in the assembly, which will show in the print as surface artefacts.\n\nIf the wheels are too tight: The assembly will be too tense, which will wear the V-rollers prematurely.\n\nIn some rare instances poorly adjusted rollers may affect first layer accuracy across the bed.\n\nLubrication\n\nLubrication is an important maintenance task to perform regularly. Components that are not adequately lubricated may bind and affect print quality. Use SuperLube Synthetic Grease. Lubrication needs to be performed regularly on any hardened rods, linear rails and lead screws.\n\nBed Levelling\n\nProbably the most essential part of setting up your 3D printer. Most new users will trip up on this. If you have ABL, this includes making sure your Z offset has been set and saved. Dialing in the first layer has now been moved to its own tab.\n\nPTFE Tube\n\nIf your printer has PTFE tube, such as a bowden tube setup for the extruder/hot end, it is essential to make the tube is fully inserted and seated in the coupler. Also ensure the coupler is properly tightened. You may wish to use a small retaining clip on the coupler to prevent the tube working loose: Creality PTFE clip by morfidesign.\n\nNozzle\n\nIt is worth heating up the nozzle and pushing some filament through to see if it is exiting the nozzle properly. If the diameter is inconsistent or the extruded plastic shoots to one side, it may indicate a partial blockage in the nozzle that will be a pain in the future. It is also worth checking if the nozzle is properly tightened. Only do this when it is hot, or you may break it.\n\nBelts\n\nEnsure all belts are properly aligned and tensioned sufficiently. Also check the grub screws are tight on the pulleys that connect the belts to the stepper motors.\n\nFans\n\nCheck all fans are spinning freely. This includes but is not limited to: mainboard cooling fan, heat sink fan, part cooling fan, PSU fan. It can be hard to diagose if a fan is performing at less than full capacity. It may be easier to simply replace than repair if you suspect a fan is failing.\n\nAnother suitable video for seeing some of these procedures is here:\n\nPID Autotune\n\nAim:\n\nTo ensure the heating of the 3D printer nozzle and bed are safe, stable and consistent.\n\nWhen required:\n\nAny time the hot end is changed, including adding/removing a silicone sock or altering part cooling fan/ducts. Any time the bed is changed, such as adding a glass/mirror plate, magnetic spring steel sheet and/or under bed insulation.\n\nTools:\n\nTerminal software such as Pronterface or Octoprint.\n\nInstructions on how to setup terminal software can be found here.\n\nPID autotuning is quick and easy, and relates to the most potentially dangerous components of your 3D printer: the heaters. It makes sense to do it as a first step. This procedure is covered in this video: Two easy fixes for 3D printer temperature swings\n\nIn Marlin, this is a very straightforward process using M303.\n\nIt is recommended to run the tuning with conditions as close to printing as possible. This means filament loaded and the part cooling fan set to your normal speed. This can be done from the printer's interface or in a terminal, by entering the following (this example is 100% fan speed):\n\nM106 S255\n\nIt is not essential, but you may prefer to start this process with the hot end at room temperature. To tune the hot end, enter in a terminal:\n\nM303 E0 S200 U1\n\nThis will tune the hot end at 200 degrees. The S value can be altered to suit your most common printing temperature. The U1 means the result is stored to RAM and we can save it immediately to EEPROM by sending:\n\nM500\n\nFor the bed, PIDTEMPBED must be enabled in the firmware, then the command is quite similar:\n\nM303 E-1 S60 U1\n\nThe bed is selected with E-1, and the temp set to 60 degrees. Substitute as necessary for your normal printing bed temperature. Once again save to EEPROM afterwards with:\n\nM500\n\nIt may be preferable to have the printer as close to printing conditions as possible during these tuning procedures. That means having filament loaded and the part cooling fan on for PLA temperatures. If there is no UI button available to turn on the part cooling fan, you can do it manually via gcode with M106 S255.\n\nSpecial note: If your printer doesn't support saving settings in EEPROM\n\nIn this case, you need to insert M301 (hot end) or M304 (bed) into your slicer start gcode so the correct settings are loaded before each print.\n\nAfter PID auto tuning, the final values for P, I and D will be listed in the terminal. Retreive them and use them as follows for the hot end:\n\nM301 E0 P[p value] I[i value] D[d value]\n\nThis will set the PID values for the default hot end, eg. M301 E0 P34.4 I0.02 D5.7 (bogus numbers, please don't copy them).\n\nFor the bed:\n\nM304 P[p value] I[i value] D[d value]\n\nThis will set the PID values for the bed, eg. M304 P26.0 I1.33 D20.5 (bogus numbers, please don't copy them).\n\nFirst Layer\n\nAim:\n\nTo ensure the printer bed is both level and an appropriate distance from the nozzle. In the case of using ABL, to check if compensation is working and the Z offset is correctly set. This will result in a first layer with the correct amount of 'squish', meaning good adhesion, and greatly increasing the chances of the print being successful.\n\nWhen required:\n\nInitial setup of the printer, regular maintainence, if first layer quality diminishes, any time the frame or mechanical components have been disassembled or replaced, any change of bed surface or nozzle, a change in filament that has significantly difference bed/hot end temperatures. There is a lot that can throw the bed level off, but careful use of your printer without any hardware changes should see it remain consistent for an extended period of time.\n\nTools:\n\nThe gcode generator on this page. A standard sheet of office paper.\n\nGeneral Principles\n\nGetting a good first layer is an essential part of 3D printing successfully and is probably the number one cause of failed prints for new users.\n\nFirstly, the bed needs to be parallel to the plane the nozzle traverses when moving in X and Y. This is achieved by moving the corners of the bed up and down relative to each other. With manual bed levelling this is achieved by turning the levelling knobs in each corner.\n\nSecondly, the vertical distance between the bed and the nozzle needs to be correct for the first layer to print correctly. In a manual system, this is achieved by turning the levelling knobs in unison to lift or lower each corner the same amount.\n\nIf this distance is too far, the filament will not be squished into the bed enough, potentially even printing in mid air, and the print will detach from the bed and fail.\n\nIf the nozzle is too close, there will not be enough room for the extruded filament to take the correct shape, and it will be forced to squeeze outwards. In minor cases, the extruded line will be wider than necessary and produce elephant's foot. Prints like this may be quite hard to remove from the bed.\n\nIn extreme cases, there will be no way for the filament to exit the nozzle, at best causing extruder stepper motor skipping, and even potentially even jamming the extruder/hot end.\n\nThe contents of this page are shown in detail in the following video:\n\nManual Levelling Procedure\n\nThere are many techniques available, but a common one is to move the nozzle to the various corners of the bed, turning the levelling knobs until a standard piece of office paper can just fit between the bed and nozzle. A 0.1mm feeler gauge can be used, but make sure it doesn't have any oil on it that will contaminate the bed surface. Typically, this procedure is done with the bed at printing temperature (essential), and the nozzle close to printing temperature - just cool enough to prevent filament oozing out (optional).\n\nIt is common to follow up with a first layer calibration print, and 'live level' the bed by continuing to adjust the knobs when the print is under way.\n\nThis process is depicted in detail in the video above, and a gcode generator is provided at the bottom of the page to generate a suitable test print.\n\nAuto Bed Levelling and Z offset\n\nAuto bed levelling automates the procedure to some extent. A sensor such as a BLtouch, EZABL, strain gauge or peizo transducer is used to probe the bed in a grid formation. At each location, it measures the vertical height, building up an array of stored values, called a mesh. Manual mesh bed levelling can also be used to probe such a grid, but is still a manual process and hence not considered 'automatic'. Here is a visual representation of a probed mesh, shown with the Bed level visualizer Octprint plugin:\n\nDuring printing, the firmware will reference the mesh and compensate for an angled and/or warped bed by raising and lowering the nozzle using Z axis movement. This means the nozzle can travel up and down to match the contours of the bed, ensuring a good first layer.\n\nIf the printer's bed is perfectly flat, it is reasonable to claim ABL is not needed. Some users may still prefer it for the added convenience. In the event that the bed is warped (very common), it can be impossible to get a good first layer without ABL or manual mesh bed levelling. An example of this situation is shown in the video above.\n\nIt's worth noting that you can compensate for a warped bed in other ways, such as shimming the lower portions with a thin and flexible material. You can also use a glass/mirror plate over the top, which are typically quite flat. The downside of this is a longer time required to reach printing tempratures and additional load on the Y stepper (on an i3/'bed slinger' style printer) that may require lower print speed/acceleration.\n\nThe bed can be probed at the start of the print with a G29 command, with the resulting mesh immediately used to compensate as the initial layers are produced. Alternatively, the bed can also be probed some other time (while not printing), the mesh stored in the EEPROM and then restored with M420 S1 at the start of a print. In this case the print will start sooner, since we do not need to wait for a new mesh to be probed, although it may not be as accurate if anything has changed since probing. Either of these gcode commands should come after the G28 home command in the start gcode.\n\nAlthough ABL can compensate for a crooked/non-levelled bed, it is still better to attempt to level manually first and get everything in the ballpark.\n\nProbing the bed and building a mesh only accounts for an uneven or warped bed. Like manual levelling, we still need to set the distance between the nozzle and bed to get a good first layer. This is where the Z offset comes in, which is simply the vertical distance between where the probe triggers vs the nozzle tip. Here are some examples:\n\nBLtouch/EZABL/Pinda probe - The nozzle is in mid air when these probes are triggered, which will require a negative Z offset.\n\nManual mesh bed levelling - The nozzle and bed will be very close when manually probing, requiring a Z offset close to zero.\n\nCR-6 style strain gauge - The nozzle touches the bed and flexes upwards to trigger the probe. This means the trigger point is actually higher than the nozzle tip, and requires a positive Z offset.\n\nThe following picture shows Z offset for a BLtouch. You can clearly see the vertical difference between the probing point (tip of BLtouch) and the tip of the nozzle.\n\nIf BABYSTEP_ZPROBE_OFFSET is enabled in Marlin, setting the Z offset can easily be done as the first layer goes down. Don't forget to save to EEPROM afterwards. Newer versions of Marlin also have a Z offset wizard that can be included when you compile. I have a dedicated video for this:\n\nAnother advantage of some ABL systems is that once the Z offset is set, you can interchange build surfaces of various thicknesses, with no changes needed for a successful first layer. Assuming the probe is triggered the same way on the bed surface, the Z offset is applied to this trigger point and the first layer height should be the same. On a manually levelled bed, the four corner knobs would need to be turned in unison to raise or lower the bed in accounting for thickness of the new build surface.\n\nFirst layer gcode generator\n\nThe following form will create a series of five squares that you can use to live level your bed or set the Z offset. It is quick to print and features one square in the middle of the bed, with four others in the corners. You can use these to turn the levelling knobs in each corner until they are consistent, or ensure your ABL system is working if you have one in place.\n\nThis test is intentionally placed before others because it is assumed that your first layer must be reasonable for the later tests to succeed. In some cases, however, if your flow, retraction, etc is way off, it may prevent your first layer from sticking properly and you may wish to try these other tests first.\n\nInterpreting Results:\n\nPlease use the following video as a guide to this test:\n\nThe following diagram and reference picture can be useful in determing if your first layer is too close or too far away from the nozzle. The reference image is quite large to aid clarity, you may wish to open it in a new tab to view it at maximum size.\n\nIf one side looks too close, but the other too far, adjust the levellng knobs to correct this. It is worth printing this gcode more than once after making adjustments to make sure the result is accurate and repeatable.\n\nBaseline Print\n\nAim:\n\nTo establish a baseline for comparison with later tests or before modifications.\n\nWhen required:\n\nBefore general calibration or before a significant modification is to be fitted.\n\nTools:\n\nGcode generator on this page.\n\nBaseline test print generator\n\nThe form below will create a customised version of the XYZ 20mm calibration cube by iDig3Dprinting. It is fast to print and gives a good indication if there is any fundamental problem with the printer.\n\nInterpreting Results:\n\nPlease use the following video as a guide to this test:\n\nThe cube should look similar to those at the top of this page. If there are no major issues, please continue to the next step. If there is a significant defect, the culprit will likely be found by working through the frame tab. Minor issues will hopefully be resolved with the subsequent tests.\n\nExtruder E-steps Calibration\n\nAim:\n\nTo determine the correct amount of steps Marlin firmware needs to send to the extruder stepper motor for accurate movement.\n\nWhen required:\n\nBase calibration, as well as any time there has been a change to the extruder/hot end.\n\nTools:\n\nRuler, permanent marker, terminal software such as Pronterface or Octoprint.\n\nInstructions on how to setup terminal software can be found here.\n\nFor the X, Y, and Z axes, the steps per mm is usually consistent between printers and rarely changes with modifications. As long as belts are tight and true, it rarely needs to be tuned.\n\nFor the extruder however, variations in extruder hardware and filament means it is worth properly calibrating the extruder steps per mm, or E-steps.\n\nThis can be done by sending simple gcode commands via terminal to extrude a set amount of filament, then measuring how much filament actually went through the system.\n\nSpecial Note:\n\nThis calibration is best done with the extruder detached from the hot end, so no restriction is present on the movement. If it is convenient, you can partially disassemble the printer so the output of the extruder is open and the filament exits in free air. If this is inconvenient, the process below aims to minimise restrictions by extruding very slowly and with a slightly higher temperature. The results from this should still be reliable.\n\nFirstly, we need to know the existing E-steps value. To find this, enter:\n\nM92\n\nIf you only receive an ok message from this, alternatively you can look for the M92 line after entering:\n\nM503\n\nM92 is used to report or set the steps per mm for each axis. M92 by itself will report the current parameters. We want to make note of the number after E, in the example below, 93.00:\n\nManually move the nozzle high enough above the bed to provide adequate clearance to extrude filament. Now heat up your hot end to whatever temperature you usually print with plus 10 degrees. Once the temperature is stable, enter:\n\nG91\n\nG91 puts the printer in relative movement mode. This means requesting 100mm of filament adds 100mm to the current position, instead of moving to the specific position of 100mm.\n\nFor Klipper and Rep Rap Firmware, M83 is used to select relative extruder movement instead.\n\nNow we take a permanent marker and put a mark 120mm from the entry to the extruder:\n\nNext, we enter:\n\nG1 E100 F50\n\nG1 sends a move command to the printer, in this case asking the extruder to advance 100mm at a speed of 50mm/min.\n\nThe filament will then very slowly go through the extruder (and hot end). Once the extrusion finishes, we measure the distance between the mark and the entry to the extruder.\n\nIdeally, 20mm remains, which means exactly 100mm was extruded. If your distance is anything other than this, complete the form below to calculate the correct E-steps:\n\nE-steps calculator\n\nPrevious E-steps as reported by M92:\n\nMeasurement between extruder entry and mark on filament (mm):\n\nThere was mm of filament remaining, which means you extruded mm of filament. Your new E-steps should be\n\nEnter the following in the terminal:\n\nM92 E\n\nFollowed by M500 to save to EEPROM.\n\nM500\n\nYou may wish to repeat this test with the new E-steps value to verify.\n\nSpecial note: Prusa has disabled M500 saving to EEPROM on some printers (eg. Mini). In these cases the above M92 gcode must be added to the start gcode in your slicer to be read before every print.\n\nAlthough starting a new print or power cycling will achieve this, it may be safer to put the printer back into absolute position mode after completing this calibration by sending:\n\nG90\n\nFor Klipper and Rep Rap Firmware, M82 is used to select absolute extruder movement instead.\n\nStoring the updated E-steps\n\nOnce you have determined the correct value, it must be saved to the firmware to take effect on subsequent prints. Although it can be hard coded into the firmware by recompiling Marlin, it is far easier to use gcode to achieve this.\n\nIn a terminal, enter:\n\nM92 E[your new value]\n\nObviously, you would substitute in your E-steps value after the E. Save to EEPROM with:\n\nM500\n\nSpecial note: Prusa has disabled M500 saving to EEPROM on some printers (eg. Mini). In these cases the above M92 gcode must be added to the start gcode in your slicer to be read before every print.\n\nYou can also use the Configuration menu on the LCD to make this change, but with a large change (eg. switch to geared extruder) it may take considerable time to turn the knob enough to reach the desired value. Don't forget to Store Settings to save to EEPROM.\n\nSpecial note for dual/multi extrusion\n\nBy default, Marlin expects the e-steps for each of your extruders to be the same. To work around this, you must compile with DISTINCT_E_FACTORS uncommented/enabled in configuration.h:\n\nYou will then be able to enter a unique M92 value for each extruder.\n\nIf recompiling the firmware is not an option. The M92 command for each extruder can be inserted into the slicer 'tool change' section. This way the correct e-steps will be set just before extrusion for that tool takes place.\n\nSlicer Flow Calibration\n\nAim:\n\nTo determine the correct amount filament to be extruded by the 3D printer as directed by the slicer.\n\nWhen required:\n\nBase calibration, as well as any time there has been a change to the extruder/hot end. You may wish to revisit this after tuning linear advance.\n\nTools:\n\nYour favourite slicer. Accurate digital/vernier calipers (two decimal places is much more preferable to a set with only one).\n\nOur E-steps are now correct in the firmware, so we will move on to calibrating the slicer. Each slicer has a setting to control the overall amount of filament extruded by the printer. If the flow rate is increased, more filament will be extruded. If the flow rate is decreased, less filament will be extruded.\n\nIn Simplify3D and PrusaSlicer, this is called Extrusion Multiplier. Cura calls it Flow.\n\nMy method of determining the correct flow rate is to print a hollow, single wall cube with a specified wall thickness, then measure the actual thickness of the wall and adjust the flow rate in the slicer to suit.\n\nSome people prefer to have multiple walls and measure them together. For example, if the extrusion width was 0.4mm with two perimeters, then you would be hoping to measure 0.8mm for the cube wall. This does introduce more variables, such as the amount of perimeter overlap, and therefore a risk of the process failing. This is why I personally prefer a single wall cube, but each to their own.\n\nUnfortunately, I can't provide pre-sliced gcode for this process. It is vital to use gcode generated by YOUR slicer. Setting up your slicer to print the cube in the right way should be simple by following these steps:\n\n1. Import STL cube.stl 2. Turn off infill Infill > Infill density: 0% General settings > Infill percentage: 0% Print settings > Infill > Fill density: 0%\n\nAlso set infill to 0% on main panel Print settings > Infill > Sparse: 0%\n\nAlso set infill to 0% on main panel Template > Infill > Infill density: 0% 3. Turn off top layers Top/bottom > Top/bottom thickness > Top layers: 0 Layer > Top solid layers: 0 Print settings > Layers and perimeters > Horizontal shells > Top: 0 Print settings > Perimeters and Shell > Horizontal shells > Top: 0 Template > Solid Fill > Top solid fill layers: 0 4. Ensure wall thickness is a known value.\n\nSubstitute whatever values you like here.\n\nThis example uses 0.4, which is common for a 0.4mm nozzle and 0.2mm layer height. Walls > Wall thickness: 0.4 Extruder > Extrusion width > tick manual > 0.4 Print settings > Advanced > Extrusion width > Default extrusion width: 0.4\n\nand\n\nPrint settings > Advanced > Extrusion width > Perimeters: 0.4\n\nand\n\nPrint settings > Advanced > Extrusion width > External perimeters: 0.4 Print settings > Width and flow > Extrusion width > default: 0.4\n\nand\n\nPrint settings > Width and flow > Extrusion width > perimeter: 0.4\n\nand\n\nPrint settings > Width and flow > Extrusion width > external perimeter: 0.4 Template > Extruder > Extrusion width: 0.4 5. Set outer wall thickness to single extrusion Walls > Wall line count: 1\n\n(Also ensure Walls > Alternate extra wall is disabled) Layer > Outline/Perimeter shells: 1 Print settings > Layers and perimeters > Vertical shells > Perimeters: 1 Print settings > Perimeters and shell > Vertical shells > Perimeters: 1 Template > Layer > Shells: 1 6. Set flow rate to default: 1.0 / 100% Material > Flow: 100 & Material > Initial Flow: 100 (first layer flow) Extruder > Extrusion multiplier: 1.0 Filament settings > Filament > Extrusion multiplier: 1 Filament settings > Filament > Extrusion multiplier: 1 Primary extruder > General > Flowrate: 100% 7. Enable vase/spiral mode (optional) Not recommended for Cura. Testing suggests the flow rate is increased which will void the test. Layer > Single outline corkscrew printing mode (vase mode) Print settings > Layers and perimeters > Vertical shells > Spiral vase Print settings > Perimeters and shells > Vertical shells > Spiral vase Template > Layer > Spiral vase mode 8. Expected result:\n\nSpecial note:\n\nSome other factors may affect the accuracy of the result.\n\nSome slicers have a minimum layer time, which on a fast print like this, may slow down the feedrate significantly and alter the wall thickness. You may disable this in the slicer, but if your part cooling system is insufficient, the walls may become very hot and deform.\n\nTo overcome this, you may scale up the X and Y dimensions of the cube. As long as the file is sliced as described above, the wall thickness will not alter from this change in scale and the test will be valid.\n\nNow slice and print!\n\nInterpreting Results:\n\nUse digital/vernier callipers to measure the outer wall thickness of the hollow cube. Take measurements in multiple places/sides and average them. You may wish to cut/tear off the lower and upper layers of the cube. This is to remove portions with elephant's foot and/or other abnormalities.\n\nIf your measurement is significantly off, the following calculator can then be used to calculate the new flow rate:\n\nFlow rate calculator\n\nCura / ideaMaker Simplify3D / PrusaSlicer / SuperSlicer\n\nImportant note!\n\nWhat you see with your eyes is more important than a theoretical calculation. After you have performed this calibration, please adjust the flow rate higher or lower based on what you actually see.\n\nFor example, the cube shown in the thumbnail of the XYZ 20mm calibration cube by iDig3Dprinting:\n\nThis print shows clear signs of under extrusion. There are gaps in the top infill as well as gaps between the perimeters and infill. Despite what any calibration procedure determined, the flow rate for this slicer/printer combination needs to be increased.\n\nThis article on all3DP has examples of what over extrusion looks like.\n\nYou may also consider holding the cube up to a bright light source, to see if there are any gaps in the extrusion. Small gaps may indicate the need to margially increase flow rate. If this test cube is too small to do this effectively, most models completed in vase/spiral mode will be suitable.\n\nCan I use this flow value in the other tests on this site? - Important!\n\nThe short answer is: not really.\n\nThe gcode generators on this site work by using javascript to modify source gcode originally created by Simplify3D. However, when you completed the calibration test above, you sliced your own gcode, making your own baseline and then making a flow adjustment relative to that. Therefore, this test is unique from the others on this site which is why the flow rate doesn't necessarily translate.\n\nLet's say your old flow rate was 100% and you have tested and corrected this to 96%. The gcode on this site originally had a flow rate of 90% when sliced, so applying your 96% to that gives a final result of 86.4%, not 96%. Your slicer profile settings will also be different in other ways, which further complicates matters. Therefore, there is not a straightforward correlation between your slicer and my gcode generators.\n\nThe aim of the site is to discover ideal settings you can apply to your own slicer profile, not to optimise the gcode created by the generators. Keep this in mind and focus on the aim of each test, rather than the general print quality.\n\nIf you are experiencing significant over or under extrusion that prevents you from using the tests properly, by using the custom start gcode function on this site you can optionally issue an M221 to override the values in the generatored gcode. For example, using M221 S90 would tell the firmware to only extrude 90% of what the gcode asks for. This is an easy method for making a quick correction that will alow the tests to complete successfully.\n\nStepper Motor Current Tuning\n\nAim:\n\nTo set the correct amount of current supplied to the stepper motors of the printer. This is set with the stepper motor drivers, located on the mainboard.\n\nWhen required:\n\nIf steps are being skipped/missed. If the stepper motors are too hot to touch. When significant changes are made to the motion system (e.g. heavier bed, conversion to direct drive from bowden tube).\n\nIf your 3D printer is running fine without hot stepper motors, you may skip this step.\n\nTools:\n\nFor newer, 'smart' stepper motor drivers: terminal software such as Pronterface or Octoprint.\n\nFor older stepper motor drivers: a multimeter, small screwdriver and a spare wire with alligator clips (optional but recommended).\n\nInstructions on how to setup terminal software can be found here.\n\nSetting the stepper driver current is an important step in calibrating a 3D printer, although typically the value does not need to be exact. There is a window within which the printer will operate without issue.\n\nGeneral methods are used on this page, but if you are after more detail on a specific driver, my stepper motor driver guide playlist may be of use.\n\nAlthough we target a specific current, the following rule of thumb is the most important factor:\n\nRule of thumb:\n\nIf the stepper motor is missing steps or you are experiencing layer shifts, the stepper current needs to be increased. This will supply more torque to the motor but also make it (and the driver) run hotter.\n\nIf the stepper motor is too hot to touch, the stepper current needs to be decreased. This will remove torque and make the motor (and the driver) run cooler.\n\nUnfortunately, sometimes a stepper motor may be running hot and still missing steps. The following may apply in these cases:\n\nIn the case of the extruder stepper motor, there may be an obstruction such as a partially blocked nozzle, PTFE tube unseated, hot end temperature too low (increased resistance to melting/flow) and/or first layer too close (nozzle jammed against bed, nowhere for plastic to exit).\n\nFor X, Y and Z, the stepper motor may be undersized for the mass it is pushing. This can occur when increasing the size of the printer (e.g. Ender Extender kit), adding something heavier to the bed (e.g. glass/mirror plate), and/or converting from bowden tube to a heavy direct drive extruder.\n\nIf there is some sort of mechanical misalignment that makes movement a lot harder. This may be a V-roller that is far too tight or a misaligned Z axis leadscrew causing the Z axis to bind.\n\nThe acceleration/jerk and printing speeds are too aggressive for the stepper motors.\n\nEach stepper motor driver has a rated current, if this is too high it will run very hot and potentially cause missed steps. Active cooling can help this, but the current should still be still within the safe specifications for that driver.\n\nIf tuning the stepper driver current is unable to find a sweet spot, the good news is you can upgrade to a larger stepper motor easily in most cases. Nema17 steppers have the same mounting pattern and output shaft diameter, however you should still check your machine to ensure there is enough room for a longer stepper before any purchase. With all else being equal, a longer stepper motor will be capable of more torque and handling higher current.\n\nDepending on the stepper motor driver, there are two ways of setting the current:\n\n1. Physical:\n\nFor older stepper motor drivers or TMC drivers running in legacy mode, the current is set by turning a trim pot screw on the top of the driver to raise or lower VREF, which in turns sets the driver current.\n\n2. Gcode:\n\nOn TMC drivers, the current is set directly with gcode commands. This can be set in the firmware, via a terminal or by using the printer's LCD. This value should then be saved to EEPROM to stay persistent.\n\nWe will cover these one at a time below.\n\nPeak Current and Sense Resistor Value\n\nSetting stepper driver current accurately relies on knowing two values: the peak current that the stepper motor is rated for and the sense resistor value on the stepper motor driver.\n\nFor newer TMC drivers, the sense resistor value is already known. For older drivers, methods for determining this are seen in the following snippet. Methods for determining the stepper motor peak current are shown too:\n\n1. Physical\n\nI have covered this in detail before, so please use the embedded video below (queued to the correct time) to see how to set the VREF. The process is essentially the same for any driver.\n\nThe VREF is just a reference voltage to assist us in setting the driver current. It is used because it is much simpler to measure voltage rather than current with a multimeter. Typically these drivers have the peak/max current set.\n\nThe general steps for setting current via VREF are the same between drivers, only the VREF formula changes:\n\nPower up mainboard via 12/24V normal power supply, NOT just USB 5V.\n\nSet multimeter to DC voltage, max 2V range.\n\nConnect black/negative multimeter probe to ground. This can be a negative terminal or the top of the USB connector.\n\nConnect the red/positive probe to the trim pot on top of the driver to measure VREF.\n\nTurn the trim pot SLOWLY with a screwdriver, then remeasure.\n\nRepeat for each stepper motor driver.\n\nAlternatively, you can use an alligator clip wire between the red probe and the metal shaft of the screwdriver, so that a VREF reading is available as you turn the screwdriver. This procedure is shown in this snippet:\n\nThe VREF formulas for drivers I have tested are as follows:\n\nA4988\n\nThe typical sense resistor value is 0.1. Please check your drivers to be sure.\n\nVREF = 8 x max current x sense resistor value\n\nThen use the video above as a guide to the process.\n\nDRV8825\n\nThe sense resistor value should be 0.1. If it is:\n\nVREF = max current / 2\n\nThe process is then the same as for A4988s as shown in the video above.\n\nTMC2100\n\nLike the TMC drivers covered in the gcode section, the current for the TMC2100 is set not as a peak, but instead as RMS. To determine RMS, divide the peak current by 1.41.\n\nVREF = (RMS current * 2.5) / 1.77\n\nThe process is then the same as for A4988s as shown in the video above.\n\nTMC2208 - Legacy/standalone mode (as found in Creality silent boards)\n\nLike the TMC drivers covered in the gcode section, the current for the TMC2208 (legacy mode) is set not as a peak, but instead as RMS. To determine RMS, divide the peak current by 1.41.\n\nVREF = (RMS current * 2.5) / 1.77\n\nThe process is then the same as for A4988s as shown in the video above.\n\nSpecial note for some Creality silent boards\n\nCourtesy of ZuckMe:\n\n\"My creality silent board has R150 sense resistors not R100 so the VREF formula is wrong, for details here\": EEVBLOG\n\nLV8729\n\nThere are mainly two kinds of stepper driver boards with this driver.\n\nOne has a resistor labelled R100 on the bottom, and on the other the resistor is labelled R220. Which formula you use is based off of this resistor\n\nThe process is then mostly the same as for A4988s as shown in the video above, but with the correct formula for your driver board.\n\nR100:\n\nVREF = max current / 2\n\nR220:\n\nVREF = max current * 1.1\n\n2. Gcode\n\nTMC drivers connected via UART or SPI serial can easily have their current set via gcode. This is not peak current, but rather RMS (root mean square) current. Rather than the maximum, think of this as more a typical/average current, where the driver will be operating mostly. To convert the peak current from stepper motor specs to RMS, divide it by 1.41.\n\nThe current can be set in a few different ways for each driver:\n\nTMC2208, TMC2209, TMC2130, etc\n\nThese drivers should have a sense resistor value of 0.11. This is the default in Marlin, so when compiling it should already be set (X_RSENSE for the X axis, Y_SENSE for Y and so forth):\n\nTherefore, you can set your RMS current directly in the firmware when compiling. This is X_CURRENT for the X axis, Y_CURRENT for the Y and so forth. After flashing firmware, remember that the previous value may still be stored in the EEPROM. Check your values by entering M503 in a terminal.\n\nYou can also set the RMS current via terminal with M906. Please follow the link to see the reference. An example of setting the X axis current to 680 would be:\n\nM906 X680\n\nDon't forget to save the value to EEPROM afterwards with:\n\nM500\n\nFinally, the LCD Configuration menu can be used to set the RMS current. Don't forget to save afterwards by clicking on Store Settings.\n\nTMC5160\n\nThe TMC5160 is the same as the other TMC drivers apart from one important difference: the sense resistor value needs to be changed from 0.11 to 0.075 when compiling the firmware.\n\nAfter this change is made, the same procedures apply:\n\nYou can set your RMS current directly in the firmware when compiling. This is X_CURRENT for the X axis, Y_CURRENT for the Y and so forth. After flashing firmware, remember that the previous value may still be stored in the EEPROM. Check your values by entering M503 in a terminal.\n\nYou can also set the RMS current via terminal with M906. Please follow the link to see the reference. An example of setting the X axis current to 680 would be:\n\nM906 X680\n\nDon't forget to save the value to EEPROM afterwards with:\n\nM500\n\nFinally, the LCD Configuration menu can be used to set the RMS current. Don't forget to save afterwards by clicking on Store Settings.\n\nRetraction Tuning\n\nAim:\n\nTo set the correct parameters concerning retraction during 3D printing, including retraction distance, speed, extra restart distance, prime speed and z hop.\n\nWhen required:\n\nInitial calibration, any time the hot end or extruder is changed, when trying a new type/brand of filament.\n\nTools:\n\nGcode generator on this page.\n\nFDM works by melting plastic filament and extruding it accurately one layer at a time to build up 3D geometry. By its nature, the plastic will continue to ooze and drip out of the nozzle even when not pushed by the extruder. To combat this, our slicers use retraction, where the filament is withdrawn from the hot end, alleviating pressure and minimising ooze. When properly tuned, this has the effect of removing stringing, the unwanted oozing of plastic between two points of the model.\n\nAn example of fine stringing can be seen in the following image. It appears like cobwebs:\n\nSpecial note:\n\nTemperature tuning and retraction tuning are related to each other. You could do them in either order, and it may be necessary to tune back and forth to reach an ideal result. A higher nozzle temperature will promote more oozing and stringing, whereas a lower temperature will reduce oozing and stringing.\n\nBesides hot end temperature, there are five parameters we will be tuning relating to retraction. In the table is a description of each as well as where the setting is found in the most popular slicers. By far the most important is retraction distance.\n\nRetraction Parameter Retraction distance: The length the filament is pulled away from the nozzle in mm. Travel > Retraction distance Extruder > Retraction distance Printer settings > Extruder 1 > Retraction > Length Printer settings > Extruder 1 > Retraction > Length Template > Extruder > Retraction > Retraction Material Amount Retraction speed: The speed at which this filament is withdrawn in mm/sec. Travel > Retraction speed Extruder > Retraction speed Printer settings > Extruder 1 > Retraction > Retraction Speed Printer settings > Extruder 1 > Retraction > Retraction Speed Template > Extruder > Retraction > Retraction Speed Extra restart distance: The retraction distance will be reversed when the travel (non-extruding) movement is over. This is typically zero, but you can opt for extra filament to be extruded (a positive value) or less than what was retracted (a negative value). Also measured in mm. Travel > Retraction extra prime amount Extruder > Extra restart distance Printer settings > Extruder 1 > Retraction > Extra length on restart Printer settings > Extruder 1 > Retraction > Extra length on restart Template > Extruder > Retraction > Extra Restart Amount Prime (unretract) speed: The speed at which this filament is reintroduced to the nozzle in mm/sec. Travel > Retraction prime speed Not supported. S3D will use retraction speed as prime speed. Printer settings > Extruder 1 > Retraction > Deretraction speed Printer settings > Extruder 1 > Retraction > Deretraction speed Template > Extruder > Retraction > Restart Speed Z hop: The amount the nozzle lifts vertically in mm during a travel (non-extruding) movement. After this movement, the correct Z value is then restored before the filament is unretracted/primed again ready for printing. Travel > Z hop when retracted Extruder > Retraction vertical lift Printer settings > Extruder 1 > Retraction > Lift z Printer settings > Extruder 1 > Retraction > Lift z Template > Extruder > Retraction > Z Hop at Retraction\n\nRetraction tuning tower generator\n\nThe following form will create a retraction tower to conveniently test back to back parameters in the same print. Of the three available parameters, it is best to change only one per test print. For example, keep the retraction speed and extra restart distance the same, but vary the retraction distance over each segment. Changing more than one parameter makes is hard to tell what made the difference. The print is quick, so repeat the test varying other parameters until you are happy with them all.\n\nHere is the STL if you would like to slice a similar test yourself: retractiontestv2.stl. This file has been updated to V2, which changes the external shape from circular to pentagonal. It is also prints slightly faster. The original file is still available here: retractiontest.stl\n\nInterpreting Results:\n\nPlease use the following video as a guide to this test:\n\nInspect your finished print. Hopefully, there will be a clear difference between the segments that reflect the settings you entered. In the example below (Ender 3 direct drive, PLA, linear advance enabled), the retraction distance varied from 0.4 up to 1.4mm in 0.2mm increments. Segments A and B have the least stringing. Based on this, I would assume that a retraction distance of 0.4 - 0.6 is best for this printer. this is consistent with linear advance being enabled.\n\nI would then repeat the test, setting the same retraction distance for each segment and instead altering the retraction speed to dial that in. A third test could then take place to test extra restart distance, a fourth for Z hop, etc.\n\nIf you would like to be able to customise additional parameters for a retraction test, Prahjister has made a great tool: Retraction Calibration Tool. It has a higher degree of difficulty due to needing more parameters but is ultimately more powerful. Warning! This is an external website and beyond my control. Some users have reported success and others have had issues with the gcode generated. As with the gcode made by this website, monitor your printer during printing with a view to cutting the power if needed.\n\nI can't translate my test results to my own slicer! Other factors beyond the scope of this test - Important!\n\nAfter you have found a combination of parameters which works well on your machine, the idea is to then translate them to your own slicing profile. If you can't replicate the results, please work through the following:\n\nSlow down is layer time is below (PrusaSlicer) / Speed Overrides (Simplify3D) / Minimum layer time (Cura): Most slicers have a setting to detect if a layer will complete in less than a certain time threshold. In this case, all movement for that layer is slowed, including those related to retraction, to increase the layer time to meet the target. The gcode generated by the this page has this setting OFF. If your results vary, trying turning this setting off in your own slicer too.\n\nZ hop speed: If you are using Z hop, the vertical feedrate for the Z movements is set to 20 mm/sec for these tests. Matching this in your slicer is advised if these tests look better than your own slicer results.\n\nRetraction acceleration: This will affect whether the retraction speed can actually be reached. The gcode generator below does not include any changes to what is set on your printer. You can change this with M204 and the R argument.\n\nSlicer settings such as coast and wipe: Coast stops extrusion slightly early to assist retraction. It effectively lets the hot end 'run dry' at the end of the printing movement to reduce ooze. This varies from slicer to slicer and isn't always necessary to tune.\n\nWipe moves the nozzle back towards the recently printed geometry to wipe ooze off. If you are having trouble reducing stringing, it may be a good option.\n\nBoth coast and wipe are turned off in the gcode generator below.\n\nMaximum extruder feedrate: Your firmware may have a hard limit imposed on extruder movement that is below the retraction speed values you are attempting to use with the form above. You may need to use M203 to raise the extruder feedrate limit to try higher values for retraction speed. This potentially needs to be saved with M500 if you want it to be permanent.\n\nTravel feedrate: A travel move is one where the printer moves to a new location without extruding. The slower this move is, the more time filament will have to ooze from the nozzle and add to stringing. The default feedrate is set to 100mm/sec in the gcode generator above, and increases or decreases based on the user feedrate input. Matching this in your slicer is advised if these tests look better than your own slicer results.\n\nTravel acceleration: This test does not manipulate travel acceleration but increasing its value may help reduce stringing. You can change travel acceleration with M204 and the T argument.\n\nLinear advance: Linear advance, covered later in this guide, can drastically improve the accuracy of our extrusion. It has a significant impact of retraction (reducing the need), so after configuring linear advance you may need to revisit retraction.\n\nSlicer differences: The gcode generated below was originally sliced by Simplify3D. The settings you establish should translate to your slicer quite well but there may be idiosyncrasies. For instance, Cura measures extra restart distance in volume rather than length.\n\nTemperature Tuning\n\nAim:\n\nTo set the ideal printing temperature for the hot end for a given filament.\n\nWhen required:\n\nInitial calibration, any time the hot end is changed, when trying a new type/brand of filament.\n\nTools:\n\nGcode generator on this page.\n\nFor this calibration, we are only concerned with the temperature of the hot end, not the bed. The bed temperature will need to be matched to any given filament, and once a good value is found, you will generally stick with it.\n\nInstead here we are tuning the temperature at which the filament is extruded. There is no universal temperature for a given filament. Variations in heater blocks and thermistor placement dictate this.\n\nRule of thumb and special note:\n\nA higher nozzle temperature should result in stronger parts, particularly interlayer adhesion. Part surface may be shinier. The filament will be softer so ooze and stringing may be increased, and some surface detail potentially lost, especially on overhangs. A hot end temperature too high may damage parts of the assembly such as the internal PTFE tube.\n\nA lower nozzle temperature should result in weaker parts, particularly interlayer adhesion. Part surface may be duller. The filament will be firmer so ooze and stringing may be reduced, with good surface detail, especially on overhangs. A hot end temperature too low can cause the hot end to jam.\n\nTemperature tuning and retraction tuning are related to each other. You could do them in either order, and it may be necessary to tune back and forth to reach an ideal result.\n\nThe following form will create a temperature tower to conveniently test back to back parameters in the same print. There are five segments to vary the temperature. Generally the lowest temperatures would be at the start of the print (segment A) and the increase up to the highest by the top of the print (segment E).\n\nYour 3D printer firmware will have a minimum hot end temperature extrusion is allowed and a maximum hot end temperature for safety. Make sure to keep within these boundaries to avoid errors.\n\nHere is the STL if you would like to slice a similar test yourself: temperaturetowerv2.stl. This is an updated model that prints in less time, has more variation in overhangs, and has a narrow pyramid in each band to try and snap off to test layer adhesion.\n\nThe original design can be found here: temperaturetower.stl\n\nTemperature tuning tower generator\n\nInterpreting Results:\n\nPlease use the following video as a guide to this test:\n\nInspect your finished print. Hopefully, there will be a clear difference between the segments that reflect the temperatures you entered. In the example below (Ender 3 direct drive, PLA, linear advance enabled), the hot end temperature varied from 180 to 260 in 20 degree increments\n\nAs expected, surfaces becomes more glossy as the temperature increases. What was unexpected was surface rippling being more obvious as the temperatures went up. Overhangs and bridges all look good on this test, however the little spikes could not be printed accurately at the higher temps due to the part cooling system not keeping up. The coolest spike in segment A was very brittle, the spike on segment C the strongest, and the upper spikes too malformed to test accurately.\n\nMy previous hot end temperature was 200 degrees for this printer, but I will consider raising it to 210 degrees after this test to gain some interlayer strength without any trouble with part cooling.\n\nAcceleration Tuning\n\nAim:\n\nTo find the right compromise between printing speed and quality, specifically related to surface artefacts such as ghosting.\n\nWhen required:\n\nInitial calibration, when significant changes are made to the motion system (e.g. heavier bed, conversion to direct drive from bowden tube).\n\nTools:\n\nTerminal software such as Pronterface or Octoprint.\n\nGcode generator on this page.\n\nInstructions on how to setup terminal software can be found here.\n\nWe set a feedrate or movement speed in our slicer, but the printer does not instantly reach these speeds. Like a motor vehicle, it needs time to accelerate. If the distance of the movement is short, it may not even have time to reach the specified speed. This can determined with the handy acceleration calculator, available on the Prusa website.\n\nComplementary to acceleration we have jerk, replaced by junction deviation in newer versions of Marlin. These settings have differences, but both are essentially responsible for making sure the printer does not come to a complete stop between each movement, but rather decelerates an appropriate amount depending on the angle of the next 'corner'.\n\nWe will be tuning both of these parameters with another tower. The aim is to have a reasonably fast print time without inducing excessive ringing/ghosting. An example of bad ghosting is seen below. The features of the model are repeated across the surfaces due to vibration of the printer components:\n\nI have previously made a detailed video guide on this subject, complete with many diagrams explaining the concepts. The tuning process depicted will be improved upon here with an easier to use calculator and custom gcode generator below.\n\nRule of thumb:\n\nHigher acceleration and jerk will result in a faster print time, as the printer reaches top speed faster and maintains a higher speed when corning. This is harder on the printer, and may result in reduced lifespan of components and the need for more regular maintenance. It also introduces more surface defects such as ringing/ghosting.\n\nLower acceleration and jerk will result in a slower print time, as the printer reaches top speed more gradually and corners at a lower velocity. This is easier on the printer, with potentially increased component lifespan and less need for regular maintenance. It reduces surface artefacts such as ringing/ghosting, unless it is far too conservative, in which case it may introduce bulging in corners.\n\nCalculating maximum feedrate - optional but strongly recommended\n\nThis is simplified test that will not be as accurate as using the gcode generator on the Speed/Max flow tab. If you would like to see it, you can toggle visibility here.\n\nOne strategy is to calculate the fastest your 3D printer can move while extruding cleanly, set this feedrate in the slicer, and then tune acceleration to meet this speed. If you are not interested in printing as fast as possible, skip to the next section.\n\nThis part of the guide and calculator is adapted from Martin Pirringer's tutorial. Please consider supporting him and his robotics team through paypal or you can also donate to team 1989 through their Team 1989 Web Site\n\nThe following calculator will assist you in determining the maximum feedrate your printer/extruder/hot end is capable of.\n\nClear debris from hobbed gear, bring nozzle up to normal printing temp and load filament.\n\nEnter the following into pronterface. This will set movement to relative and then extrude 50mm of filament at a feedrate of 2mm/sec:\n\nG91\n\nG1 E50 F120\n\nInspect extruded filament for consistency. If all is well, keep repeating with higher feedrate F, until extrusion is inconsistent, extruder stepper skips steps and/or hobbed gear starts eating into filament.\n\nThe following are examples of increasing the extruder feed rate by 1mm/sec each time, although you should stop when the extrusion becomes problematic. You may have more or less steps than this:\n\nG1 E50 F180\n\nG1 E50 F240\n\nG1 E50 F300\n\nG1 E50 F360\n\n...\n\nAfter you find the limiting speed, back off and repeat the test at a lower feedrate several times in a row until you are confident of reliable and repeatable extrusion.\n\nDon't forget to put the printer back into absolute movement mode:\n\nG90\n\nEnter your reliable feedrate and filament diameter below:\n\nMaximum feedrate calculator\n\nReliable feedrate: Filament diameter:\n\nYour maximum reliable extrusion rate is 7.22 mm³ per second.\n\nEnter the following settings from your slicer:\n\nInput setting: Layer height (mm): Quality > Layer height Layer > Primary layer height Print settings > Layers and perimeters > Layer height > Layer height Print settings > Slicing > Layer height > Base Layer height Template > Layer > General > Layer height Extrusion width (mm): Quality > Line width Extruder > Extrusion width Print settings > Advanced > Extrusion width > Default extrusion width Print settings > Width & Flow > Extrusion width > default Template > Extruder > General > Extrusion width\n\nYour maximum reliable XY feedrate is 90 mm per second.\n\nWarning: This value is dependent on a number of variables such as filament type, brand, colour, ambient temperature, etc. Be conservative to ensure success.\n\nAcceleration Tuning\n\nWe will now produce an acceleration tower to conveniently test back to back settings in a single print. If you would like to slice the model yourself, here is the STL: accelerationtower.stl. It should be sliced with a normal base, but hollow, no top layers and only 2 perimeters.\n\nWith Marlin firmware, the only thing you need to know before this test is whether your firmware is set up for jerk (older) or junction deviation (newer). Entering M503 via terminal will give a list of printer variables:\n\nIf the M205 line contains the letters X, Y & Z, your printer is running jerk. The numbers after the X,Y & Z are your current jerk values for each axis.\n\nIf the M205 contains the letter J, your printer is running junction deviation. The number after the J is your current junction deviation value.\n\nThe image below shows an example of each of these scenarios:\n\nUse the following form to customise the gcode to your liking:\n\nKlipper uses both ACCEL and ACCEL_TO_DECEL. The difference between the is explained here.\n\nKlipper uses a value known as Square Corner Velocity (SCV) instead of junction deviation or jerk, but the idea behind it is the same. A value of 5 mm/sec will allow the toolhead to slow to and maintain a 5 mm/sec speed for a 90 degree corner. This speed will be higher for a shallower turn and lower for a sharper turn.\n\nRepRapFirmware uses M205 to set Max Instantaneous Speed Change instead of jerk or junction deviation, but the idea behind it is the same.\n\nAcceleration & jerk/junction deviation tuning tower generator\n\nThe STL for this test is available here: accelerationtower.stl\n\nThis gcode will raise the acceleration limits (M201), set acceleration (M204) and set junction deviation/jerk (M205) for the purposes of the test. If you print another job afterwards these higher values will still be in place. If you are unsure how to restore your previous values, the easiest thing to do is to power cycle the printer.\n\nInterpreting Results:\n\nPlease use the following video as a guide to this test:\n\nYou may initially think the X and Y labels are facing the wrong way, but they are not. This is explained and demonstrated in the video above.\n\nYou may also notice a few bits of stringing. These are a quirk of how the test was originally sliced and can safely be ignored.\n\nInspect your finished print. Hopefully, there will be a clear difference between the segments that reflect the acceleration values you entered. In the example below (Ender 3 direct drive, PLA, linear advance enabled), acceleration varied from 300 to 800 in 100 mm/sec/sec increments. Junction deviation was left at the default 0.08. The difference between each segment is subtle, but there is increased ghosting around the letter Y on the higher segments. In the lowest segment, the gentle acceleration means the nozzle spends more time in the corners and they tend to bulge. This would be more evident if linear advance was disabled.\n\nThe ideal segment will have the best compromise between low acceleration corner bulging and high acceleration ringing.\n\nMy previous value was 500, but a small increase in quality may be achieved from lowering the value to 400.\n\nOnce you have an acceleration value you are happy with, you can update with:\n\nM204 P400\n\nwhere 400 is the value of the acceleration with the best compromise based on the tower test print.\n\nIt's also worth noting that the M201 value acts as a per axis limit for acceleration. For example, if you set the M204 print acceleration to 1000 but the X and Y M201 acceleration limits are only 800, then the M204 P value will be capped at 800. Use M503 to see the current M201 values, and if necessary, use M201 to set higher X and Y acceleration limit values to suit.\n\nWe can store the new value(s) to EEPROM by sending:\n\nM500\n\nYou would then repeat the test with all of the acceleration values locked at your preferred value for each segment, but this time varying jerk/junction deviation.\n\nTo save for a printer with jerk (with a determined best compromise of 8 for this example), we would enter:\n\nM205 X8 Y8\n\nTo save for a printer with junction deviation (with a determined best compromise of 0.05 for this example), we would enter:\n\nM205 J0.05\n\nEither way, we save to EEPROM afterwards with:\n\nM500\n\nEach of these parameters can also be entered and stored from the configuration menu of the Marlin LCD.\n\nOnce you have an acceleration value you are happy with, you can edit the [printer] section of printer.cfg\n\n[printer] max_accel: 400 max_accel_to_decel: 400\n\nwhere 400 is the value of the acceleration with the best compromise based on the tower test print.\n\nObviously you can enter a unique value for MAX_ACCEL_TO_DECEL compared to MAX_ACCEL.\n\nYou would then repeat the test with all of the acceleration values locked at your preferred value for each segment, but this time varying square corner velocity.\n\nTo save an example value of 8 you can edit the [printer] section of printer.cfg\n\n[printer] square_corner_velocity: 8.0\n\nSave config to restart Klipper with the changes in effect.\n\nOnce you have an acceleration value you are happy with, you can edit config.g with:\n\nM204 P400 T[value]\n\nwhere 400 is the value of the acceleration with the best compromise based on the tower test print. The T value represents travel acceleration, when no filament is being extruded. It can likely be a higher valu without any loss in quality.\n\nIt's also worth noting that the M201 value acts as a per axis limit for acceleration. For example, if you set the M204 print acceleration to 1000 but the X and Y M201 acceleration limits are only 800, then the M204 P value will be capped at 800. Look the current M201 values, and if necessary, use M201 to set higher X and Y acceleration limit values to suit.\n\nYou would then repeat the test with all of the acceleration values locked at your preferred value for each segment, but this time varying max instananeous speed change.\n\nconfig.g> can then be updated to reflect the best results, for instance a value of 8:\n\nM205 X8 Y8 Z[value] E[value]\n\nNote you would likely leave Z and E unchanged from their original values.\n\nSave config.g to restart the firmware with the changes in effect.\n\n>\n\nSpecial note for Cura, PrusaSlicer and SuperSlicer:\n\nCura, PrusaSlicer and SuperSlicer all have the capability to control these parameters from the slicer by inserting appropriate gcode. If you are finding that your new acceleration values are not taking effect, you may need to also set them in the slicer. This is actually a desirable feature, as it allows more aggressive settings for infill and features that can't be seen in the final print, yet be more conservative for outer walls where aesthetics are paramount.\n\nHigher acceleration without ringing: Input Shaping\n\nAn amazing development in 3D printing is input shaping, which compensates for the machine's resonant frequency by altering stepper motor inputs to drastically reduce ringing. Available in Klipper and RepRapFirmware, input shaping allows much higher feedrates without a loss in print quality. To see it in action, see the videos below:\n\nLinear Advance Tuning\n\nAim:\n\nTo tune the timing of the extrusion with the aim of reducing swollen corners and thinner walls. This results in a more consistent extrusion and a reduction in surface artefacts.\n\nWhen required:\n\nInitial calibration, when changing the extruder/hot end (especially if changing from bowden tube to direct drive), when trying new filaments.\n\nTools:\n\nMarlin Linear Advance Pattern Generator\n\nIn a 3D printer, due to the pressure required to push the molten filament through the small opening of the nozzle, there is a small time delay from when the extruder pushes the filament to when it actually comes out the nozzle. Traditionally the movement of the extruder is matched to XY movements of the printer, so this means the start of a line will be under-extruded and the end of the line will be over-extruded. Linear advance unsynchronises the extruder movements from the XY movements, changing the timing of the extruder so the thin and thick sections are significantly reduced.\n\nThe concept and how to tune linear advance is explained in much more detail here:\n\nSpecial notes:\n\nLinear advance often goes by the name pressure advance. They are the same thing.\n\nLinear advance is often not enabled by default in Marlin firmware. Therefore, the firmware must be recompiled with linear advance included. This is covered in the video above.\n\nLinear advance is incompatible with certain stepper motor drivers. A prominent one is the TMC2208 when connected in legacy mode (as found on Creality silent boards). When connected in 'smart' mode via UART, this is not a problem.\n\nLinear advance is not currently compatible with S curve acceleration (another Marlin feature), although it is possible to uncomment #define EXPERIMENTAL_SCURVE when adding linear advance as a work around.\n\nLinear advance requires aggressive acceleration for the extruder and will work the motor harder. Higher current maybe required for the E driver, which will make it run hotter.\n\nLinear advance is filament dependent. A different value is required for each filament to get the best results.\n\nTesting for linear advance relies on the visual inspection of a single layer, therefore it is important to have your bed levelling/first layer reliable and repeatable.\n\nLinear Advance Pattern Generator\n\nMarlin has excellent linear advance documentation and a test gcode generator already made, so there is no point recreating a competitor here. An example of how to use it is shown in the video above, and it can be found here: Marlin Linear Advance Pattern Generator\n\nThe parameter we tune for linear advance is called the K factor. The K factor relates to the amount of flex or compression in the filament and the length of the path between the extruder and hot end.\n\nA higher K value suits a bowden tube and/or flexible filaments. This is because the filament can flex sideways in the tube in between the extruder and hot end, adding to the extrusion time delay. A good starting point for a bowden extruder is a K value of 1.0.\n\nA lower K value suits a direct drive extruder and more rigid filaments. With these characteristics, the transfer of filament between extruder and hot end is more direct with less time delay. A good starting point for a direct drive extruder is 0.2.\n\nThe above video takes you through how to use the pattern generator, which basically involves inputting printer and slicer parameters, before clicking to download the gcode file.\n\nUsing the suggested starting K values above, you would then pick an upper and lower limit either side of this for a preliminary test.\n\nInterpreting results:\n\nPrinting the gcode generated by the pattern generator with yield a result like this:\n\nSome of the horizontal lines should have obvious thick and thin portions, and some may even have large gaps. You are looking for the line with the most consistent extrusion width from left to right. The K value for this line will be printed to the right of the line. At this point, as shown in the video, you may wish to repeat the test with a narrower range of values either side of this best K value. This will help determine the best value by using a 'higher resolution'.\n\nSaving the K Factor\n\nWith many of the parameters we have tuned so far, we can permanently save them to either the firmware or EEPROM. As the linear advance K factor is filament dependent, this may not be the best solution if you print with varied filaments, and instead you may prefer to save using your slicer profile. All methods are covered below.\n\nThe K factor can be set by using the M900 gcode:\n\nM900 K0.11\n\nIt can be permanently stored EEPROM by following up with:\n\nM500\n\nBoth the setting and saving of the K factor can also be achieved using the LCD menu.\n\nYou may prefer to use the M900 gcode command in your start gcode instead, particularly if your slicer supports different start gcodes for different materials. In the event that you use start gcode, unless an M500 follows, the setting of the K factor will be temporary. When the printer is next restarted the value stored in the EEPROM will be restored. When new print starts the value given it its start gcode will overwrite the previously set value.\n\nLinear advance can be temporarily be disabled by setting the K factor to 0:\n\nM900 K0\n\nXYZ steps Calibration\n\nAim:\n\nTo ensure that when the firmware attempts a certain amount of X, Y, and Z travel, the actual movement of the machine is accurately matches.\n\nWhen required:\n\nThis step is not necessary for many people, but is still worth doing if you are going over the machine in detail. Consider this procedure neccessary if your printed parts are clearly over or under sized.\n\nTools:\n\nThe best tool for this job is a dial gauge. These are a precision measuring device and well suited. You can also use a set of digital calipers but they will be less useful.\n\nThe dial gauge also needs to be mounted. A universal design is tricky because of variations in 3D printers and dial gauges, but the example I used is here: Dial gauge mount on Thingiverse\n\nYou will also find the XYZ 20mm calibration cube by iDig3Dprinting referred to on this page, but printing it is not a mandatory part of the calibration process.\n\nThis tab serves as a companion for this video: Calibrating your XYZ steps using a dial gauge for maximum accuracy\n\nIt is common practice for 3D printer users to measure a 20mm calibration cube to see how dimensionally accurate their machine is. While this is a very valid test to measure the accuracy of their printed parts, it is not a suitable measurement to base adjustments of the X, Y and Z steps per mm.\n\nX, Y and Z steps per unit\n\nMany people are familiar with E-steps, which is the value in the firmware that dictates how many steps the extruder stepper motor needs to rotate to push through 1 unit of material (typically millimetres). Depending on if the extruder is geared or not, this number can vary quite a lot and needs to be set accurately for prints to come out properly. Calibrating E-steps already has its own tab.\n\nIf the objects you are printing are not the correct size, then adjusting the X, Y and Z steps is a suitable step to fix the problem. However, as you will see on this page, there are other factors that contribute to print accuracy that should be considered first.\n\nFinding out the current values for your X, Y and Z steps\n\nThere are two choices here, which are both convient:\n\nOn the Marlin LCD menu, go to Configuration > Advanced Configuration > Steps per mm. Your machine may say steps per inch if that is how you have it configured. The values will be shown on the LCD:\n\nConnect via terminal, and send M503. This will report the variables currently being used by the firmware. Somewhere in the long outpout, it will say 'Steps per unit' and list your values on the next line:\n\nHow are X, Y and Z steps usually calculated?\n\nThe steps per unit for the Z, Y and Z axes are a function of the mechanical and electronic components of the printer. These include the type of stepper motor, the type of belt/lead screw, the amount of micro stepping and so on. An excellent resource exists in the Prusa RepRap Calculator. In the 'Stepper Motor' section, you can enter the specifications of your machine and the correct steps per unit will be calculated.\n\nWhat not to do - Measuring printed parts\n\nOften people will print a 20mm calibration cube and measure the external faces to see how accurate their machine is. While this is a valid measurement for determining how accurate the output of the printer is, it is NOT the correct measurement for calibrating X, Y and Z steps. This is because the printed part is the result of many more variables other than how far the X, Y and Z axes are moving during the print.\n\nA simple demonstration of this can be made by printing three 20mm calibration cubes, with no changes to the machine but the extruder flow rate altered for each test. In the image below, the cubes have flow rates of 80%, 96% and 120%. Although they look identical from a distance, there is a clear variation in their external dimensions when measuring with calipers.\n\nIf the cube can vary this much without adjusting steps per unit, it goes to show that printed parts are not a reliable indicator of whether the steps per unit are correctly configured. Commenters on the video have also pointed out that the printed plastic will shrink as it cools, and this will differ for different materials and even for different colours/age/filament condition. Another relevant variable that ruins our results. Yes, we do care about the accuracy of the final part, but we need a better way to measure X, Y and Z movement.\n\nWhat to do - Measuring raw axis movement\n\nThe primary variable we need to eliminate is the extruded plastic. Therefore we want to measure the movement of each axis when not printing, comparing target vs actual movement. This is where our calipers or preferably a dial gauge comes in handy. Our aim is to mount the dial gauge so that when we move an axis, it measures eactly how far it has travelled.\n\nDial gauge mounting\n\nThere are potentially two ways to mount the dial gauge:\n\nTo the print head, so that it can measure the relative movement of the Z axis up and down.\n\nOff the machine, so the dial gauge tip is pressed against moving components of the printer to measure the relative movement of the X and Y axes.\n\nIn either case, we have some rules we must adhere to with mounting:\n\nThe dial gauge must be rigidly mounted. If it can wiggle or the mount can flex, the reading will be inaccurate.\n\nThe linear motion of the dial gauge must be parallel to the motion of the axis being measured, or perpendicular to the object it is pushing on. If we imagine the dial gauge was mounted 45 degrees to the axis being measured, we can see that the reading will only be half of the movement.\n\nWhen mounting to the machine to measure the Z axis travel, ensure the machine can still home safely without the dial gauge running out of travel. If this is not possible, home the machine first and then fit the dial gauge.\n\nIf you search Thingiverse or other file sharing sites, you may find a dial gauge mount for your particular machine. This can be difficult because the mount also has to suit your dial gauge. For this guide, I designed and printed my own dial gauge mount to suit a 12mm round rod base, and a printhead mount to suit the printermods.com xchange system: Dial gauge mount on Thingiverse\n\nManual movements and measurements\n\nManual movements can be made from the printer's LCD controls, by connecting via USB with Octoprint or Pronterface and using the provided interface buttons, or if you have a touch screen, with the buttons for manual 10mm movements.\n\nYou may need to home the machine first, as some firmware configurations will not allow manual movements until this takes place. As described in the previous section, it may be safer to home without the dial gauge in place.\n\nBefore measurement, we must know the range of motion of the dial gauge and mount accordingly. If the dial gauge can only move 25mm, there is no point in requesting a 30mm movement. Doing so might damage the dial gauge when it bottoms out.\n\nPosition the dial gauge so that it is part way through it's range of travel and zero the display.\n\nUse the buttons in your chosen software to move one axis a designated distance. 10mm is generally acceptable and fits within the range of motion of most dial gauges. (100mm would actually be better but is beyond the range of the dial gauge).Take note of the measurement. Reverse the movement using the opposing button and see if the machine returns back to 0.00 on the dial gauge.\n\nYou can also issue two 10mm movements and see if any error is consistent. For example, if the movement was only 9.95mm, you would expect the second movement to land at 19.90mm, maintaining a variance of 0.05mm per 10mm.\n\nHow inaccurate is too inaccurate?\n\nIn your testing, you might find the movement for each axis is off, let's say in this example by 0.05mm. Given how hard it is to get the dial gauge perfectly perpendicular to the direction of travel, this is probably well within an acceptable margin of error. Factor in the tiny movement that comes via your hands in supporting the dial gauge and you have another contributor.\n\nIt is important to remember just how small this distance is. A 0.05mm variance over a 10mm movement represents an error of only 0.5%. In many cases this would be irrelevant to the printed object. However, it is up to each individual to decide the tolerances they expect their machine to operate within and whether a course of action is required to improve this.\n\nWhat to check if your motion is not accurate\n\nBefore changing your steps per unit, it is worth remembering that these values should already be correct because they are based on the characteristics of your machine. Therefore, it is worth double checking the following aspects of the printer:\n\nBelts are adequately tensioned\n\nGrub screws inside belt pullets are tight\n\nV rollers are tensioned correctly\n\nZ leadscrews are lubricated\n\nStepper motor driver current set properly\n\nToggling features like SQUARE_WAVE_STEPPING in Marlin firmware\n\nIf the measured motion is incorrect but is also inconsistent, as in drifting further away from 0 each time it returns to the starting point, it may indicate the presence of backlash or binding in that axis. For leadscrew driven motion, an anti-backlash nut can be fitted as a potential remedy.\n\nIf everything above has been checked and you are certain your steps per unit need adjusting, then proceed to the next section.\n\nAdjusting X, Y and/or Z steps in the firmware\n\nIf you still need to adjust your steps per unit, you can use the following calculator to determine the correct value, based on your dial gauge recordings:\n\nX / Y / Z steps calculator\n\nTarget axis:\n\nX Y Z\n\nPrevious steps per unit as reported by M503:\n\nDistance requested (mm):\n\nDistance measured (mm):\n\nYour new steps should be\n\nEnter the following in the terminal:\n\nM92\n\nFollowed by M500 to save to EEPROM.\n\nM500\n\nYou may wish to repeat this test with the new X/Y/Z steps value to verify.\n\nYou can also use the LCD to set the new values and then store to EEPROM to save, although you will be limited to only one decimal place.\n\nFixing persistent dimensional accuracy after X/Y/Z steps per unit have been corrected\n\nAs we know from our earlier 20mm calibration cube test, there is more to the final printed dimensions that just the steps per unit for each axis.\n\nChanging the slicer flow rate will influence the overall dimensions, although this also has an effect on every other aspect of the finished print. One obvious area is whether there are gaps inbetween individual extrusions (flow rate too low) or the individual extrusions overlap too much and bulge (flow rate too high). Perhaps the flow rate should be used to only make very small adjustments.\n\nSome slicers have dimensional accuracy compensation. Seen below is this setting in PrusaSlicer (found in Print Settings > Advanced > Slicing):\n\nA similar feature exists in Cura (found in Shell > Horizontal expansion):\n\nExperimentation with these features would need to be undertaken to fully understand their advantages and disadvantages. For instance, increasing the X/Y measurements may fix the external dimensions but negatively impact the accuracy of printed holes.\n\nSometimes a machine can be upgraded to make it more accurate. For instance, I have a theory that using a belt pulley rather than a smooth surfaced bearing as a belt idler should have the belt ride the idler more consistently, due to the teeth of the belt deforming unevenly over the bearing surface:\n\nOne final measure, that is the least desirable, is to design parts to be printed bigger or smaller to compensate. This is a band aid approach and falls apart very quickly once we print geometry designed by other people.\n\nSpeed & Max Flow Tuning\n\nAim:\n\nTo find the maximum feedrate suitable for the outer walls, in terms of surface artefacts, flow rate and reliable extrusion.\n\nWhen required:\n\nThis is an optional step, and only applies to specific scenarios. Examples include finding a safe feedrate for a difficult to extrude flexible filament, determing the maximum reliable feedrate when trying to print faster, and tuning outer wall speed to reduce 'noise' on external surfaces.\n\nTools:\n\nTerminal software such as Pronterface or Octoprint.\n\nGcode generator on this page.\n\nInstructions on how to setup terminal software can be found here.\n\nThe speed at which our 3D printer (or any CNC machine) moves is better described as 'feedrate'. Like any speed measurement, it is a calculation of distance travelled over time. In 3D printing, the most common feedrate units are mm/sec and mm/min.\n\nMost of the time, we want to print as fast as possible, at least up to the point where print quality deteriorates beyond our personal threshold.\n\nSurface artefacts related to feedrate\n\nSome printers may have a combination of hardware and software that produces noise or surface artefacts with feedate as a factor. This is the case for the image submitted by midicdj1000, where a chnge in feedrate for the outer walls alters the pattern on this surface:\n\nThe test on this page is therefore useful for finding an ideal feedrate for outer wall surface quality.\n\nFeedrate limitations from the extruder drive and hot end\n\nThe tools on this tab will also allow you to calculate the maximum feedrate your 3D printer can move at and still maintain reliable extrusion. This relates to how quickly filament can be melted as it travels through the hot end. Once the filament cannot be melted sufficiently, it won't flow properly through the system and under extrusion or jams will occur.\n\nSometimes the ability of the heater is not the limiting factor, and instead the amount of grip and push from the extruder drive. Consider a flexible filament such as TPU. TPU doesn't need a particularly high temperature hot end to melt it properly, but many extruder drives struggle to grip and push the filament towards the hot end without it buckling and jamming. The test on this page can be used in these situations to find how fast you can print before the system breaks down.\n\nFeedrate variations and modifiers in your slicer profile\n\nIt is important to understand how feedrate is handled by the slicer software. Slicers generally have a default/base feedrate that most speed calculations are based on. Features such as perimeters, external perimeters and solid infill are reduced in speed to aid visual print quality. Features such as internal infill are sped up because they will never be seen. The image below shows examples interfaces for this in several slicers:\n\nSometimes a person will claim they can print at a certain feedrate. This is often not the whole story, as their base feedrate might be what they are talking about, but much of the print will actually be completed at a slower speed. Add in slicer features like automatic slow down for layer cooling and firmware settings like acceleration, jerk and junction deviation and there is quite a bit of deviation.\n\nThe philosophy of this test - M220\n\nThis feedrate test tower is sliced in vase mode. This is for several reasons:\n\nAfter the first layer, a vase mode print only has a single type of feature: external perimeter. This makes it clear what the actual feedrate is for each segment of the tower.\n\nVase mode prints have continuous extrusion after the sold base infill is completed and therefore don't require retraction. This means we will not be confused by artefacts introduced from retractions and layer changes.\n\nVase mode prints don't have any travel moves after the solid bottom layers are complete. This means we can increase the print feedrate without worrying about the travel feedrate being proportionally increased to a dangerous value.\n\nBecause of the above reasons, vase mode makes it ideal to use the M220 feedrate modifier gcode to alter the feedrate for each segment of the test. This is supported in Marlin, Klipper and RepRapFirmware. Changing your feedrate mid print from the printer's LCD controls or web inteface uses this feature of the firmware. This test will insert M220 commands into the gcode for speed changes on the fly.\n\nM220 can be a double edge sword because it also affects the speed of retraction movements. If you are performing something like a retraction test, M220 is not suitable. In this case, however, due to the use of vase mode, M220 is a simple way for us to start with a slower feedrate and easily increase it throughout the print at set height intervals.\n\nMaximum feedrate and acceleration limits in firmware\n\nEvery firmware has a safety feature to limit the feedrate and acceleration to user set maximums. This prevents a typo in the slicer or terminal command from producing a move so fast it damages the printer. Use the following instructions to check what feedrate/acceleration limits are in place for your firmware and temporarily raise them if necessary.\n\nPlease note that for this test, you would typically only alter feedrate limits. Acceleration limits are also covered here for completeness.\n\nMarlin\n\nMarlin limits the maximum feedrate with the M203 gcode.\n\nYou can enter M203 into a terminal and the maximum set feedrates will be reported.\n\nIf you wish to raise these limits, re-enter 203 and use the X and Y arguments to set the max feedrate, typically in mm/sec. eg:\n\nM203 X500 Y500\n\nwhere 500 is a feedrate of 500 mm/sec.\n\nMarlin limits the acceleration with the M201 and M204 gcodes.\n\nYou can enter M503 into a terminal and these values will be reported.\n\nM204 sets target acceleration for print, retraction and travel moves, however M201 values impose limits per axis. For example, if you set the M204 print acceleration to 1000 but the M201 Y acceleration limit is only 800, then the M204 P value will be capped at 800 for Y while printing. If you have a bed slinger with a heavy y axis, M201 can be used in this way to combat ringing.\n\nIf you wish this changes to be permanent, save to EEPROM with M500.\n\nKlipper\n\nKlipper limits the maximum feedrate in printer.cfgwith MAX_VELOCITY.\n\nYou can change this value and restart Klipper to raise it, or temporarily override it by entering:\n\nSET_VELOCITY_LIMIT VELOCITY=500\n\nin the terminal where 500 is a max feedrate of 500 mm/sec.\n\nKlipper limits acceleration in printer.cfgwith MAX_ACCEL and MAX_ACCEL_TO_DECEL.\n\nYou can change these values and restart Klipper to raise them, or temporarily override by entering:\n\nSET_VELOCITY_LIMIT ACCEL=600\n\nor\n\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL=600\n\nin the terminal where 600 is a max acceleration/accel to decel of 600 mm/sec/sec.\n\nRepRapFirmware\n\nRRF limits the maximum feedrate with the M203 gcode.\n\nYou can see your current value in config.g under M203.\n\nIf you wish to raise the limits, edit the X and Y arguments for M203 to set the max feedrate. eg:\n\nM201 X3000 Y3000\n\nRemember that RRF uses mm/min instead of mm/sec, so this example uses a value of 500 mm/sec. Convert from mm/sec to mm/min by multiplying by 60. When editing config.g, do not omit the arguments for Z and E. Only X and Y potentially need modifiying for this test so leave the values for Z and E untouched.\n\nLater versions of RRF also use the I argument to set the minimum overall feedrate. It may be necessary to lower this value if you want a particularly slow feedrate for segments of the tuning tower.\n\nRRF limits acceleration with the M201 and M204 gcodes.\n\nYou can see your current value in config.g under M201 and M204.\n\nM204 sets target acceleration for print, and travel moves, however M201 values impose limits per axis. For example, if you set the M204 print acceleration to 1000 but the M201 Y acceleration limit is only 800, then the M204 P value will be capped at 800 for Y while printing. If you have a bed slinger with a heavy y axis, M201 can be used in this way to combat ringing.\n\nFor acceleration, RRF uses mm/sec, despite using mm/min for feedrate. When editing config.g for M201, be sure to include values for each axis (typically X, Y, Z and E). When editing config.g for M204, be sure to include values for both P and T.\n\nSpeed/feedrate/Max flow tuning tower generator\n\nThe STL for this test is available here: speedtower.stl\n\nInterpreting Results:\n\nPlease use the following video as a guide to this test:\n\nYou may wish to stop the print early if it is clear extrusion has ceased or become unreliable. This may prevent the need for disassembly of the extruder to clear the blockage.\n\nSome slicers support using the calculated volumetric flow rate above as a hard limit. For those that don't, you can use the following calculator to reverse engineer a maximum feedrat for your preferred extrusion width and layer height:\n\nInput setting: Layer height (mm): Quality > Layer height Layer > Primary layer height Print settings > Layers and perimeters > Layer height > Layer height Print settings > Slicing > Layer height > Base Layer height Template > Layer > General > Layer height Extrusion width (mm): Quality > Line width Extruder > Extrusion width Print settings > Advanced > Extrusion width > Default extrusion width Print settings > Width & Flow > Extrusion width > default Template > Extruder > General > Extrusion width Volumetric flow (mm³/sec): Taken from the form above after testing when extrusion breaks down\n\nYour maximum reliable XY feedrate is 52.08 mm per second."
    }
}