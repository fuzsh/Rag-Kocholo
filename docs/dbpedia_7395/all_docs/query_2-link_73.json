{
    "id": "dbpedia_7395_2",
    "rank": 73,
    "data": {
        "url": "https://docs.flutter.dev/cookbook/plugins/picture-using-camera",
        "read_more_link": "",
        "language": "en",
        "title": "Take a picture using the camera",
        "top_image": "https://docs.flutter.dev/assets/images/flutter-logo-sharing.png",
        "meta_img": "https://docs.flutter.dev/assets/images/flutter-logo-sharing.png",
        "images": [
            "https://docs.flutter.dev/assets/images/branding/flutter/logo+text/horizontal/default.svg",
            "https://docs.flutter.dev/assets/images/branding/flutter/logo/flutter-mono-81x100.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "How to use a camera plugin on mobile.",
        "meta_lang": "en",
        "meta_favicon": "/assets/images/branding/flutter/icon/64.png",
        "meta_site_name": "",
        "canonical_link": "https://docs.flutter.dev/cookbook/plugins/picture-using-camera",
        "text": "Many apps require working with the device's cameras to take photos and videos. Flutter provides the camera plugin for this purpose. The camera plugin provides tools to get a list of the available cameras, display a preview coming from a specific camera, and take photos or videos.\n\nThis recipe demonstrates how to use the camera plugin to display a preview, take a photo, and display it using the following steps:\n\nAdd the required dependencies.\n\nGet a list of the available cameras.\n\nCreate and initialize the CameraController.\n\nUse a CameraPreview to display the camera's feed.\n\nTake a picture with the CameraController.\n\nDisplay the picture with an Image widget.\n\n1. Add the required dependencies\n\n#\n\nTo complete this recipe, you need to add three dependencies to your app:\n\ncamera\n\nProvides tools to work with the cameras on the device.\n\npath_provider\n\nFinds the correct paths to store images.\n\npath\n\nCreates paths that work on any platform.\n\nTo add the packages as dependencies, run flutter pub add:\n\n2. Get a list of the available cameras\n\n#\n\nNext, get a list of available cameras using the camera plugin.\n\n3. Create and initialize the CameraController\n\n#\n\nOnce you have a camera, use the following steps to create and initialize a CameraController. This process establishes a connection to the device's camera that allows you to control the camera and display a preview of the camera's feed.\n\nCreate a StatefulWidget with a companion State class.\n\nAdd a variable to the State class to store the CameraController.\n\nAdd a variable to the State class to store the Future returned from CameraController.initialize().\n\nCreate and initialize the controller in the initState() method.\n\nDispose of the controller in the dispose() method.\n\n4. Use a CameraPreview to display the camera's feed\n\n#\n\nNext, use the CameraPreview widget from the camera package to display a preview of the camera's feed.\n\nUse a FutureBuilder for exactly this purpose.\n\n5. Take a picture with the CameraController\n\n#\n\nYou can use the CameraController to take pictures using the takePicture() method, which returns an XFile, a cross-platform, simplified File abstraction. On both Android and IOS, the new image is stored in their respective cache directories, and the path to that location is returned in the XFile.\n\nIn this example, create a FloatingActionButton that takes a picture using the CameraController when a user taps on the button.\n\nTaking a picture requires 2 steps:\n\nEnsure that the camera is initialized.\n\nUse the controller to take a picture and ensure that it returns a Future<XFile>.\n\nIt is good practice to wrap these operations in a try / catch block in order to handle any errors that might occur.\n\n6. Display the picture with an Image widget\n\n#\n\nIf you take the picture successfully, you can then display the saved picture using an Image widget. In this case, the picture is stored as a file on the device.\n\nTherefore, you must provide a File to the Image.file constructor. You can create an instance of the File class by passing the path created in the previous step.\n\nComplete example\n\n#"
    }
}