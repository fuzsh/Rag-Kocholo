{
    "id": "dbpedia_7395_2",
    "rank": 38,
    "data": {
        "url": "https://docs.docker.com/desktop/settings/mac/",
        "read_more_link": "",
        "language": "en",
        "title": "Change Docker Desktop settings on Mac",
        "top_image": "https://docs.docker.com/assets/images/thumbnail.webp",
        "meta_img": "https://docs.docker.com/assets/images/thumbnail.webp",
        "images": [
            "https://docs.docker.com/desktop/images/whale-x.svg",
            "https://docs.docker.com/desktop/images/notifications.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "settings",
            "preferences",
            "proxy",
            "file",
            "sharing",
            "resources",
            "kubernetes",
            "Docker",
            "Desktop",
            "Mac"
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2024-08-15T08:59:37+01:00",
        "summary": "",
        "meta_description": "Change your Docker Desktop settings on Mac",
        "meta_lang": "en",
        "meta_favicon": "https://docs.docker.com/favicons/docs@2x.ico",
        "meta_site_name": "Docker Documentation",
        "canonical_link": "https://docs.docker.com/desktop/settings/mac/",
        "text": "This page provides information on how to configure and manage your Docker Desktop for Mac settings.\n\nTo navigate to Settings either:\n\nSelect the Docker menu and then Settings\n\nSelect the Settings icon from the Docker Dashboard.\n\nYou can also locate the settings.json file at ~/Library/Group Containers/group.com.docker/settings.json.\n\nGeneral\n\nOn the General tab, you can configure when to start Docker and specify other settings:\n\nStart Docker Desktop when you sign in to your computer. Select to automatically start Docker Desktop when you sign in to your machine.\n\nOpen Docker Dashboard when Docker Desktop starts. Select to automatically open the dashboard when starting Docker Desktop.\n\nChoose theme for Docker Desktop. Choose whether you want to apply a Light or Dark theme to Docker Desktop. Alternatively you can set Docker Desktop to Use system settings.\n\nChoose container terminal. Determines which terminal is launched when opening the terminal from a container. If you choose the integrated terminal, you can run commands in a running container straight from the Docker Dashboard. For more information, see Explore containers.\n\nEnable Docker Debug by default. Check this option to use Docker Debug by default when accessing the integrated terminal. For more information, see Explore containers.\n\nInclude VM in Time Machine backups. Select to back up the Docker Desktop virtual machine. This option is turned off by default.\n\nUse containerd for pulling and storing images. Turns on the containerd image store. This brings new features like faster container startup performance by lazy-pulling images, and the ability to run Wasm applications with Docker. For more information, see containerd image store.\n\nUse Virtualization framework. Select to allow Docker Desktop to use the virtualization.framework instead of the hypervisor.framework.\n\nTip\n\nTurn this setting on to make Docker Desktop run faster.\n\nChoose file sharing implementation for your containers. Choose whether you want to share files using VirtioFS, gRPC FUSE, or osxfs. VirtioFS is only available for macOS versions 12.5 and above, and is turned on by default.\n\nTip\n\nUse VirtioFS for speedy file sharing. VirtioFS has reduced the time taken to complete filesystem operations by up to 98%\n\nUse Rosetta for x86_64/amd64 emulation on Apple Silicon. Turns on Rosetta to accelerate x86/AMD64 binary emulation on Apple Silicon. This option is only available if you have turned on Virtualization framework in the General settings tab. You must also be on macOS Ventura or later.\n\nSend usage statistics. Select so Docker Desktop sends diagnostics, crash reports, and usage data. This information helps Docker improve and troubleshoot the application. Clear the checkbox to opt out. Docker may periodically prompt you for more information.\n\nUse Enhanced Container Isolation. Select to enhance security by preventing containers from breaching the Linux VM. For more information, see Enhanced Container Isolation.\n\nNote\n\nThis setting is only available if you are signed in to Docker Desktop and have a Docker Business subscription.\n\nShow CLI hints. Displays CLI hints and tips when running Docker commands in the CLI. This is turned on by default. To turn CLI hints on or off from the CLI, set DOCKER_CLI_HINTS to true or false respectively.\n\nSBOM Indexing. When this option is enabled, inspecting an image in Docker Desktop shows a Start analysis button that, when selected, analyzes the image with Docker Scout.\n\nEnable background SBOM indexing. When this option is enabled, Docker Scout automatically analyzes images that you build or pull.\n\nAutomatically check configuration. Regularly checks your configuration to ensure no unexpected changes have been made by another application.\n\nDocker Desktop checks if your setup, configured during installation, has been altered by external apps like Orbstack. Docker Desktop checks:\n\nThe symlinks of Docker binaries to /usr/local/bin.\n\nThe symlink of the default Docker socket. Additionally, Docker Desktop ensures that the context is switched to desktop-linux on startup.\n\nYou are notified if changes are found and are able to restore the configuration directly from the notification. For more information, see the FAQs.\n\nResources\n\nThe Resources tab allows you to configure CPU, memory, disk, proxies, network, and other resources.\n\nAdvanced\n\nOn the Advanced tab, you can limit resources available to the Docker Linux VM.\n\nAdvanced settings are:\n\nCPU limit. Specify the maximum number of CPUs to be used by Docker Desktop. By default, Docker Desktop is set to use all the processors available on the host machine.\n\nMemory limit. By default, Docker Desktop is set to use up to 50% of your host's memory. To increase the RAM, set this to a higher number; to decrease it, lower the number.\n\nSwap. Configure swap file size as needed. The default is 1 GB.\n\nVirtual disk limit. Specify the maximum size of the disk image.\n\nDisk image location. Specify the location of the Linux volume where containers and images are stored.\n\nYou can also move the disk image to a different location. If you attempt to move a disk image to a location that already has one, you are asked if you want to use the existing image or replace it.\n\nTip\n\nIf you feel Docker Desktop starting to get slow or you're running multi-container workloads, increase the memory and disk image space allocation\n\nResource Saver. Enable or disable Resource Saver mode, which significantly reduces CPU and memory utilization on the host by automatically turning off the Linux VM when Docker Desktop is idle (i.e., no containers are running).\n\nYou can also configure the Resource Saver timeout which indicates how long should Docker Desktop be idle before Resource Saver mode kicks in. Default is 5 minutes.\n\nNote\n\nExit from Resource Saver mode occurs automatically when containers run. Exit may take a few seconds (~3 to 10 secs) as Docker Desktop restarts the Linux VM.\n\nFile sharing\n\nUse File sharing to allow local directories on your machine to be shared with Linux containers. This is especially useful for editing source code in an IDE on the host while running and testing the code in a container.\n\nSynchronized file shares\n\nSynchronized file shares is an alternative file sharing mechanism that provides fast and flexible host-to-VM file sharing, enhancing bind mount performance through the use of synchronized filesystem caches. Available with Pro, Team, and Business subscriptions.\n\nTo learn more, see Synchronized file share.\n\nVirtual file shares\n\nBy default the /Users, /Volumes, /private, /tmp and /var/folders directory are shared. If your project is outside this directory then it must be added to the list, otherwise you may get Mounts denied or cannot start service errors at runtime.\n\nFile share settings are:\n\nAdd a Directory. Select + and navigate to the directory you want to add.\n\nRemove a Directory. Select - next to the directory you want to remove\n\nApply & Restart makes the directory available to containers using Docker's bind mount (-v) feature.\n\nTips on shared folders, permissions, and volume mounts\n\nShare only the directories that you need with the container. File sharing introduces overhead as any changes to the files on the host need to be notified to the Linux VM. Sharing too many files can lead to high CPU load and slow filesystem performance.\n\nShared folders are designed to allow application code to be edited on the host while being executed in containers. For non-code items such as cache directories or databases, the performance will be much better if they are stored in the Linux VM, using a data volume (named volume) or data container.\n\nIf you share the whole of your home directory into a container, MacOS may prompt you to give Docker access to personal areas of your home directory such as your Reminders or Downloads.\n\nBy default, Mac file systems are case-insensitive while Linux is case-sensitive. On Linux, it is possible to create two separate files: test and Test, while on Mac these filenames would actually refer to the same underlying file. This can lead to problems where an app works correctly on a developer's machine (where the file contents are shared) but fails when run in Linux in production (where the file contents are distinct). To avoid this, Docker Desktop insists that all shared files are accessed as their original case. Therefore, if a file is created called test, it must be opened as test. Attempts to open Test will fail with the error \"No such file or directory\". Similarly, once a file called test is created, attempts to create a second file called Test will fail.\n\nFor more information, see Volume mounting requires file sharing for any project directories outside of /Users\n\nProxies\n\nDocker Desktop on Mac supports the use of HTTP/HTTPS and SOCKS5 proxies.\n\nHTTP/HTTPS proxies can be used when:\n\nSigning in to Docker\n\nPulling or pushing images\n\nFetching artifacts during image builds\n\nContainers interact with the external network\n\nScanning images\n\nIf the host uses a HTTP/HTTPS proxy configuration (static or via Proxy Auto-Configuration (PAC)), Docker Desktop reads this configuration and automatically uses these settings for signing in to Docker, for pulling and pushing images, and for container Internet access. If the proxy requires authorization then Docker Desktop dynamically asks the developer for a username and password. All passwords are stored securely in the OS credential store. Note that only the Basic proxy authentication method is supported so we recommend using an https:// URL for your HTTP/HTTPS proxies to protect passwords while in transit on the network. Docker Desktop supports TLS 1.3 when communicating with proxies.\n\nTo set a different proxy for Docker Desktop, turn on Manual proxy configuration and enter a single upstream proxy URL of the form http://proxy:port or https://proxy:port.\n\nTo prevent developers from accidentally changing the proxy settings, see Settings Management.\n\nThe HTTPS proxy settings used for scanning images are set using the HTTPS_PROXY environment variable.\n\nNote\n\nIf you are using a PAC file hosted on a web server, make sure to add the MIME type application/x-ns-proxy-autoconfig for the .pac file extension on the server or website. Without this configuration, the PAC file may not be parsed correctly.\n\nNetwork\n\nDocker Desktop uses a private IPv4 network for internal services such as a DNS server and an HTTP proxy. In case Docker Desktop's choice of subnet clashes with IPs in your environment, you can specify a custom subnet using the Network setting.\n\nYou can also select the Use kernel networking for UDP setting. This lets you use a more efficient kernel networking path for UDP. This may not be compatible with your VPN software.\n\nDocker Engine\n\nThe Docker Engine tab allows you to configure the Docker daemon used to run containers with Docker Desktop.\n\nYou configure the daemon using a JSON configuration file. Here's what the file might look like:\n\nYou can find this file at $HOME/.docker/daemon.json. To change the configuration, either edit the JSON configuration directly from the dashboard in Docker Desktop, or open and edit the file using your favorite text editor.\n\nTo see the full list of possible configuration options, see the dockerd command reference.\n\nSelect Apply & Restart to save your settings and restart Docker Desktop.\n\nBuilders\n\nIf you have turned on the Docker Desktop Builds view, you can use the Builders tab to inspect and manage builders in the Docker Desktop settings.\n\nInspect\n\nTo inspect builders, find the builder that you want to inspect and select the expand icon. You can only inspect active builders.\n\nInspecting an active builder shows:\n\nBuildKit version\n\nStatus\n\nDriver type\n\nSupported capabilities and platforms\n\nDisk usage\n\nEndpoint address\n\nSelect a different builder\n\nThe Selected builder section displays the selected builder. To select a different builder:\n\nFind the builder that you want to use under Available builders\n\nOpen the drop-down menu next to the builder's name.\n\nSelect Use to switch to this builder.\n\nYour build commands now use the selected builder by default.\n\nCreate a builder\n\nTo create a builder, use the Docker CLI. See Create a new builder\n\nRemove a builder\n\nYou can remove a builder if:\n\nThe builder isn't your selected builder\n\nThe builder isn't associated with a Docker context.\n\nTo remove builders associated with a Docker context, remove the context using the docker context rm command.\n\nTo remove a builder:\n\nFind the builder that you want to remove under Available builders\n\nOpen the drop-down menu.\n\nSelect Remove to remove this builder.\n\nIf the builder uses the docker-container or kubernetes driver, the build cache is also removed, along with the builder.\n\nStop and start a builder\n\nBuilders that use the docker-container driver run the BuildKit daemon in a container. You can start and stop the BuildKit container using the drop-down menu.\n\nRunning a build automatically starts the container if it's stopped.\n\nYou can only start and stop builders using the docker-container driver.\n\nKubernetes\n\nDocker Desktop includes a standalone Kubernetes server, so that you can test deploying your Docker workloads on Kubernetes. To turn on Kubernetes support and install a standalone instance of Kubernetes running as a Docker container, select Enable Kubernetes.\n\nSelect Show system containers (advanced) to view internal containers when using Docker commands.\n\nSelect Reset Kubernetes cluster to delete all stacks and Kubernetes resources.\n\nFor more information about using the Kubernetes integration with Docker Desktop, see Deploy on Kubernetes.\n\nThe Software Updates tab notifies you of any updates available to Docker Desktop. When there's a new update, you can choose to download the update right away, or select the Release Notes option to learn what's included in the updated version.\n\nTurn off the check for updates by clearing the Automatically check for updates check box. This disables notifications in the Docker menu and the notification badge that appears on the Docker Dashboard. To check for updates manually, select the Check for updates option in the Docker menu.\n\nTo allow Docker Desktop to automatically download new updates in the background, select Always download updates. This downloads newer versions of Docker Desktop when an update becomes available. After downloading the update, select Apply and Restart to install the update. You can do this either through the Docker menu or in the Updates section in the Docker Dashboard.\n\nExtensions\n\nUse the Extensions tab to:\n\nEnable Docker Extensions\n\nAllow only extensions distributed through the Docker Marketplace\n\nShow Docker Extensions system containers\n\nFor more information about Docker extensions, see Extensions.\n\nFeatures in development\n\nOn the Feature control tab you can control your settings for Beta features and Experimental features.\n\nYou can also sign up to the Developer Preview program from the Features in development tab.\n\nBeta features\n\nBeta features provide access to future product functionality. These features are intended for testing and feedback only as they may change between releases without warning or remove them entirely from a future release. Beta features must not be used in production environments. Docker doesn't offer support for beta features.\n\nExperimental features\n\nOn the Experimental features tab, you have the option to allow feature flags. These are features that Docker is currently experimenting with. This is switched on by default.\n\nThese features are intended for testing and feedback only as they may change between releases without warning or remove them entirely from a future release. Docker doesn't offer support for experimental features.\n\nNotifications\n\nUse the Notifications tab to turn on or turn off notifications for the following events:\n\nStatus updates on tasks and processes\n\nDocker announcements\n\nDocker surveys\n\nBy default, all notifications are turned on. You'll always receive error notifications and notifications about new Docker Desktop releases and updates.\n\nNotifications momentarily appear in the lower-right of the Docker Dashboard and then move to the Notifications drawer. To open the Notifications drawer, select .\n\nAdvanced\n\nOn the Advanced tab, you can reconfigure your initial installation settings:\n\nChoose how to configure the installation of Docker's CLI tools.\n\nSystem: Docker CLI tools are installed in the system directory under /usr/local/bin\n\nUser: Docker CLI tools are installed in the user directory under $HOME/.docker/bin. You must then add $HOME/.docker/bin to your PATH. To add $HOME/.docker/bin to your path:\n\nOpen your shell configuration file. This is ~/.bashrc if you're using a bash shell, or ~/.zshrc if you're using a zsh shell.\n\nCopy and paste the following:\n\n$ export PATH=$PATH:~/.docker/bin\n\nSave and the close the file. Restart your shell to apply the changes to the PATH variable.\n\nEnable default Docker socket (Requires password). Creates /var/run/docker.sock which some third party clients may use to communicate with Docker Desktop. For more information, see permission requirements for macOS.\n\nEnable privileged port mapping (Requires password). Starts the privileged helper process which binds the ports that are between 1 and 1024. For more information, see permission requirements for macOS.\n\nFor more information on each configuration and use case, see Permission requirements."
    }
}