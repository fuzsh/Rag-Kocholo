{
    "id": "dbpedia_7395_3",
    "rank": 47,
    "data": {
        "url": "https://superuser.com/questions/100288/how-can-i-check-the-integrity-of-a-video-file-avi-mpeg-mp4",
        "read_more_link": "",
        "language": "en",
        "title": "How can I check the integrity of a video file (avi, mpeg, mp4...)?",
        "top_image": "https://cdn.sstatic.net/Sites/superuser/Img/apple-touch-icon@2.png?v=e869e4459439",
        "meta_img": "https://cdn.sstatic.net/Sites/superuser/Img/apple-touch-icon@2.png?v=e869e4459439",
        "images": [
            "https://cdn.sstatic.net/Sites/superuser/Img/logo.svg?v=4bc8a703ebac",
            "https://www.gravatar.com/avatar/480f7f998a2d4bdca2b2e86b685f367b?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/dc3ab16e835bc43631591ae68dfad659?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/89d887b50262bbe10225d36d974fdb0c?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/132a61a5780a1a9ef3187a83e24ae363?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/dadc8b5d4f7efd296eaf75451ae4c50e?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/R6AiO.jpg?s=64",
            "https://www.gravatar.com/avatar/4ff92cbebd77037441c3e2236f2d54af?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/ecc1ec298b1a65ddaca2a9daeb1d4d29?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/c3bd485aef7d1d628b074fdb100f0af0?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/Z8orf.jpg?s=64",
            "https://www.gravatar.com/avatar/824c15f10a9c6eb42b7979c1acfd6609?s=64&d=identicon&r=PG",
            "https://www.gravatar.com/avatar/7393e7320ac1e18d75db87b3afd77923?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/60212ac47fb255cc994224fc2d2d041b?s=64&d=identicon&r=PG",
            "https://lh4.googleusercontent.com/-zP9HjgFRmbc/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7q7kRFt6LC1YrI4UOwGDbnQUE1xzA/mo/photo.jpg?sz=64",
            "https://i.sstatic.net/nS6nS.jpg?s=64",
            "https://i.sstatic.net/IvPNx.png?s=64",
            "https://www.gravatar.com/avatar/2d61e85745fa7781a8984d3c7c1999c4?s=64&d=identicon&r=PG",
            "https://superuser.com/posts/100288/ivc/6e48?prg=38e92596-656c-425d-a8e1-1843cfbb15f9"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-01-25T12:54:46",
        "summary": "",
        "meta_description": "This title could be somewhat misleading, so let me explain ...\n\nI'm downloading a video file ... mpeg, avi - being one of the popular formats. Now, if I am downloading it, and the download breaks i...",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/superuser/Img/favicon.ico?v=4852d6fb3f5d",
        "meta_site_name": "Super User",
        "canonical_link": "https://superuser.com/questions/100288/how-can-i-check-the-integrity-of-a-video-file-avi-mpeg-mp4",
        "text": "You can use a feature in ffmpeg video converter: if you will specify it to recode video to nothing it will just read input file and report any errors that will appear. This is a very fast process because video frames are just being read, checked and silently dropped.\n\nExample command line: (for Linux)\n\nffmpeg -v error -i file.avi -f null - 2>error.log\n\n-v error means a certain level of verbosity (to show some errors that are normally hidden because they don't affect playability a much).\n\nYou will get a full error log with some generic information about file ffmpeg will output, so this will probably require your attention, through filters can be written to perform batch check of similar files.\n\nFFmpeg is also available for Windows here. The command line will be almost identical with an exception of stderr redirect:\n\nffmpeg.exe -v error -i file.avi -f null - >error.log 2>&1\n\nI liked idea of using ffmpeg -f null above, but I'd actually like to automate process of using that output. In particular, common scenario I have with my music video collection is that I have few clips which have same resolution, and I'd like to diff verification logs for those files to remove ones broken the most.\n\nUnfortunately, ffmpeg so far doesn't have a way to disable its interactive mode, which outputs noise for this case of usage. I ended up hacking simple wrapper script to do filtering:\n\n#!/usr/bin/env python import sys import os import re t = os.popen('ffmpeg -v 5 -i \"%s\" -f null - 2>&1' % sys.argv[1]).read() t = re.sub(r\"frame=.+?\\r\", \"\", t) t = re.sub(r\"\\[(.+?) @ 0x.+?\\]\", \"[\\\\1]\", t) print t\n\nExample output:\n\n[mpeg1video]ac-tex damaged at 21 17 [mpeg1video]Warning MVs not available [mpeg1video]concealing 22 DC, 22 AC, 22 MV errors [mpeg1video]Warning MVs not available [mpeg1video]concealing 22 DC, 22 AC, 22 MV errors [mpeg1video]ac-tex damaged at 13 9\n\nFor windows, You can 'batch' check integrity for videos on current folder and all subfolders with this bat file:\n\ncheckvideo.bat\n\n@echo off set \"filtro=%1\" if [%filtro%]==[] ( set \"filtro=*.mp4\" ) for /R %%a in (%filtro%) do call :doWork \"%%a\" PAUSE exit /B :doWork C:\\ffmpeg\\bin\\ffmpeg.exe -v error -i %1 -f null - > \"%~1.log\" 2>&1\n\nUse:\n\ncheckvideo.bat [filter]\n\nIf you don't give one filter, will get '*.mp4'.\n\nSamples: checkvideo.bat checkvideo.bat *.avi\n\nSetup: Download FFmpeg for Windows from here: https://ffmpeg.zeranoe.com/builds/ and unzip them Change C:\\ffmpeg\\bin\\ in the bat file for the path where you have unzipped ffmpeg Put checkvideo.bat on a folder included in the Path or add his folder to Path environment variable\n\nUPDATE: As of September 18,2020, the above link is no longer valid so Windows users can download FFmpeg form here or here\n\nThis one liner using ffprobe checks each input and returns either OK or ERROR, followed by the name of the file.\n\nfor i in *; do ffprobe -v error \"$i\" 2>/dev/null && echo \"OK => '$i'\" || echo \"ERROR => '$i'\"; done\n\nI created a fake .mp4 file by running touch video.mp4 to simulate a corrupted video. Result:\n\nOK => 'How To Be A Gardener 1x1 - Know Your Plot.mp4' OK => 'How To Be A Gardener 1x2 - Understand Plants.mp4' OK => 'How To Be A Gardener 1x3 - Planting Schemes & Themes.mp4' OK => 'How To Be A Gardener 1x4 - Practical Planting.mp4' OK => 'How To Be A Gardener 1x5 - Caring For Your Garden.mp4' OK => 'How To Be A Gardener 1x6 - Problem Solving.mp4' OK => 'How To Be A Gardener 1x7 - The Productive Garden.mp4' OK => 'How To Be A Gardener 1x8 - The Gardening Year.mp4' ERROR => 'video.mp4'\n\nThe actual ffprobe errors can be shown by removing the 2>/dev/null redirection:\n\nfor i in *; do ffprobe -v error \"$i\" && echo \"OK => '$i'\" || echo \"ERROR => '$i'\"; done\n\nOK => 'How To Be A Gardener 1x1 - Know Your Plot.mp4' OK => 'How To Be A Gardener 1x2 - Understand Plants.mp4' OK => 'How To Be A Gardener 1x3 - Planting Schemes & Themes.mp4' OK => 'How To Be A Gardener 1x4 - Practical Planting.mp4' OK => 'How To Be A Gardener 1x5 - Caring For Your Garden.mp4' OK => 'How To Be A Gardener 1x6 - Problem Solving.mp4' OK => 'How To Be A Gardener 1x7 - The Productive Garden.mp4' OK => 'How To Be A Gardener 1x8 - The Gardening Year.mp4' [mov,mp4,m4a,3gp,3g2,mj2 @ 0x559de0c58900] moov atom not found video.mp4: Invalid data found when processing input ERROR => 'video.mp4'\n\nAdjust the for loop to check only specific extensions or files:\n\nfor i in *.mkv; do ...\n\nfor i in *S01E*.mp4; do ...\n\nAlthough this is an old post, and I'm sure there's other ways to valid video files now. However, for a full video file check, you can use mplayer.exe.\n\nUsing the below (.bat) script will recursively check video files and save validated ones in a integritychecked.log file (to skip next time its run).\n\nif not \"%1\" equ \"\" ( pushd %1 ) else ( pushd \"%~dp0\" ) setlocal EnableDelayedExpansion for /F \"tokens=1,2 delims=#\" %%a in ('\"prompt #$H#$E# & echo on & for %%b in (1) do rem\"') do ( set \"DEL=%%a\" ) echo This script with validate video files in the folder/sub-folders. Please ensure mplayer.exe is accessible in PATH. echo. echo Either run this script from the desired (parent) directory or specify the directory when running this script. eg checkvideo.bat <full path> echo. pause echo. REM Append date and time to integritychecked.log file for /f \"tokens=1-9 delims=/:. \" %%d in (\"%date% %time: =0%\") do echo Started: %%g%%f%%e_%%h%%i%%j>>integritychecked.log FOR /F \"delims=*\" %%G in ('dir /b /s *.mkv *.mp4 *.mpg *.mpeg *.xvid *.webm *.m2v *.m4v *.3gp *.3g2 *.avi *.mov *.flv *.wmv') DO ( REM Confirm if already checked or not from log file set found=0 for /F \"usebackq tokens=*\" %%s in (\"integritychecked.log\") do ( if %%G equ %%s ( set found=1 REM echo \"FOUND = %%G = %%s\" ) ) if !found! equ 0 ( echo Verifying \"%%G\" mplayer -tsprobe 10000000 -benchmark -forcedsubsonly -mc 0 -nosound -nosub -noautosub -vo null \"%%G\" 2>\"%%G.log\" REM ffmpeg -v error -i \"%%G\" -map 0:1 -f null - 2>\"%%G.log\" FOR %%F in (\"%%G.log\") DO ( if %%~zF equ 0 ( del %%F call :colour 0a \"Video is good\" echo. echo. ) else ( call :colour 0c \"Error in video file:\" echo. type %%F call :colour 0e \"This can be found in the video's .log file\" echo. echo. ) ) REM Save entry to log file (as checked) echo %%G>>integritychecked.log ) else ( echo already verified \"%%G\"...skipping. ) ) call :colour 0a \"Verifying complete!\" && echo. pause cd %~p0 exit /b :colour set \"param=^%~2\" ! set \"param=!param:\"=\\\"!\" rem Prepare a file \"X\" with only one dot <nul > X set /p \".=.\" findstr /p /A:%1 \".\" \"!param!\\..\\X\" nul <nul set /p \".=%DEL%%DEL%%DEL%%DEL%%DEL%%DEL%%DEL%\" rem Delete \"X\" file del X exit /b\n\nI really liked the ffmpeg version provided by How can I check the integrity of a video file (avi, mpeg, mp4...)? but I wanted a version that would only tell me if ffmpeg failed to play the video in a way that stopped it (I can deal with frame drops), and I wanted it to be linux based. I came to the solution below. I also wanted more information about what was happening while it was scanning, so I opted for scanned/total/errored outputting whenever a file starts scanning.\n\n#!/bin/bash # Name: mediaCheck # Purpose: Confirm all media in a path can be played back using ffmpeg # Requires: # * ffmpeg in $PATH # * date in $PATH # * find in $PATH function checkReqs { # checks requirements for the script requires=\"ffmpeg date find\" re=0 for i in $requires; do if ! which $i > /dev/null; then ((re++)) echo \"$i is required in path for this script\" fi done if [ \"$re\" -gt 0 ]; then echo \"Requirements not met\" exit 1 fi } function pathCheck { # if there isn't a path, use pwd, otherwise clean up whatever is provided. if [ -z \"$1\" ]; then lPath=mediaCheck.log cPath=$(pwd) else cPath=$(readlink -f $1) lPath=$1 fi } function pdate { # my prefered date formatting date +%FT%H:%M:%S } function checkMedia { # the actual ffmpeg command ffmpeg -v error -i $1 -f null - &> \"$1.log\" } function findItems { # our main loops # first a set of common file types for mtype in flv avi m4v mkv mp4; do c=0; e=0 # Get a total per file type ttotal=$(find $1 -type f -name \\*.$mtype | wc -l) # then the actual lookup and check for i in $(find $1 -type f -name \\*.$mtype); do echo -ne \"$(pdate) $c out of $ttotal $mtype files checked with $e errors.\\r\" ((c++)) # check media, and if we fail, increment error counter. if ! checkMedia \"$i\" ; then ((e++)) echo \"$i failed\" >> $lPath.log fi done echo \"$(pdate) $c out of $ttotal $mtype files checked with $e errors.\" unset c e done } # set blank cpath cPath='' # uncomment the line below if this script isn't behaving as expected # set -x # Check requirements before anything else checkReqs # Then generate a path pathCheck $1 # Make sure we don't stumble on names with spaces IFS=$'\\n' echo \"$(pdate) scan started.\" findItems $cPath echo \"$(pdate) scan complete.\"\n\nThe issue with the other answer using ffmpeg to recode to null format is that it takes really a long time. Especially, if you want to check multiple files in a directory.\n\nA quick way would be to generate thumbnails for all the videos, and see where thumbnail generation fails.\n\nfind . -iname \"*.mp4\" | while read -r line; do line=`echo \"$line\" | sed -r 's/^\\W+//g'`; echo 'HERE IT IS ==>' \"$line\"; if ffmpeg -i \"$line\" -t 2 -r 0.5 %d.jpg; then echo \"DONE for\" \"$line\"; else echo \"FAILED for\" \"$line\" >>error.log; fi; done;\n\nThis method turned out to be much FASTER than other methods.\n\nHowever, there is a CAVEAT. This method can yield wrong results, because sometimes thumbnail can be generated even for corrupt files. E.g. if the video file is corrupted only at the end, this method will fail."
    }
}