{
    "id": "dbpedia_7395_2",
    "rank": 48,
    "data": {
        "url": "https://zimbra.github.io/adminguide/8.8.3/index.html",
        "read_more_link": "",
        "language": "en",
        "title": "Zimbra Collaboration Administrator Guide version 8.8.3",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://i.creativecommons.org/l/by-sa/4.0/88x31.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/arch_overview.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/mailflow.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/Tokenization.jpg",
            "https://zimbra.github.io/adminguide/8.8.3/images/zimbra-2-tier.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/zimbra-client-request-flow.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/ldap_traffic_flow.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/ldap_directory_hierarchy.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/mta_deployment.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/sending_non_local_mail_to_different_server.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/anti_virus_protection.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/spam_assassin.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/mta_network.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/mta_network_2.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/mta_milter.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/mta_milter_2.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/postscreen.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/message_queues.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/proxy_architecture_and_flow.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_password.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_viewing_attributes.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_viewing_attributes_2.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_ui.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/gear_icon.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_home_ui.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_monitor_ui.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/admin_console_monitor_ui_license.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/admin_console_monitor_ui_view.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_manage_ui.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_configure_ui.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_tools_and_migration_ui.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_search_ui.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_help_center_ui.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_tools_in_collaborator_tables.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_tools_in_collaborator_tables_2.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/motd.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/high_level_view_of_admin_console_ui.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_gear_icon.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_gear_icon_2.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/gear_icon.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_popup_menus.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_containers.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_general_information_configuration.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_email_attachment_rules.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administation_console_mta_configuration.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_create_domain.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/administration_console_gal.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/certificate_domain_load.jpg",
            "https://zimbra.github.io/adminguide/8.8.3/images/as_av.jpg",
            "https://zimbra.github.io/adminguide/8.8.3/images/dns_checks.jpg",
            "https://zimbra.github.io/adminguide/8.8.3/images/as_av.jpg",
            "https://zimbra.github.io/adminguide/8.8.3/images/GeneralInformation.jpg",
            "https://zimbra.github.io/adminguide/8.8.3/images/GlobalRetentionPolicy.jpg",
            "https://zimbra.github.io/adminguide/8.8.3/images/COSRetentionPolicy.jpg",
            "https://zimbra.github.io/adminguide/8.8.3/images/ephemeral-data-migration.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/ssdb-master-slave-normal.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/ssdb-master-slave-failover.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/ssdb-master-master.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/ssdb-multi-master.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/2FADiagram.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/User_NewAcct_2FASettings.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/User_EditAcct_2FASettings.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/COS_2FAContainer.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/mailboxlogdescription.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/mailbox_snapshot_zip_file.png",
            "https://zimbra.github.io/adminguide/8.8.3/images/cli.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "Spam Assassin Methods for Avoiding Spam\n\nUsage guidelines are provided in the following topics:\n\nFor information about how to customize SpamAssassin, see https:// wiki.zimbra.com/wiki/Anti-spam_strategies.\n\nManaging the Spam Assassin Score: SpamAssassin uses predefined rules aswell as a Bayes database to score messages with a numerical range. Zimbra uses a percentage value to determine “spaminess” based on a SpamAssassin score of 20 as 100%. Any message tagged between 33%-75% is considered spam and delivered to the user’s junk folder. Messages tagged above 75% are always considered spam and discarded.\n\nYou can change the spam percentage settings, and the subject prefix at the Administration Console.\n\nAdmin Console:\n\nHome > Configure > Global Settings > AS/AV → Spam checking Settings\n\nBy default, Zimbra uses the Berkeley DB database for spam training. You can also use a MariaDB database.\n\nTo use the MariaDB method on the MTA servers:\n\nzmlocalconfig -e antispam_mariadb_enabled=TRUE\n\nWhen this is enabled, Berkeley DB database is not enabled.\n\nTraining the Spam Filter — The effectiveness of the anti-spam filter is dependenton user input to differentiate spam or ham. The SpamAssassin filter learns from messages that users specifically mark as spam by sending them to their junk folder or not spam by removing them from their junk folder. A copy of these marked messages is sent to the appropriate spam training mailbox.\n\nAt installation, a spam/ham cleanup filter is configured on only the first MTA. The ZCS spam training tool, zmtrainsa, is configured to automatically retrieve these messages and train the spam filter. The zmtrainsa script empties these mailboxes each day.\n\nInitially, you might want to train the spam filter manually to quickly build a database of spam and non-spam tokens, words, or short character sequences that are commonly found in spam or ham. To do this, you can manually forward messages as message/rfc822 attachments to the spam and non-spam mailboxes. When zmtrainsa runs, these messages are used to teach the spam filter. Make sure you add a large enough sampling of messages to get accurate scores. To determine whether to mark messages as spam at least 200 known spams and 200 known hams must be identified.\n\nConfiguring Final Destination for Spam — You can configure Amavis behavior tohandle a spam item’s final destination by using the following attribute:\n\nzimbraAmavisFinalSpamDestiny\n\nThe default is D_DISCARD (which will not deliver the email to the addressee).\n\nSetting final spam destiny attributes:\n\nzmprov mcf \"zimbraAmavisFinalSpamDestiny\" D_PASS zmprov ms serverhostname.com D_PASS\n\nTable 9. Configurable attribute values Value Description\n\nSetting Up Trusted Networks: The ZCS configuration allows relaying only forthe local network, but you can configure trusted networks that are allowed to relay mail. You set the MTA trusted networks as a global setting, but you can configure trusted networks as a server setting. The server setting overrides the global setting.\n\nTo use the Administration Console to set up MTA trusted networks as a global setting:\n\nAdmin Console:\n\nHome > Configure > Global Settings > MTA → Network\n\nWhen using the Administration Console to set up MTA trusted networks on a per server basis, first ensure that MTA trusted networks have been set up as global settings.\n\nAdmin Console:\n\nHome > Configure > Servers → server → MTA → Network\n\nEnter the network addresses separated by commas and/or a space. Continue long lines by starting the next line with space, similar to the following examples:\n\n127.0.0.0/8, 168.100.189.0/24 127.0.0.0/8 168.100.189.0/24 10.0.0.0/8 [::1]/128 [fe80::%eth0]/64\n\nEnabling a Milter Server: Milter server can be enabled to enforce restrictions on which addresses can send to distribution lists and add Reply-To and X-Zimbra-DL headers to messages sent from distribution lists. This can beenabled globally or for specific servers from the Administration Console.\n\nOnly enable a Milter Server on a server where an MTA is running.\n\nFor global configuration, enable the milter server from the Administration Console:\n\nAdmin Console:\n\nHome > Configure > Global Settings > MTA → Milter Server\n\nUse the Administration Console to enable a specific milter server, and to set bind addressing for individual servers.\n\nAdmin Console:\n\nHome > Configure > Servers → server → MTA → Milter Server\n\nPostscreen Methods for Avoiding Spam\n\nZimbra Postscreen is the 8.7 enhancement to the Zimbra Collaboration anti-spam strategy, to provide additional protection against mail server overload. By design, Postscreen is not an SMTP proxy. Its purpose is to keep spambots away from Postfix SMTP server processes, while minimizing overhead for legitimate traffic. A single Postscreen process handles multiple inbound SMTP connections and decides which clients may communicate to a Post-fix SMTP server process. By keeping spambots away, Postscreen frees up SMTP server processes for legitimate clients, and delays the onset of server overload conditions.\n\nIn a typical deployment, Postscreen handles the MX service on TCP port 25, while MUA clients submit mail via the submission service on TCP port 587, which requires client authentication. Alternatively, a site could set up a dedicated, non-Postscreen, “port 25” server that provides submission service and client authentication without MX service.\n\nPostscreen should not be used on SMTP ports that receive mail from end-user clients (MUAs).\n\nZimbra Collaboration Postscreen maintains a temporary white-list for clients that have passed a number of tests. When an SMTP client IP address is whitelisted, Postscreen immediately passes the connection to a Postfix SMTP server process. This minimizes the overhead for legitimate mail.\n\nIn a typical scenario that uses Postscreen service, it is reasonable to expect potentially malicious email entities — such as bots and zombies — to be mixed in with friendly candidates in email loads. This concept is illustrated in the following diagram, in which undesirable entities are depicted in red; good email candidates are green.\n\nPostscreen performs basic checks and denies connection(s) that are clearly from a bot or zombie. If the connection is not in the temporary whitelist, Postscreen passes the email to the local Anti-SPAM and Anti-Virus engines, which can either accept it or deny it. Good connections are accepted via Postscreen security, then allowed to talk directly with the SMTP daemon, which scans the Email (as usual) with the AS/AV. By default, all bots or zombies are rejected.\n\nUse Zimbra CLI attributes to set parameters for Postscreen operations. For any Postscreen Attributes that provide the ignore, enforce, or drop instruction, use guidelines as follows:\n\nignore — Ignore this result. Allow other tests to complete. Repeat this testwith subsequent client connections. This is the default setting, which is useful for testing and collecting statistics without blocking mail.\n\nenforce — Allow other tests to complete. Reject attempts to deliver mailwith a 550 SMTP reply, and log the hello/sender/recipient information. Repeat this test with subsequent client connections.\n\ndrop — Drop the connection immediately with a 521 SMTP reply. Repeat this test with subsequent client connections.\n\nPostscreen Attributes:\n\nGo to the zmprov mcf prompt (release 8.7+) to use Postscreen commands. You can see example usages of these attributes in Enabling Postscreen.\n\nEnabling Postscreen:\n\nThe example in this section demonstrates settings appropriate for a global configuration with medium-to-high level Postscreen protection.\n\nExample 4. Global Configuration for Postscreen\n\nzmprov mcf zimbraMtaPostscreenAccessList permit_mynetworks zmprov mcf zimbraMtaPostscreenBareNewlineAction ignore zmprov mcf zimbraMtaPostscreenBareNewlineEnable no zmprov mcf zimbraMtaPostscreenBareNewlineTTL 30d zmprov mcf zimbraMtaPostscreenBlacklistAction ignore zmprov mcf zimbraMtaPostscreenCacheCleanupInterval 12h zmprov mcf zimbraMtaPostscreenCacheRetentionTime 7d zmprov mcf zimbraMtaPostscreenCommandCountLimit 20 zmprov mcf zimbraMtaPostscreenDnsblAction enforce zmprov mcf \\ zimbraMtaPostscreenDnsblSites 'b.barracudacentral.org=127.0.0.2_7' \\ zimbraMtaPostscreenDnsblSites 'dnsbl.inps.de=127.0.0.2*7' \\ zimbraMtaPostscreenDnsblSites 'zen.spamhaus.org=127.0.0.[10;11]*8' \\ zimbraMtaPostscreenDnsblSites 'zen.spamhaus.org=127.0.0.[4..7]*6' \\ zimbraMtaPostscreenDnsblSites 'zen.spamhaus.org=127.0.0.3*4' \\ zimbraMtaPostscreenDnsblSites 'zen.spamhaus.org=127.0.0.2*3' \\ zimbraMtaPostscreenDnsblSites 'list.dnswl.org=127.0.[0..255].0*-2' \\ zimbraMtaPostscreenDnsblSites 'list.dnswl.org=127.0.[0..255].1*-3' \\ zimbraMtaPostscreenDnsblSites 'list.dnswl.org=127.0.[0..255].2*-4' \\ zimbraMtaPostscreenDnsblSites 'list.dnswl.org=127.0.[0..255].3*-5' \\ zimbraMtaPostscreenDnsblSites 'bl.mailspike.net=127.0.0.2*5' \\ zimbraMtaPostscreenDnsblSites 'bl.mailspike.net=127.0.0.[10;11;12]*4' \\ zimbraMtaPostscreenDnsblSites 'wl.mailspike.net=127.0.0.[18;19;20]*-2' \\ zimbraMtaPostscreenDnsblSites 'dnsbl.sorbs.net=127.0.0.10*8' \\ zimbraMtaPostscreenDnsblSites 'dnsbl.sorbs.net=127.0.0.5*6' \\ zimbraMtaPostscreenDnsblSites 'dnsbl.sorbs.net=127.0.0.7*3' \\ zimbraMtaPostscreenDnsblSites 'dnsbl.sorbs.net=127.0.0.8*2' \\ zimbraMtaPostscreenDnsblSites 'dnsbl.sorbs.net=127.0.0.6*2' \\ zimbraMtaPostscreenDnsblSites 'dnsbl.sorbs.net=127.0.0.9*2' zmprov mcf zimbraMtaPostscreenDnsblTTL 5m zmprov mcf zimbraMtaPostscreenDnsblThreshold 8 zmprov mcf zimbraMtaPostscreenDnsblTimeout 10s zmprov mcf zimbraMtaPostscreenDnsblWhitelistThreshold 0 zmprov mcf zimbraMtaPostscreenGreetAction enforce zmprov mcf zimbraMtaPostscreenGreetTTL 1d zmprov mcf zimbraMtaPostscreenNonSmtpCommandAction drop zmprov mcf zimbraMtaPostscreenNonSmtpCommandEnable no zmprov mcf zimbraMtaPostscreenNonSmtpCommandTTL 30d zmprov mcf zimbraMtaPostscreenPipeliningAction enforce zmprov mcf zimbraMtaPostscreenPipeliningEnable no zmprov mcf zimbraMtaPostscreenPipeliningTTL 30d zmprov mcf zimbraMtaPostscreenWatchdogTimeout 10s zmprov mcf zimbraMtaPostscreenWhitelistInterfaces static:all\n\nTesting Postscreen:\n\nTesting uses Postscreen to view results without taking any action. In a testing scenario, you instruct Postscreen to log email connections without taking action on them. Once you are satisfied with the results, you can set Postscreen values to enforce or drop emails, as required.\n\nSet up the DNS-based Blackhole List (DNSBL).\n\nSet Postscreen to ignore.\n\nThe following real-world example demonstrates return of a 550 error from Postscreen during a test session:\n\nMar 1 02:03:26 edge01 postfix/postscreen[23154]: DNSBL rank 28 for [112.90.37.251]:20438 Mar 1 02:03:26 edge01 postfix/postscreen[23154]: CONNECT from [10.210.0.161]:58010 to [10.210.0.174]:25 Mar 1 02:03:26 edge01 postfix/postscreen[23154]: WHITELISTED [10.210.0.161]:58010 Mar 1 02:03:27 edge01 postfix/postscreen[23154]: NOQUEUE: reject: RCPT from [112.90.37.251]:20438: 550 5.7.1 Service unavailable; client [112.90.37.251] blocked using zen.spamhaus.org; from=<hfxdgdsggfvfg@gmail.com>, to=<support@zimbra.com>, proto=ESMTP, helo=<gmail.com> Mar 1 02:03:27 edge01 postfix/postscreen[23154]: DISCONNECT [112.90.37.251]:20438\n\nSetting Up a Single Node for HTTP Proxy\n\nUse steps in this section if Zimbra proxy is installed along with ZCS on the same server.\n\nOn each zimbra mailbox server that you want to proxy with, enable the proxy for the web.\n\n/opt/zimbra/libexec/zmproxyconfig -e -w -H mailbox.node.service.hostname\n\nThis configures the following:\n\nAttribute Setting\n\nTo set the proxy server mail mode, add the -x option to the command with the specific mode: http, https, both, redirect, mixed.\n\nRestart services on the proxy and mailbox servers.\n\nzmcontrol restart\n\nConfigure each domain with the public service host name to be used for REST URLs, email and Briefcase folders.\n\nzmprov modifyDomain <domain.com> zimbraPublicServiceHostname <hostname.domain.com>\n\nSet Up Proxy to use Clear Text for Upstream Connections\n\nWhen setting up the proxy to use clear text for upstream connections, set zimbraReverseProxySSLToUpstreamEnabled to FALSE.\n\nThis attribute defaults to TRUE. In an \"out of the box\" proxy set up, the upstream communication defaults to SSL.\n\nREST URL Generation\n\nFor REST URL, you set the host name, service protocol, and services port globally or for a specific domain from the following attributes.\n\nzimbraPublicServiceHostname\n\nzimbraPublicServiceProtocol\n\nzimbraPublicServicePort\n\nWhen generating REST URL’s:\n\nIf domain.zimbraPublicServiceHostname is set, use zimbraPublicServiceProtocol + zimbraPublicServiceHostname + zimbraPublicServicePort\n\nOtherwise it falls back to the server (account’s home server) attributes:\n\nprotocol is computed from server.zimbraMailMode\n\nhostname is server.zimbraServiceHostname\n\nport is computed from the protocol.\n\nAbout using zimbraMailReferMode - In earlier versions, a local config variable — zimbra_auth_always_send_refer — determined which action the back-end server took when a user’s mailbox did not reside on the server that the user logged in to. The default value of FALSE redirected the user if the user was logging in on the incorrect backend host.\n\nOn a multiserver ZCS, if a load balanced name was needed to create a friendly landing page, a user would always have to be redirected. In that case, zimbra_auth_always_send_refer was set to TRUE.\n\nNow with a full-fledged reverse proxy, users do not need to be redirected. The localconfig variable zimbraMailReferMode is used with nginx reverse proxy.\n\nDuring the migration process, and until the backend URL is changed, Zimbra Collaboration will store new ephemeral data both in LDAP and SSDB; this keeps the two backends from getting out of sync. If the new value of zimbraEphemeralBackendURL is changed to match the migration URL, migration info is reset and the forwarding mechanism is turned off. If the values do not match, migration info is not reset, and forwarding remains in place. Note that this means that migration only needs to be run once, even if there is a gap between the initial migration and URL change. As long as the target backend is never taken offline, it will stay up-to-date. However, if SSDB is taken offline between the end of the migration and the backend URL change, migration will need to be re-run.\n\nEphemeral data migration is a one-way process. The zmmigrateattrs script does not support migrating data from SSDB back into LDAP, nor does it support migrating data between different instances of SSDB. This means that if the value of zimbraEphemeralBackendURL is reverted back to LDAP after migration, prior authentication data will become inaccessible, and all user sessions will be invalidated. If migration to a new SSDB backend becomes necessary, the data should be replicated to the new location prior to changing the value of zimbraEphemeralBackendURL.\n\nThere is one exception to this is: the backend can be safely reverted back to LDAP immediately after the switch to SSDB with minimal loss of data. This is because the original values are retained in LDAP during migration; switching the backend to SSDB leaves a \"snapshot\" of ephemeral data in LDAP at the time of the switch. The migration utility does not currently provide a way to delete this data to free up space; however, it allows for the backend to be reverted. The more time passes between the initial change and the reversion, the less the LDAP snapshot will reflect the true state of ephemeral data.\n\nDue to changes in the way multi-valued ephemeral data is stored, the attributes zimbraAuthTokens and zimbraCsrfTokenData are no longer returned as part of the zmprov ga <account> response. The value of zimbraLastLogonTimestamp is returned as before, although only if the -l flag is not used, as adding the -l flag will restrict the server to accessing attributes in LDAP only. It is still possible to modify these attributes using the zmprov ma <account> command, regardless of the ephemeral backend. In order to do this, the provided attribute value must match its LDAP format: tokenId|expiration|serverVersion for auth tokens; data:crumb:expiration for CSRF tokens.\n\nYou can set how message delivery is handled when a user’s mailbox exceeds the configured quota. The default behavior is for the MTA to temporarily send the message to the deferred queue. When the mailbox has sufficient space, the message is delivered. You can change this behavior to either have messages bounce back to the sender instead of being sent to the deferred queue first or you can configure to send the message to the mailbox even if the quota has been exceeded.\n\nThe Preferences Import/Export page lets users export all of their account data, including mail, contacts, calendar, tasks, and Briefcase folders. They can export specific items in their account and save the data to their computer or other location. The account data is saved as a tar-gzipped (tgz) archive file so that it can be easily imported to restore their account. Individual contacts are saved as .csv files, and individual calendar files are saved as .ics files. The data are not removed from their accounts. The exported account data file can be viewed with an archive program such as WinRAR archiver. Any of these files can be imported into their account from the same page.\n\nThe auto-grouped backup method runs a full backup for a different group of mailboxes at each scheduled backup. The auto-grouped backup method is designed for very large Zimbra Collaboration environments where backing up all accounts can take a long time. Because auto-grouped backups combine full and incremental backup functions, there is no need for incremental backups. Each auto-grouped session runs a full backup of the targeted group of mailboxes. It is not recommended to run auto-grouped backups manually since they are scheduled from the CLI and run automatically at the scheduled times.\n\nThrottling option with auto-grouped backup. The auto-grouped backup methodautomatically backs up mailboxes that have never been backed up when the next backup is scheduled. This might not be the best option every time a full backup is required on all mailboxes, such as immediately after massive mailbox migrations or after a major upgrade. Enabling Throttle automatic backups limits the mailbox count in a daily backup to T/N. This breaks theconstraint of backing up all mailboxes in N days, but it helps backup to finish during off hours.\n\nThe Restore on New Account procedure allows you to restore the contents and preferences of a mailbox as it was in a moment in time, into a completely new account. The source account is not changed in any way, so it is possible to recover one or more deleted items in a user’s account without actually rolling back the whole mailbox. When you run this kind of restore, you can choose to hide the newly created account from the GAL as a security measure.\n\nDevising a backup strategy is no easy matter, and at some point you will most likely be confronted with the following question: What if I lose the data I backed up?. The chances of this happening ultimately only depend on how you make and manage your backups. It’s more likely that you will lose all of your backed up data if you store both your data and your backups in a single SATAII disk than if you store your backed up data on a dedicated SAN using a RAID 1+0 setup.\n\nDue to this, it’s very easy to make a backup. The best (and easiest) way to do so is by using rsync. Specific options and parameters depend on many factors, such as the amount of data to be synced and the storage in use, while connecting to an rsync daemon instead of using a remote shell as a transport is usually much faster in transferring the data.\n\nThe CLI command zmmboxmove is used to move mailboxes from one Zimbra server to another. Mailboxes can be moved between Zimbra servers that share the same LDAP server. All the files are copied to the new server and the LDAP is updated. After the mailbox is moved to a new server a copy still remains on the older server, but the status of the old mailbox is closed. Users cannot log on and mail is not delivered. You should check to see that all the mailbox content was moved successfully before purging the old mailbox."
    }
}