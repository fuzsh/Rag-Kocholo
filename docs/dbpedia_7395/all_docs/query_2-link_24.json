{
    "id": "dbpedia_7395_2",
    "rank": 24,
    "data": {
        "url": "https://github.com/emcrisostomo/fswatch",
        "read_more_link": "",
        "language": "en",
        "title": "platform file change monitor with multiple backends: Apple OS X File System Events, *BSD kqueue, Solaris/Illumos File Events Notification, Linux inotify, Microsoft Windows and a stat()",
        "top_image": "https://opengraph.githubassets.com/6af5cc81faab51bd9fde6a484ecca126e9a5c90d1d8fb816d44b58f7ab2dcf19/emcrisostomo/fswatch",
        "meta_img": "https://opengraph.githubassets.com/6af5cc81faab51bd9fde6a484ecca126e9a5c90d1d8fb816d44b58f7ab2dcf19/emcrisostomo/fswatch",
        "images": [
            "https://camo.githubusercontent.com/9ad548f57e734d7689ff16c80e8aeb9b1c1d1c3edef7c4e474af550d8ba9cb5d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c2d2d332e302d626c75652e7376673f7374796c653d666c6174"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "A cross-platform file change monitor with multiple backends: Apple OS X File System Events, *BSD kqueue, Solaris/Illumos File Events Notification, Linux inotify, Microsoft Windows and a stat()-based backend. - emcrisostomo/fswatch",
        "meta_lang": "en",
        "meta_favicon": "https://github.com/fluidicon.png",
        "meta_site_name": "GitHub",
        "canonical_link": "https://github.com/emcrisostomo/fswatch",
        "text": "fswatch is a file change monitor that receives notifications when the contents of the specified files or directories are modified. fswatch implements several monitors:\n\nA monitor based on the File System Events API of Apple macOS.\n\nA monitor based on kqueue, a notification interface introduced in FreeBSD 4.1 (and supported on most *BSD systems, including macOS).\n\nA monitor based on the File Events Notification API of the Solaris kernel and its derivatives.\n\nA monitor based on inotify, a Linux kernel subsystem that reports file system changes to applications.\n\nA monitor based on ReadDirectoryChangesW, a Microsoft Windows API that reports changes to a directory.\n\nA monitor which periodically stats the file system, saves file modification times in memory, and manually calculates file system changes (which works anywhere stat (2) can be used).\n\nfswatch should build and work correctly on any system shipping either of the aforementioned APIs.\n\nlibfswatch\n\nFeatures\n\nLimitations\n\nGetting fswatch\n\nBuilding from Source\n\nInstallation\n\nDocumentation\n\nLocalization\n\nUsage\n\nContributing\n\nBug Reports\n\nfswatch is a frontend of libfswatch, a library with C and C++ binding. More information on libfswatch can be found here.\n\nfswatch main features are:\n\nSupport for many OS-specific APIs such as kevent, inotify, and FSEvents.\n\nRecursive directory monitoring.\n\nPath filtering using including and excluding regular expressions.\n\nCustomizable record format.\n\nSupport for periodic idle events.\n\nThe limitations of fswatch depend largely on the monitor being used:\n\nThe FSEvents monitor, available only on macOS, has no known limitations, and scales very well with the number of files being observed.\n\nThe File Events Notification monitor, available on Solaris kernels and its derivatives, has no known limitations.\n\nThe kqueue monitor, available on any *BSD system featuring kqueue, requires a file descriptor to be opened for every file being watched. As a result, this monitor scales badly with the number of files being observed, and may begin to misbehave as soon as the fswatch process runs out of file descriptors. In this case, fswatch dumps one error on standard error for every file that cannot be opened.\n\nThe inotify monitor, available on Linux since kernel 2.6.13, may suffer a queue overflow if events are generated faster than they are read from the queue. In any case, the application is guaranteed to receive an overflow notification which can be handled to gracefully recover. fswatch currently throws an exception if a queue overflow occurs. Future versions will handle the overflow by emitting proper notifications.\n\nThe Windows monitor can only establish a watch directories, not files. To watch a file, its parent directory must be watched in order to receive change events for all the directory's children, recursively at any depth. Optionally, change events can be filtered to include only changes to the desired file.\n\nThe poll monitor, available on any platform, only relies on available CPU and memory to perform its task. The performance of this monitor degrades linearly with the number of files being watched.\n\nUsage recommendations are as follows:\n\nOn macOS, use only the FSEvents monitor (which is the default behaviour).\n\nOn Solaris and its derivatives use the File Events Notification monitor.\n\nOn Linux, use the inotify monitor (which is the default behaviour).\n\nIf the number of files to observe is sufficiently small, use the kqueue monitor. Beware that on some systems the maximum number of file descriptors that can be opened by a process is set to a very low value (values as low as 256 are not uncommon), even if the operating system may allow a much larger value. In this case, check your OS documentation to raise this limit on either a per process or a system-wide basis.\n\nIf feasible, watch directories instead of files. Properly crafting the receiving side of the events to deal with directories may sensibly reduce the monitor resource consumption.\n\nOn Windows, use the windows monitor.\n\nIf none of the above applies, use the poll monitor. The authors' experience indicates that fswatch requires approximately 150 MB of RAM memory to observe a hierarchy of 500.000 files with a minimum path length of 32 characters. A common bottleneck of the poll monitor is disk access, since stat()-ing a great number of files may take a huge amount of time. In this case, the latency should be set to a sufficiently large value in order to reduce the performance degradation that may result from frequent disk access.\n\nA regular user may be able to fetch fswatch from the package manager of your OS or a third-party one. If you are looking for fswatch for macOS, you can install it using either MacPorts or Homebrew:\n\nOn FreeBSD, fswatch can be installed using pkg:\n\nCheck your favourite package manager and let us know if fswatch is missing there.\n\nA user who wishes to build fswatch should get a release tarball. A release tarball contains everything a user needs to build fswatch on their system, following the instructions detailed in the Installation section below and the INSTALL file.\n\nA developer who wishes to modify fswatch should get the sources (either from a source tarball or cloning the repository) and have the GNU Build System installed on their machine. Please read README.gnu-build-system to get further details about how to bootstrap fswatch from sources on your machine.\n\nGetting a copy of the source repository is not recommended unless you are a developer, you have the GNU Build System installed on your machine, and you know how to bootstrap it on the sources.\n\nSee the INSTALL file for detailed information about how to configure and install fswatch. Since the fswatch builds and uses dynamic libraries, in some platforms you may need to perform additional tasks before you can use fswatch:\n\nMake sure the installation directory of dynamic libraries ($PREFIX/lib) is included in the lookup paths of the dynamic linker of your operating system. The default path, /usr/local/lib, will work in nearly every operating system.\n\nRefreshing the links and cache to the dynamic libraries may be required. In GNU/Linux systems you may need to run ldconfig:\n\n$ ldconfig\n\nfswatch is a C++ program and a C++ compiler compliant with the C++11 standard is required to compile it. Check your OS documentation for information about how to install the C++ toolchain and the C++ runtime.\n\nNo other software packages or dependencies are required to configure and install fswatch but the aforementioned APIs used by the file system monitors.\n\nfswatch provides the following documentation:\n\nTexinfo documentation, included with the distribution.\n\nHTML documentation.\n\nPDF documentation.\n\nA wiki page.\n\nA man page.\n\nfswatch official documentation is provided in Texinfo format. This is the most comprehensive source of information about fswatch and the only authoritative one. The man page, in particular, is a stub that suggests the user to use the info page instead.\n\nIf you are installing fswatch using a package manager and you would like the PDF manual to be bundled into the package, please send a feature request to the package maintainer.\n\nfswatch is localizable and internally uses GNU gettext to decouple localizable string from their translation. The currently available locales are:\n\nEnglish (en).\n\nItalian (it).\n\nSpanish (es).\n\nTo build fswatch with localization support, you need to have gettext installed on your system. If configure cannot find <libintl.h> or the linker cannot find libintl, then you may need to manually provide their location to configure, usually using the CPPFLAGS and the LDFLAGS variables. See README.macos for an example.\n\nIf gettext is not available on your system, fswatch shall build correctly, but it will lack localization support and the only available locale will be English.\n\nfswatch accepts a list of paths for which change events should be received:\n\nThe event stream is created even if any of the paths do not exist yet. If they are created after fswatch is launched, change events will be properly received. Depending on the watcher being used, newly created paths will be monitored after the amount of configured latency has elapsed.\n\nThe output of fswatch can be piped to other program in order to process it further:\n\nTo run a command when a set of change events is printed to standard output but no event details are required, then the following command can be used:\n\nThe behaviour is consistent with earlier versions of fswatch (v. 0.x). Please, read the Compatibility Issues with fswatch v. 0.x section for further information.\n\nBy default fswatch chooses the best monitor available on the current platform, in terms of performance and resource consumption. If the user wishes to specify a different monitor, the -m option can be used to specify the monitor by name:\n\nThe list of available monitors can be obtained with the -h option.\n\nFor more information, refer to the fswatch documentation.\n\nEverybody is welcome to contribute to fswatch. Please, see CONTRIBUTING for further information.\n\nBug reports can be sent directly to the authors.\n\nContact the Authors\n\nThe author can be contacted on IRC, using the Freenode #fswatch channel.\n\nThis software is dual-licensed under the GPL v. 3.0 and the Apache License v. 2.0.\n\nCopyright (c) 2013-2021 Enrico M. Crisostomo\n\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details."
    }
}