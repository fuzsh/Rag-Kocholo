{
    "id": "dbpedia_7395_0",
    "rank": 30,
    "data": {
        "url": "https://www.capesoft.com/docs/xfiles/xfiles.htm",
        "read_more_link": "",
        "language": "en",
        "title": "CapeSoft xFiles Complete Documentation",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.capesoft.com/docs/xfiles/images/xfiles_header.png",
            "https://www.capesoft.com/docs/xfiles/xFilesVersionNumber.PNG",
            "https://www.capesoft.com/docs/xFiles/xFilesVersionNumber.PNG",
            "https://www.capesoft.com/docs/xfiles/images/xFiles%20Example%20Image.png",
            "https://www.capesoft.com/docs/xfiles/images/GlobalTemplateOptions.png",
            "https://www.capesoft.com/docs/xfiles/Images/Extension_screenshot.png",
            "https://www.capesoft.com/docs/xfiles/Images/ControlButtons.png",
            "https://www.capesoft.com/docs/xfiles/Images/ControlTemplateGeneral.png",
            "https://www.capesoft.com/docs/xfiles/Images/ControlTemplateOptions.png",
            "https://www.capesoft.com/images/supportAddress.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "xFileXML Methods The XFileXML class provides the ability to easily load XML files from disk into a group, file or queue, and save a group, file, view or queue to disk as an XML file. Writing a data structure to disk can be done by calling a single Save method. Similarly, reading an XML file into a group, file or queue is as simple as calling the Load method. AddRecord Add a record to the object loaded by xFileXML (queues and files only). AddText AddText into the XML being created. Allows custom text to be injected into the output stream at specific points... Copy Copy data to or from the data structure being used by xFileXML. Allows the contents of a queue to be copied into a File being used, or data from a different queue or group to be copied into the queue or group used by the xFileXML object. Init Initialize an xFileXML object to use a particular queue and data structure. Load Load from file to the data structure. Save Save to the XML file (or create the XML in memory). Start Return the object to its initial state. Advanced Class Methods Generic File Loading and Saving SaveBinData Saves the binData string property to the file name specified. LoadBinData Loads a file into the binData string property. XML file modification and settings CreateFooter Creates a string that is appended after the file data. CreateHeader Creates the XML header that is added to the file. DisableField Allows you to remove a field from a Table, View, Queue or Group before saving. LoadTweakSettings Called when the LoadÂ is about to be done to allow the object setting to be modified before the load code is executed. SaveTweakSettings Called when the Save is about to be done to allow the object setting to be modified before the save code is executed. SetAsAttribute Sets a field to be an attribute, either of the record, or of another field. UseCharSet Sets the .Saveencoding based on a Clarion Charset Equate. Record handling and management AddAtListStart\n\nAddAtRecordStart\n\nAddAtRecordEnd\n\nAddAtListEnd Called when generating lists. Acts as a point for calling AddText. GetValue Gets a value of a field when passed the field name (Files only). SetValue Sets the value of a field when passed the name and value (Files only). InsertFileRecord Inserts a record in the file (File only). UpdateFileRecord Updates a record in the file (File only). RecordCount Returns the number of records in the file or queue. FreeFileData Deletes all records in the file. FreeGroupData Clears the group. FreeQueueData Deletes all queue records. ValidateRecord Used when reading into a Queue, or File, or writing from a Queue, File, or View. This method allows you to suppress records by returning the value ValidateUpdateRecord Used when reading into a Queue, or File.\n\nThis method is called when doing a LOAD directly into a Table or Queue. Where ValidateRecord validates the incoming values, ValidateUpdateRecord validates the existing-record values. So, for example, if a database record is locked, and may not be updated, then this method allows you to override the update, and not write the new values to disk.\n\nReturn XF:Filtered from the method to override the update.\n\nThis method is only called for updates, not for inserts. Filtering for inserts remains in either ValidateRecord, or InsertFileRecord. AddOldField If one of the fields in your Group, Flie, Queue or View has changed, and exported XML files exist that are still using the old field names, you can use this to tell XFiles to import the the value into the renamed field. LoadAllOldFields This is called when Load is called. Embed your calls to AddOldField() here, after the parent call. CleanFileName Called when a file is saved to ensure there are no invalid characters in the file name. Property Description See Also AddArrayIndexToTag\n\n(Long) If set to true (the default) then XML tags for array values will be extended to include the array index. See Arrays for more. Arrays AddFields\n\n(Long) The number of fields to add when inserting a record into the queue by calling the AddRecord method. AddRecord method BinData\n\n(&String) The actual internal data store for loaded files. Memory allocation and disposal is handled by the class. When an XML file is loaded the data is loaded into this buffer and the size of the loaded data is stored in the BinDataLen property. Generally this property does not need to be manipulated directly unless the LoadBinData and SaveBinData methods are being used to write this directly to disk (which allows generic file reading and writing as well as customization of the data being read and written). LoadBinData method\n\nSaveBinData method\n\nBinDataLen property BinDataLen\n\n(Long) The size of the BinData property (in bytes). This is set automatically when an XML file is loaded from disk. BinData Property ColumnDisabled\n\n(Byte, dim(XF:MaxFields)) This is an array map of the columns that allows a column to be enabled(0) or disabled(1). All columns are enabled by default, but you can disable individual columns by setting the byte in the map for that particular column. E.g. (to disable column 4):\n\nThisFileXML.ColumnDisabled[4] = 1 CopyFields\n\n(Long) The number of fields to copy between the two data structures when calling the Copy method. Allows the number of fields being used to be limited. Copy method CRLF\n\n(cString(10))\n\nA string containing the line-ending to place after each tab. This makes the xml more readable, but at the cost of some extra characters in the xml file.Â Defaults to <13,10>. Â DontAbbreviateEmptyTags\n\n(Long) By default empty tags are saved as the compact form - for example <abc/>. If however the unabbreviated form needs to be saved then set this property to true. When true tags will be saved in the form <abc></abc>.\n\nNote that this setting applies after the DontSaveBlank settings above. In other words if the Blank property is true then this property has no effect. Â DontAddLastFields\n\n(Long) Performs the same function as DontCopyLastFields, except for the AddRecord method - it limits the number of fields that are added when inserting a record into the queue. AddRecord method\n\nDontCopyLastFields method DontCleanFileName\n\n(Long) If set to 1 the CleanFileName method will not remove invalid characters from the file name, but simply return it as-in. This should not be used in normal circumstances. DontCopyLastFields\n\n(Long) The same as the DontLoadLastFields property, except for copying from one queue to another using the Copy method. Copy method DontLoadLastFields\n\n(Long) Performs the same function as the LoadFields property, however it allows the number of fields to be excluded to be specified from the last field in the queue, rather than specifying the number of fields to be included from the first field in the queue. LoadFields property DontReplaceColons\n\n(Long) By default xFiles replaces colons(:) with periods (.) when writing prefixes to the file. Colons are not valid in the XML tags except for namespaces. Set the DontReplaceColons property to true to not replace colons in the XML file with full stops and zero to leave them as colons. This does not effect the operation of xFiles, however setting DontReplaceColons to true will result in invalid XML that is not viewable in XML viewers and parsers. DontSaveBlanks\n\nDontSaveBlankStrings\n\nDontSaveBlankNumbers\n\nDontSaveBlankGroups\n\n(Long) By default all fields in the structure are added into the XML as it is created. However XML also allows for the possibility of omitting blank fields from the output. These properties allow you control over what fields (if any) are excluded. The first property (DontSaveBlanks) is the equivalent of all the others being set. Â IgnoreGroupTags\n\n(Long) Saving: If this property is set then Groupings of fields in your Clarion structure is ignored. The structure is saved as if the structure contains no groups.\n\nLoading: If this property is set, then xml fields are imported by name, regardless of their grouping (or lack of grouping) in the xml. In other words the import will pay no attention to grouping in the xml, or grouping in the Clarion structure. If the xml however does contain groups, and inside those groups are duplicated field names, then the import will be unable to distinguish the fields. IndentBy The number of spaces (default = 2) to indent rows by to make the xml more readable. Set to 0 to minimize the size of the xml. Set to 0 to suppress indenting. The default value is 2. Â LoadFields\n\n(Long) This allows the number of fields to be loaded to be different from the number of fields in the queue, for example the first 5 fields might contain data, and the second 5 might be for temporary data, or the result calculations that aren't stored in the XML file. Setting LoadFields to 5 will load the first 5 fields of the queue from the XML file, even if there are ten fields in the queue or file. Â Load method\n\nSaveFields property\n\nDontLoadLastFields property LoadFromString\n\n(Long) When this property is set the Load() method loads the XML data in the xmlData string instead of loading it from disk. This property does not need to be set manually any longer as the Load() method now directly supports passing a string containing the XML to loading into the passed data structure. See Also\n\nLoad, Save, saveToString Meta Allows custom meta headers to be added to the xml. This property is added to the top of the xml file, before the root boundary. For example;\n\nxml.meta = '<?mso-application progid=\"Excel.Sheet\"?>' Â OmitXMLHeader\n\n(Long) Omits the first tag in the XML file. See CreateHeader and CreateFooter for more information on the header and footer tags. LoadFields property _pFileBoundary\n\n(pString(252)) This is the root boundary of the xml. The xml specification specifies that the xml document needs a boundary at the beginning and end of the xml. _pFileBoundaryAttribute\n\nString(XF:MaxAttributesSize) Added to the file boundary tag when writing an XML file. Â _pRecordBoundary\n\n(pString(252)) This is the boundary between each record in the queue/table/view of file being loaded. This allows the tag used as the record boundary to be specified. ProgressControl If this property is set to the Use Equate of a progress control on the window, then the progress control will be updated during the Load or Save call. The progress bar is automatically unhidden on start, and hidden when the Load or Save is completed.\n\nfor example;\n\nxml.ProgressControl = ?ProgressWhatever\n\nxml.Load(.... Â Records The number of records added to the XML in the last save. Â RecordBoundaryAttribute Added to the record boundary tag when writing an XML file. Â RecordNumber\n\n(Long) As each record is written to the output duing a .SAVE, the RecordNumber is increased. This allows you to know the current record number (in the output) as the data is being written. SaveFields Specify the number of fields to save. Â SaveRecords Default is 0, meaning no limit. If set then only this many records will be copied from the source structure to the XML.Â This value is checked after the call to ValidateRecord so records excluded by ValidateRecord are not included in the output, and do not count against the SaveRecords limit. Â SkipRecords Default is 0, meaning no records are skipped. If set then this number of valid records will be skipped before records are copied from the source structure to the output. This value is checked after the call to ValidateRecord so records excluded by ValidateRecord are not included in the output, and do not count against the SkipRecords limit. Used with the SaveRecords property this property allows for \"pages\" of data to be exported. Â SaveToString\n\n(Long) When this property is set the Save() method saves the XML data in the xmlData string instead of writing it to disk. The Save() method can be passed a blank file name if this is set, as the file name parameter is not used. See Also\n\nSave, loadFromString SOAPEnvelope\n\n(Long) When this property is set the Save() method wraps a SOAP envelope around the XML data. See Also\n\nCreating SOAP requests\n\nSOAPEnvelopeBoundary, SOAPEnvelopeBoundaryAttribute, SOAPBodyBoundary SOAPEnvelopeBoundary\n\n(pString(252)) This property determines the text for the Soap Envelope tag, to be used if the XML is wrapped as a SOAP request. The default is <soap:Envelope>. Be aware that some SOAP servers may treat this tag in a case sensitive manner. See Also\n\nCreating SOAP requests\n\nSOAPEnvelope, SOAPEnvelopeBoundaryAttribute, SOAPBodyBoundary SOAPEnvelopeBoundaryAttribute\n\n(cString(XF:MaxAttributesSize)) This property lets you set the attribute (if any is required) of the Soap Envelope Boundary tag. See Also\n\nCreating SOAP requests\n\nSOAPEnvelope, SOAPEnvelopeBoundary, SOAPBodyBoundary SOAPBodyBoundary\n\n(pString(252)) This property determines the text for the Soap Body tag, to be used if the XML is wrapped as a SOAP request. The default is <soap:Body>. Be aware that some SOAP servers may treat this tag in a case sensitive manner. See Also\n\nCreating SOAP requests\n\nSOAPEnvelope, SOAPEnvelopeBoundary, SOAPEnvelopeBoundaryAttribute StoreWholeRecord\n\n(Long) If this property is set to true, and a field in the structure exists, with the same name (or external name) as the record boundary, then the xml for the whole record will be stored \"as is\" in this field. TagCase\n\n(Long) The field name tags are automatically detected for you by the xFiles class. In some XML situations the case of these tags may be important. This property gives you control over the case used. This propertyÂ defaults to XF:CaseAny. Other options are XF:CaseLower, XF:CaseUpper and XF:CaseAsIs. In order to have mixed case tags, the Name property for each field in the group/file/queue must be set. This property is only applied to field-level tags, not header or boundary tags.\n\nThe default is XF:CaseAny, which means that xml files being loaded are Case Insensitive. For a Save this implies that the case of the External Name will be used (if it exists) and the tag is Upper Case if there is no external name. See Also\n\nCreating SOAP requests UpdateAsWhole If an incoming record updates an existing record, then assume the incoming record overwrites _all_ the fields of the existing record. Note this mode is not supported if the file has memo or blob fields. Â UpdateFileOnLoad If you don't want records to be updated when importing, then CLEAR this property (set by default). Â XmlData\n\n(&String) A string that is populated with the XML by the Save() method, if saveToString is set to 1. This allows XML to be \"saved\" into memory rather than written to disk directly. See Also\n\nProperties: loadFromString, saveToString\n\nMethods: Load, Save XmlDataLen\n\n(Long) The length (in bytes) of the xmlData string property. The xmlData property is used for loading and saving XML to and from memory rather than from disk. See Also\n\nProperties: loadFromString, saveToString\n\nMethods: Load, Save Xslt\n\n(string(XF:TempHeaderStringSize)) The name of an XSLT Style sheet which will be referenced in the xml header. Â"
    }
}