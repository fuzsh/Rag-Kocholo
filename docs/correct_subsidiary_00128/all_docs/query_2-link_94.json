{
    "id": "correct_subsidiary_00128_2",
    "rank": 94,
    "data": {
        "url": "https://docs.oracle.com/cd/E37115_01/dev.1112/e60534/uioasa.htm",
        "read_more_link": "",
        "language": "en",
        "title": "Customizing OAAM Web Application Pages",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.oracle.com/cd/E37115_01/dev.1112/e60534/img/aadev_dt_011.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2015-02-08T13:52:52+00:00",
        "summary": "",
        "meta_description": "Documentation to help integrators and developers integrate OAAM natively with customer applications by using In-Proc or SOAP mode; perform key customizations for Virtual Authentication Devices (VAD), user action and flows, layout, and headers and footers; and perform custom development.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "8.2 OAAM Properties\n\nYou can manage the appearance and behavior of OAAM using user-defined enumerations. User-defined enumerations are a collection of properties that represent a list of items. Each element in the list may contain several different attributes. The definition of a user-defined enum begins with a property ending in the keyword \".enum\" and has a value describing the use of the user-defined enum. Each element definition then starts with the same property name as the enum, and adds on an element name and has a value of a unique integer as an ID. The attributes of the element follow the same pattern, beginning with the property name of the element, followed by the attribute name, with the appropriate value for that attribute.\n\n8.2.1 Enum Example\n\nThe following is an example of an enum defining credentials displayed on the login screen of an OAAM Server implementation:\n\nbharosa.uio.default.credentials.enum = Enum for Login Credentials bharosa.uio.default.credentials.enum.companyid=0 bharosa.uio.default.credentials.enum.companyid.name=CompanyID bharosa.uio.default.credentials.enum.companyid.description=Company ID bharosa.uio.default.credentials.enum.companyid.inputname=comapanyid bharosa.uio.default.credentials.enum.companyid.maxlength=24 bharosa.uio.default.credentials.enum.companyid.order=0 bharosa.uio.default.credentials.enum.username=1 bharosa.uio.default.credentials.enum.username.name=Username bharosa.uio.default.credentials.enum.username.description=Username bharosa.uio.default.credentials.enum.username.inputname=userid bharosa.uio.default.credentials.enum.username.maxlength=18 bharosa.uio.default.credentials.enum.username.order=1\n\nThis set of properties defines one user-defined enum that contains two elements, each of which with five attributes. The name and description attributes are required to define any user-defined enum, other attributes are defined and used as needed by each individual use of a user-defined enum.\n\n8.2.2 Overriding Existing User-Defined Enums\n\nOverriding existing user-defined enums has some special cases. You may override any existing enum element's attribute value of the default application ID just as you would any other property, but to change the value of an element's attribute in a single application using an appId, you must create the entire enum in that application using the appropriate appId.\n\nFor example, using the user defined enum defined in Section 8.2.1, \"Enum Example,\" if you wanted to change Company ID to Profile ID for only one application (appId1), you would need to modify the enum:\n\nbharosa.uio.appId1.credentials.enum = Enum for Login Credentials bharosa.uio.appId1.credentials.enum.profileid=0 bharosa.uio.appId1.credentials.enum.profileid.name=ProfileID bharosa.uio.appId1.credentials.enum.profileid.description=Profile ID bharosa.uio.appId1.credentials.enum.profileid.inputname=profileid bharosa.uio.appId1.credentials.enum.profileid.maxlength=20 bharosa.uio.appId1.credentials.enum.profileid.order=0 bharosa.uio.appId1.credentials.enum.username=1 bharosa.uio.appId1.credentials.enum.username.name=Username bharosa.uio.appId1.credentials.enum.username.description=Username bharosa.uio.appId1.credentials.enum.username.inputname=userid bharosa.uio.appId1.credentials.enum.username.maxlength=18 bharosa.uio.appId1.credentials.enum.username.order=1\n\nFor instructions on customizing, extending, or overriding Oracle Adaptive Access Manager properties or enums, see Chapter 7, \"Using the OAAM Extensions Shared Library to Customize OAAM.\"\n\n8.2.3 Disabling Elements\n\nTo disable any already defined element in a user-defined enum, simply add an enabled attribute with a value of false. Using the appId1 credentials enum from Section 8.2.2, \"Overriding Existing User-Defined Enums,\" you would add the following line to remove Profile ID from the elements used by the application:\n\nbharosa.uio.appId1.credentials.enum.profileid.enabled=false\n\n8.3 Customizing the OAAM Server for Multiple Applications\n\nMultitenancy refers to a principle in software architecture where a single instance of the software runs on a server, serving multiple client organizations. With a multitenant architecture, each client organization feels as if they are working with a separate customized application instance.\n\nYou can configure the OAAM Server to support one or more Web application authentication and user registration flows. The OAAM Server configuration is specific to the UIO Proxy deployment. The OAAM UIO Proxy offers multifactor authentication to Web applications without requiring any change to the application code.\n\nThe OAAM Server proxy intercepts the HTTP traffic between the client (browser) and the server (Web application) and performs appropriate actions, such as redirecting to OAAM Server, to provide multifactor authentication and authorization. OAAM Server in turn communicates with OAAM Admin to determines the risk and takes the appropriate actions, such as permitting the login, challenging the user, blocking the user, and other actions.\n\nFigure 8-1 Universal Installation Deployment\n\nThe UIO Proxy can be placed in front of multiple applications and customized to work with each one as required.\n\nTo ensure that a customer's data is unique from that of other customers, an Application ID for the client application is mapped to an Organization ID. An Organization ID identifies what tenant applications a user utilizes.\n\nThe initial steps to configure and cu stomize OAAM Server are:\n\nDetermine the application ID of each application being secured.\n\nAssign default user groups for each application being secured.\n\n8.3.1 Determining the Application ID\n\nDetermine how many applications are to be configured and assign each application an Application ID. This Application ID is the same one used to configure the Proxy (see Chapter 6, \"Oracle Adaptive Access Manager Proxy\"). In many cases applications are referred to internally by some name or abbreviation, so an integrator configuring OAAM Server might want to use that name. For an example, if the client has two applications, one wholesale banking application and one retail banking application, the integrator might choose to use wholesale and retail as the Application IDs for the two applications.\n\nThis Application ID is the same one used to configure the Proxy (see Chapter 6, \"Oracle Adaptive Access Manager Proxy\").\n\nThe Proxy will send the AppId to OAAM Server as needed through an HTTP header. This AppId is then used to determine which configuration is used when displaying pages to the client. OAAM Server is configured by a set of properties which will be discussed in more detail later.\n\nProperties can contain an AppId to allow for multiple configurations for multi-tenant scenarios.\n\nThe following example shows how to use the AppId to define a property in the OAAM server:\n\nbharosa.uio.appId1.default.user.group=app1Group\n\nThe bold appId1 is in the location in the property where you use the AppId to configure application specific values.\n\n8.3.2 Determining Default User Groups\n\nYou can configure e ach applicat ion to have a unique default user group. This is the group that a user of that application will be associated with as their Organization ID when the user is first created in the Oracle Adaptive Access Manager database. The Organization ID is used when a user attempts to log in to the application and user data is loaded from the database.\n\nAn example of how Organization ID is used in a property definition is shown as follows:\n\nbharosa.uio.appId1.default.user.group=app1Group bharosa.uio.appId2.default.user.group=app2Group\n\nIn the example, two Organization IDs are defined to two different applications. The application with an AppId of appId 1 has been assigned the Organization ID of app1Group and the application with an AppId of appId2 has been assigned the Organization ID of app2Group.\n\n8.3.3 Configuring Application Properties\n\nAn application in OAAM Server is made up of a grouping or set of properties. You can configure OAAM Server properties on a global or application specific level.\n\nOAAM Server property names are prefixed with bharosa.uio. They are followed by the Application ID or default if the setting is global.\n\nProperty definitions that start with bharosa.uio.default apply to all Application IDs unless overridden by a more specific value.\n\nIn the following example, default is used instead of the appId to designate the property as a global default. The property is used across all applications of the OAAM Server installation unless a specific application has another location specified.\n\nbharosa.uio.default.header = /globalcustomHeader.jsp bharosa.uio.default.footer = /globalcustomFooter.jsp\n\nThe default properties for the path to the custom header and footer are:\n\nbharosa.uio.default.header = path_to_custom_header.jsp bharosa.uio.default.footer = path_to_custom_footer.jsp\n\nAn application-level property is one that only effects a single application when there are more than one application defined in the properties.\n\nIn Oracle Adaptive Access Manager and Access Manager integrations, the AppId is oam. This allows OAAM to display a different header and footer that keeps the same look and feel as Access Manager pages.\n\nThe properties for the path to the Access Management custom header and footer are:\n\nbharosa.uio.oam.header = path_to_custom_header.jsp bharosa.uio.oam.footer = path_to_custom_footer.jsp\n\nThese specific prefix bharosa.uio.oam value overrides the default settings defined as bharosa.uio.default.\n\nIn the following example, app1 uses an application-level defined header and footer file, but app2 uses an application-level defined footer but a global or default defined header file.\n\nbharosa.uio.default.header = /globalcustomHeader.jsp bharosa.uio.default.footer = /globalcustomFooter.jsp bharosa.uio.app1.header = /app1customHeader.jsp bharosa.uio.app1.footer = /app1customFooter.jsp bharosa.uio.app2.footer = /app2customFooter.jsp\n\n8.3.4 Property Extension\n\nIn addition to con figuring properties for each application, you can configure a set of properties that several applications have in common. You can then extend that set to customize the parameters that differ between the set of applications.\n\nIf you were to configure three applications that all use a single footer, but each has a unique header, you can include the following properties:\n\nbharosa.uio.myAppGroup.footer = /myAppGroup/customFooter.jsp bharosa.uio.appId1.extends=myAppGroup bharosa.uio.appId1.header=/client/app1/customHeader.jsp bharosa.uio.appId2.extends=myAppGroup bharosa.uio.appId2.header==/client/app2/customHeader.jsp bharosa.uio.appId3.extends=myAppGroup bharosa.uio.appId3.header==/client/app3/customHeader.jsp\n\n8.5 Enabling the Single Login Page\n\nTo use a single login page, you must:\n\nConfigure the OAAM login page so that the Where is my password link does not display\n\nConfigure the OAAM login page to accept the password along with the user name\n\nEnable the password field on the OAAM login page\n\nEnsure that OAAM is configured to use OAAM HTML Pad instead of the virtual authentication devices\n\nThe properties documented in the following sections will be modified in oaam_custom.properties and the changes deployed as part of the OAAM Shared Extensions Library:\n\nSection 8.5.1, \"Configuring the OAAM Single Login Page So That the \"Where is my password\" Link Does Not Display\"\n\nSection 8.5.2, \"Configuring the OAAM Single Login Page to Accept the Password Along with the User Name\"\n\nSection 8.5.3, \"Enabling the Password Field in the OAAM Single Login Page\"\n\nNote:\n\nIn cases where the property does not exist in the oaam_custom.properties file, you will have to add it.\n\nFor instructions on deploying the OAAM Shared Extensions Library, see Chapter 7, \"Using the OAAM Extensions Shared Library to Customize OAAM.\"\n\n8.5.1 Configuring the OAAM Single Login Page So That the \"Where is my password\" Link Does Not Display\n\nSet the following property to false so that the Where is my password? link is not displayed:\n\nbharosa.uio.default.signon.links.enum.wherepassword.enabled\n\n8.5.2 Configuring the OAAM Single Login Page to Accept the Password Along with the User Name\n\nTo configure OAAM server to accept both user name and password from the OAAM login page, set the following to true:\n\nbharosa.uio.default.login.auth.enabled\n\n8.5.3 Enabling the Password Field in the OAAM Single Login Page\n\nTo enable the Password field on the login page, set the following to true:\n\nbharosa.uio.default.credentials.enum.password.enabled\n\nThen, restart the OAAM Server.\n\n8.5.4 Ensuring that OAAM is Configured to Use the OAAM HTML Pad Instead of the Virtual Authentication Devices\n\nEnsure that you have configured OAAM so that virtual authentication devices are not used in any flow. The two ways to configure OAAM to use the OAAM HTML Pad are documented in this section.\n\nConfigure the OAAM AuthenticationPad Policy to Use the OAAM HTML Pad for Challenge SMS, Registered Image and Caption, Challenge Email, and Challenge Question Rules\n\nLog in to the OAAM Administration Console as an administrator.\n\nDouble-click the Policies node. The Policies Search page is displayed.\n\nIn the Search filters section, select AuthentiPad for the Checkpoint and click Search.\n\nIn the Search Results table, click the OAAM AuthenticationPad Policy link to open the Policy Details page.\n\nIn the Policy Details page, click the Rules tab.\n\nClick the Challenge Question link to open the Rules Details page.\n\nIn the Rules Details page, click the Results tab.\n\nIn the Actions Group list, select OAAM HTML Pad as the action you want triggered by this rule and click Apply to save the modified rule details.\n\nA confirmation dialog is displayed.\n\nClick OK to dismiss the confirmation dialog.\n\nRepeat Steps 5 through 9 for Challenge SMS, Registered Image and Caption, and Challenge Email rules.\n\nIn the Policies Detail page, click the Trigger Combinations tab.\n\nChange the Action Group for all the Trigger Combinations to OAAM HTML Pad and click Apply after making the edits.\n\nA confirmation dialog is displayed.\n\nClick OK to dismiss the confirmation dialog.\n\nConfigure OAAM Server to Use the OAAM HTML Pad\n\nFollow the instructions in Section 7.2, \"Adding Customizations Using the OAAM Extensions Shared Library\" to extract the Extensions Shared Library.\n\nMake the following changes to oaam_custom.properties and save it to the IAM_Home\\oaam\\oaam_extensions\\WEB-INF\\classes\\bharosa_properties directory.\n\nbharosa.uio.default.use.authentipad.checkpoint=false bharosa.uio.default.Password.authenticator.device=DeviceHTMLControl bharosa.uio.default.Password.authenticator.device.upgraded=DeviceHTMLControl bharosa.uio.default.ChallengeQuestion.authenticator.device=DeviceHTMLControl bharosa.uio.default.RegisterQuestions.authenticator.device=DeviceHTMLControl bharosa.uio.default.ChallengeSMS.authenticator.device=DeviceHTMLControl bharosa.uio.default.ChallengeEmail.authenticator.device=DeviceHTMLControl\n\nFollow the instructions in Section 7.2.6, \"Step 5 Repackage the OAAM Extensions Shared Library\" to repackage the Extensions Shared Library, oracle.oaam.extensions.war.\n\nShut down all managed servers if they are running.\n\nStart the WebLogic Administration Server.\n\nStart the WebLogic Server where Oracle Adaptive Access Manager is deployed.\n\nFollow the instructions in Section 7.2.11, \"Step 10 Deploy the New OAAM Extensions Shared Library\" to redeploy the OAAM Extensions Shared Library."
    }
}