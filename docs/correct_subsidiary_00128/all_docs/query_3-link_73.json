{
    "id": "correct_subsidiary_00128_3",
    "rank": 73,
    "data": {
        "url": "https://docs.oracle.com/cd/E21043_01/doc.1111/e15480/uioprxy.htm",
        "read_more_link": "",
        "language": "en",
        "title": "Oracle Adaptive Access Manager Proxy",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.oracle.com/cd/E21043_01/dcommon/gifs/toc.gif",
            "https://docs.oracle.com/cd/E21043_01/dcommon/gifs/index.gif",
            "https://docs.oracle.com/cd/E21043_01/dcommon/gifs/leftnav.gif",
            "https://docs.oracle.com/cd/E21043_01/dcommon/gifs/rightnav.gif",
            "https://docs.oracle.com/cd/E21043_01/doc.1111/e15480/img/nonprxy.gif",
            "https://docs.oracle.com/cd/E21043_01/doc.1111/e15480/img/prxy.gif",
            "https://docs.oracle.com/cd/E21043_01/dcommon/gifs/leftnav.gif",
            "https://docs.oracle.com/cd/E21043_01/dcommon/gifs/rightnav.gif",
            "https://docs.oracle.com/cd/E21043_01/dcommon/gifs/oracle.gif",
            "https://docs.oracle.com/cd/E21043_01/dcommon/gifs/toc.gif",
            "https://docs.oracle.com/cd/E21043_01/dcommon/gifs/index.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2010-08-06T14:45:06+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "5.1.1 Important Terms\n\nFor your reference, important terms are defined in this section.\n\nMicrosoft ISA\n\nFrom the Microsoft Web site: \"the Internet Security and Acceleration (ISA) Server is the integrated edge security gateway that helps protect IT environments from Internet-based threats while providing users with fast and secure remote access to applications and data.\"\n\nUniversal Installation Option\n\nThe Universal Installation Option is the Oracle Adaptive Access Manager integration strategy that does not require any code modification to the protected Web applications. The Universal Installation Option involves placing the Oracle Adaptive Access Manager Proxy in front of the protected Web applications\n\nProxy\n\nA proxy is a server that services the requests of its clients by forwarding requests to other servers. This chapter is concerned with the Web proxy, where the proxy handles Web Protocols, mainly HTTP.\n\nForward Proxy\n\nA forward proxy is an intermediate server that sits between the client and the origin server. To get content from the origin server, the client sends a request to the proxy naming the origin server as the target, and the proxy then requests the content from the origin server and returns it to the client. The client must be specially configured to use the forward proxy to access other sites.\n\nReverse Proxy\n\nA reverse proxy appears to the client just like an ordinary Web server. No special configuration on the client is necessary. The client makes ordinary requests for content in the name-space of the reverse proxy. The reverse proxy then decides where to send those requests and returns the content as if it were itself the origin. The Oracle Adaptive Access Manager Proxy running in the Microsoft Internet Security and Acceleration (ISA) Server is an example of a reverse proxy.\n\nOAAM Server\n\nOAAM Server is the Web application component of Oracle Adaptive Access Manager. The Oracle Adaptive Access Manager Proxy redirects the client browser to OAAM Server for tracking and authentication purposes as defined by the Oracle Adaptive Access Manager Universal Installation Option Proxy XML configuration.\n\n5.3.4 Configuring Memcache (for Linux only)\n\nApache httpd ships with a selection of Multi-Processing Modules (MPMs) which are responsible for binding to network ports on the machine, accepting requests, and dispatching children to handle the requests. On Linux, httpd can run with two different MPMs (the httpd kernel): httpd with prefork MPM (httpd kernel) or with worker MPM. The MPM is built into the httpd and is not a run-time option. Usually, the binary distribution of Apache httpd is with prefork MPM. If you need to use worker MPM, you will have to build Apache httpd using the instructions from the Apache Web site.\n\nWith prefork MPM, httpd maintains a pool of single-threaded processes, where each request is handled by a single process. With worker MPM, httpd maintains a pool of multithreaded processes, where every process could be handling multiple requests at a time. (On Windows, httpd MPM is always in multi-threading mode with a single process.)\n\nOn Linux, in the case where the httpd runs multiple process (irrespective of single or multithreaded), the Oracle Adaptive Access Manager Proxy for Apache session data must be maintained in a common store (database or cache) so that multiple processes can access the session data. The Oracle Adaptive Access Manager Proxy uses memcache (a memory based very fast cache) to store the session data.\n\nAt startup, the Oracle Adaptive Access Manager Proxy autodetects whether httpd is running with a single process or multiple processes. If httpd is running with multiple processes (which is the case with prefork or worker mpm on Linux), it will try to connect to the memcache daemon using default connection parameters (that are defined in Section 5.3.6.1, \"UIO_Settings.xml\"). On Windows, by default, the Oracle Adaptive Access Manager Proxy will use local sessions. It does not connect to the memcache daemon; however it can be configured to maintain session data in the memcache daemon (explained in Section 5.3.6.1, \"UIO_Settings.xml\").\n\nFor the scenarios where the Oracle Adaptive Access Manager Proxy for Apache will be connecting to memcache daemon, you will have to install memcache on your system using the instructions from the memcache Web site and run the memcache daemon(s) before running the Apache httpd.\n\nInstall memcache using instructions at:\n\nhttp://www.danga.com/memcached\n\nYou may already have a binary installation available from your Linux distribution. The Oracle Adaptive Access Manager Proxy for Apache has been tested with version 1.2.5 of memcache.\n\nIn the simple configuration, you can run a single memcache daemon on the machine that is running your Apache httpd.\n\nYou can choose to have a highly scalable installation, where you run more than one memcache daemon-- all of which are accessed by multiple machines running Apache httpds.\n\n5.6.1 Elements of the Proxy Configuration File\n\nThe following sections describe various elements of the Oracle Adaptive Access Manager Proxy configuration file.\n\n5.6.1.1 Components of Interceptors\n\nInterceptors are the most important elements in the Oracle Adaptive Access Manager Proxy configuration. You will see that authoring the Oracle Adaptive Access Manager Proxy configuration file is all about defining interceptors.\n\nThere are two types of interceptors: request interceptors and response interceptors. As the names suggest, request interceptors are used when the Oracle Adaptive Access Manager Proxy receives HTTP requests from the client browser and response interceptors are used when the Oracle Adaptive Access Manager Proxy receives HTTP response from the server i.e. Web application or OAAM Server.\n\nThere are four components to an interceptor and all of them are optional.\n\nList of URLs - the interceptor will be evaluated if the interceptor URL list contains the current request URL or if the URL list is empty.\n\nList of conditions - conditions can inspect the request/response contents, such as checking for the presence of an HTTP header/parameter/cookie, and so on, or testing whether a header/parameter/cookie has a specific value or not. Filters and action defined in the interceptor will be executed only if all the conditions specified are met or if no condition is specified.\n\nList of filters - filters perform an action that might modify the request/response contents or modify some state information in the Oracle Adaptive Access Manager Proxy. For example, a filter can add/remove HTTP headers, save HTTP header/parameter/cookie value in a proxy variable, and so on.\n\nAction - after executing the filters the interceptor will perform the action, if one is specified. Actions can be one of:\n\nredirect the client to a different URL\n\nsend a saved response to the client\n\nperform a HTTP get on server\n\nperform a HTTP post on server\n\nsend a saved request to the server\n\n5.6.1.2 Conditions\n\nConditions are used in the Oracle Adaptive Access Manager Proxy to inspect HTTP request/response or the state information saved in the proxy (variables). Each condition evaluates to either true or false. Conditions are evaluated in the order they are listed in the configuration file until a condition evaluates to false or all conditions are evaluated. Table 5-12 lists conditions that can be defined in an interceptor.\n\nTable 5-12 Conditions Defined in an Interceptor\n\nCondition name Attributes Description\n\nAttribute \"id\" is optional and is used only in trace messages. If no value is specified, the condition name (like HeaderPresent) will be used.\n\nAttribute \"enabled\" is optional and the default value is \"true\". This attribute can be used to enable/disable a condition. The value of this attribute can be set to the name of a global variable; in such case, the condition will be enabled or disabled according to the value of the global variable.\n\nAttribute \"value\" can be set to the name of a proxy variable. In such a case, the proxy will evaluate the variable at checkpoint and use that value in the condition.\n\nAttribute \"mode\" can be set to one of the following: begins-with, ends-with, contains.\n\nAttribute \"ignore-case\" can be set to one of the following: true, false.\n\n5.6.1.3 Filters\n\nFilters are used in the Oracle Adaptive Access Manager Proxy to modify HTTP request/response contents or modify the state information saved in the proxy (variables). Filters are executed in the order they are listed in the configuration file. Table 5-13 lists filters that can be defined in an interceptor.\n\nTable 5-13 Filters Defined in an Interceptor\n\nFilter name Attributes Description\n\n5.6.1.4 Filter Examples - ProcessString\n\nFind the sub-string between the given start-tag and end-tag in the source string, extract the sub-string found and save extracted sub-string in the given variable.\n\n<ProcessString source=\"%RESPONSE_CONTENT\" find=\"sub-string\" start-tag=\"var traceID = '\" end-tag=\"';\" action=\"extract\" variable=\"$TRACE_ID\"/>\n\nFind the given search-string in the source string, replace it with the replace string and save the updated string in the given variable.\n\n<ProcessString source=\"/bfb/accounts/accounts.asp?TraceID=$TRACE_ID\" find=\"string\" search-str=\"$TRACE_ID\" action=\"replace\" replace=\"$TRACE_ID\" variable=\"%POST_URL\"/>\n\nFind the sub-string between the given start-tag and end-tag in the source string, replace it (including the start and end tags) with the evaluated value of the sub string found and save the updated string in the given variable.\n\n<ProcessString source=\"/cgi-bin/mcw055.cgi?TRANEXIT[$UrlSuffix]\" find=\"sub-string\" start-tag=\"[\" end-tag=\"]\" action=\"eval\" variable=\"%LogoffUrl\"/>\n\n5.6.1.5 Filter Examples - FormatString\n\nHere is an example to create a HTTP Basic Authentication response header in variable $AuthHeaderValue, using the username/password in variables %userid and %password:\n\n<FormatString variable=\"%UsernamePassword\" format-str=\"{0}:{1}\" param-0=\"%userid\" param-1=\"%password\" encoder=\"Base64\"/> <FormatString variable=\"$AuthHeaderValue\" format-str=\"Basic {0}\" param-0=\"%UsernamePassword\"/>\n\n5.6.1.6 Actions\n\nAn interceptor can optionally perform one of the following actions after executing all the filters. No further interceptors will be attempted after executing an action.\n\nredirect-client\n\nOften the proxy would need to redirect the client to load another URL; redirect-client is the action to use in such cases. The proxy will send a 302 HTTP response to request the client to load the specified URL.\n\nIf the display-url attribute is specified in the interceptor, the proxy will send a HTTP 302 response to the browser to load the URL specified in display-url attribute. When the proxy receives this request, it will do a HTTP-GET on the server to get the URL specified in \"url\" attribute.\n\nsend-to-client\n\nOften a response from the server would have to be saved in the proxy and sent to the client later after performing a few other HTTP requests; send-to-client is the action to use in such cases. The proxy will send the client the contents of specified variable.\n\nIf the display-url attribute is specified in the interceptor, the proxy will send a HTTP 302 response to the browser to load the URL specified in display-url attribute. When the proxy receives this request, it will send the response specified in the interceptor.\n\nget-server\n\nSometimes the proxy would need to get a URL from the server; get-server is the action to use in such cases. The proxy will send a HTTP-GET request for the specified URL to the server.\n\nIf the display-url attribute is specified in the interceptor or if this action is specified in a response interceptor, the proxy will send a HTTP 302 response to the browser. When the proxy receives this request it will do a HTTP-GET on the server to get the URL specified in \"url\" attribute.\n\npost-server\n\nSometimes the proxy would need to post to a URL in the server; post-server is the action to use in such cases. The proxy will send a HTTP-POST request for the specified URL to the server.\n\nIf display-url attribute is specified in the interceptor or if this action is specified in a response interceptor, the proxy will send a HTTP 302 response to the browser. When the proxy receives this request it will do a HTTP-POST to the server to the URL specified in \"url\" attribute.\n\nsend-to-server\n\nIn certain situations the request from client needs to be saved in the proxy and sent to the server later after performing a few other HTTP requests; send-to-server is the action to use in such cases. The proxy will send the contents of the specified variable to the server.\n\nIf display-url attribute is specified in the interceptor or if this action is specified in a response interceptor, the proxy will send a HTTP 302 response to the browser. When the proxy receives this request it will send the request specified in the interceptor to the server.\n\n5.6.1.7 Variables\n\nThe proxy variables can store string data in the proxy memory. Variables can be used in conditions, filters and actions. For example, SaveHeader filter can be used to save the value a specific header in the given proxy variable. This variable value could later be used, for example, to add a parameter to the request. Variables can also be used in conditions to determine whether to execute an interceptor or not.\n\nThe proxy variables are of 3 types, depending upon the lifespan of the variable. The type of variable is determined by the first letter of the variable name, which can be one of: %, $, @.\n\nAll types of variables can be set using filters like SetVariable, SaveHeader, SaveParam, SaveResponse, etc.\n\nAll types of variables can be unset/deleted by UnsetVariable filter. ClearSession filter can be used to remove all session variables.\n\nRequest variables\n\nRequest variables - these variable names start with %. These variables are associated with the current request and are deleted at the completion of the current request. Request variables are used where the value is not needed across requests.\n\nSession variables\n\nSession variables - these variable names start with $. These variables are associated with the current proxy session and are deleted when the proxy session is cleaned up. Session variables are used where the value should be preserved across requests from a client.\n\nGlobal variables\n\nGlobal variables - these variable names start with @. These variables associated with the current proxy configuration and are deleted when the proxy configuration is unloaded. Global variables are used where the value needs to be preserved across requests and across clients.\n\nGlobal variables can be set at the proxy configuration load time using SetGlobal in the configuration file. Global variables can also be set by adding registry values under key HKLM\\Software\\Bharosa\\Proxy\\Globals. Name of each entry under this key should be the variable name, starting with @. And the data of the entry should be the value of the variable. The registry-type of the value can be REG_DWORD, REG_SZ or REG_EXPAND_SZ.\n\nConfiguring Session ID cookie attributes via Global Variables\n\nThe attributes of the Session ID Cookie can be configured using global variables listed in Table 5-14.\n\nTable 5-14 Global variables to configure session ID cookie\n\nCookie Attribute Global Variable Name Description\n\nPre-defined variables\n\nThe Oracle Adaptive Access Manager Proxy supports the following pre-defined request variables:\n\nTable 5-15 Pre-defined Variables Supported by the Proxy\n\nVariable name Description\n\n5.6.1.8 Application\n\nA single Oracle Adaptive Access Manager Proxy installation can be used to provide multifactor authentication for multiple Web application that run in one or more Web servers. In the Oracle Adaptive Access Manager Proxy configuration, an application is a grouping of interceptors defined for a single Web application.\n\nRequest and response interceptors can be defined outside of an application in the Oracle Adaptive Access Manager Proxy configuration file. These interceptors are called \"global\" interceptors and will be evaluated and executed prior to interceptors defined in applications.\n\n5.6.2 Interception Process\n\nWhen a request arrives, the Oracle Adaptive Access Manager Proxy evaluates request interceptors defined for the URL in the order they are defined in the configuration file. Similarly when on receiving response from the Web server, the Oracle Adaptive Access Manager Proxy evaluates response interceptors defined for the URL in the order defined in the configuration file.\n\nIf the conditions in an interceptor evaluate to true, the Oracle Adaptive Access Manager Proxy will execute that interceptor i.e. execute the filters and action. After executing an interceptor, the Oracle Adaptive Access Manager Proxy will continue with the next interceptor only if the following conditions are met:\n\nno action is specified for the current interceptor\n\npost-exec-action attribute for the current interceptor is continue\n\nEven if one of the conditions is not met the Oracle Adaptive Access Manager Proxy will stop evaluating subsequent interceptors.\n\nIt is highly recommended that \"post-exec-action\" attribute is specified for interceptors that don't define an action. For global interceptors (for example, the interceptors defined outside of any application), the default value of \"post-exec-action\" attribute is continue. For non-global interceptors, the default value is stop-intercept.\n\nAs mentioned earlier the Oracle Adaptive Access Manager Proxy configuration can contain multiple applications. While finding the list of interceptors to evaluate for a URL, only the following interceptors are considered:\n\nglobal interceptors that are defined outside of any application\n\ninterceptors defined in the application associated with the current session\n\nEach session will be associated with at most one application. If no application is associated with the current session (yet) when the proxy finds an interceptor in an application for the URL, it will associate the application with the current session.\n\nIf the current session already has an application associated, and if no interceptor is found in that application for the URL, the proxy will then look for intercepts in other applications. If an interceptor is found in another application for the URL, a new session will be created and the request will be associated with the new session."
    }
}