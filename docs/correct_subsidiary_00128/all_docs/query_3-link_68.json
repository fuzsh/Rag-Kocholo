{
    "id": "correct_subsidiary_00128_3",
    "rank": 68,
    "data": {
        "url": "https://docs.oracle.com/en/middleware/fusion-middleware/12.2.1.4/ikedg/installing-and-configuring-oracle-advanced-authentication-oaa.html",
        "read_more_link": "",
        "language": "en",
        "title": "Installing and Configuring Oracle Advanced Authentication, Oracle Adaptive Risk Management, and Oracle Universal Authenticator",
        "top_image": "",
        "meta_img": "",
        "images": [],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Oracle Corporation"
        ],
        "publish_date": "2021-07-08T10:40:11+00:00",
        "summary": "",
        "meta_description": "Oracle Advanced Authentication and Risk Management (OAA and OARM) authenticates users by using multi-factor authentication. It integrates with Oracle Access Manager for OAuth authentication.",
        "meta_lang": "en",
        "meta_favicon": "/sp_common/book-template/ohc-common/img/favicon.ico",
        "meta_site_name": "Oracle Help Center",
        "canonical_link": null,
        "text": "Previous Next JavaScript must be enabled to correctly display this content\n\nEnterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster\n\nConfiguring the Enterprise Deployment\n\nInstalling and Configuring Oracle Advanced Authentication, Oracle Adaptive Risk Management, and Oracle Universal Authenticator\n\n21 Installing and Configuring Oracle Advanced Authentication, Oracle Adaptive Risk Management, and Oracle Universal Authenticator\n\nOracle Advanced Authentication and Risk Management (OAA and OARM) authenticates users by using multi-factor authentication. It integrates with Oracle Access Manager for OAuth authentication.\n\nFor details about installing Oracle Access Manager, see Configuring Oracle Access Manager Using WDT. If you have an existing OAM deployment, you can use the same deployment. Unlike the traditional Oracle Identity and Access Management products, Oracle Advanced Authentication is deployed as a series of microservices.\n\nIn this release, Oracle uses a standalone container image to install and configure OAA. The container image is started manually in the Kubernetes cluster.\n\nThis chapter includes the following topics:\n\nAbout Oracle Advanced Authentication\n\nOracle Advanced Authentication (OAA) is a standalone microservice that supports establishing and asserting the identity of users. OAA provides strong authentication using Multiple Authentication Factors (MFA). A wide range of authentication (challenge) factors is available out-of-the-box for establishing the identity of users.\n\nOAA supports integration with Oracle Access Management (OAM) to provide MFA capabilities.\n\nFeatures of OAA\n\nRuns as a standalone microservice on a Kubernetes platform and is deployed using Helm charts.\n\nSupports integration with the following clients to enable Multi-factor Authentication (MFA):\n\nClients that provide web-based user login flows, such as Oracle Access Management (OAM). OAA integrates with OAM through the Trusted Authentication Protocol (TAP).\n\nClients that provide API-based user login flows, such as Oracle Radius Agent (ORA). OAA integrates with ORA through REST APIs. This type of integration enables clients to manage its own user flow orchestration.\n\nProvides OAAAuthnPlugin for integrating with OAM. The plug-in also enables migration of user data from the identity store on OAM to OAA.\n\nProvides web UI (Administration UI Console) for administrators to create and manage client registrations, assurance levels, and rules. Administrators can also achieve all the administration tasks using the REST APIs.\n\nProvides web UI (User Preferences UI) for end-users to manage and register their challenge factors. User self-registration and management can also be performed using REST APIs.\n\nWeb UIs are secured by OAM OAuth and OpenID Connect (OIDC).\n\nProvides the following challenge-factors out-of-the-box:\n\nTOTP (Time-based One Time Password) with Oracle Mobile Authenticator (OMA), Google, and Microsoft\n\nOTP (One Time Password) with E-MAIL and SMS\n\nYubikey OTP\n\nFIDO2\n\nKnowledge-based Authentication (KBA)\n\nPush notifications\n\nAbout Oracle Adaptive Risk Management (OARM)\n\nOracle Adaptive Risk Management (OARM) is an integrated system that aggregates risk data associated with users and user activities, analyzes and evaluates business risks posed by users and their activities, and provides advice to be acted upon to mitigate them.\n\nThe system works best when integrated with Oracle Advanced Authentication (OAA), which executes risk mitigation actions to Block, Challenge, or Allow user activities based on the risk assessment associated with it.\n\nThe system can also work in a stand-alone mode where it can be consulted for remedial actions by consuming applications. OARM system is highly extensible owing to its microservices-based architecture, allowing additional capabilities to be added without having to indulge in a costly upgrade process.\n\nFeatures of OARM\n\nOARM system revolves around user activities, which are secured using business friendly rules.\n\nOARM is shipped with an out-of-the-box user authentication activity, which is baked in with a rich set of rules that can readily be used to secure the business. The system also provides the capability to augment the user authentication activity with additional rules, remove rules not applicable to business, or add net new user activities to be monitored. OARM supports seeding data feeds from certified external sources that would also be used in risk analytics. This, combined with OARM's profiling capability, provides the right mix of seed data for running analytics.\n\nConfiguration of rules and managing and monitoring user activities can be achieved with an intuitively designed Administration Console. The Administration Console allows administrators to implement rules applicable to their organization without being concerned with the nuances of the underlying system.\n\nOARM, in conjunction with OAA, provides a large set of modern, multi-factor challenge methods enabling administrators to choose challenge mechanisms that fit their business requirements. OAA also makes integration of OARM with existing Identity Management systems such as Oracle Access Management Suite (OAM), very easy to achieve.\n\nAbout Oracle Universal Authenticator (OUA)\n\nOracle Universal Authenticator allows end users to login to their devices using Oracle Access Management (OAM) credentials which enables end users to access OAM protected applications and other Single-Sign On (SSO) enabled applications via SSO.\n\nOracle Universal Authenticator addresses both client-side and server-side requirements. This guide only provides information related to aspects of the server-side configuration.\n\nNote:\n\nYou must ensure that the April 2024 Stack Patch Bundle is applied to your OAM Installation before installing OUA.\n\nVariables Used in this Chapter\n\nThe later sections of this chapter provide instructions to create a number of files. These sample files contain variables which you need to substitute with values applicable to your deployment.\n\nVariables are formatted as <VARIABLE_NAME>. The following table provides the values you should set for each of these variables.\n\nCharacteristics of the OAA Installation\n\nThis section lists the key characteristics of the OAA installation that you are about to create. Review these characteristics to understand the purpose and context of the procedures that are used to configure OAA.\n\nTable 21-2 Key Characteristics of the OAA Installation\n\nCharacteristics of OAA More Information\n\nEach microservice is deployed into a pod in the Kubernetes cluster.\n\nSee About the Kubernetes Deployment.\n\nPlaces the OAA components in a dedicated Kubernetes namespace.\n\nSee About the Kubernetes Deployment.\n\nUses a vault which can be file-based or OCI-based.\n\nSee Creating a Vault.\n\nUses the Kubernetes services to interact with microservices.\n\nSee Creating the Kubernetes Services.\n\nUses the Kubernetes persistent volumes to hold configuration information.\n\nSee unresolvable-reference.html#GUID-CF07EE44-34D9-4F36-97BE-6B3FBB4FCEA8.\n\nEach Kubernetes pod is built from a pre-built Oracle container image.\n\nSee Identifying and Obtaining Software Distributions for an Enterprise Deployment.\n\nRequires Oracle Access Manager to be installed and configured.\n\nSee Configuring Oracle Identity Governance Using WDT.\n\nInstallation can be standalone or integrated.\n\nSee Oracle Advanced Authentication.\n\nKubernetes Services\n\nIf you are using NodePort Services, the Kubernetes services are created as part of the OAA installation.\n\nTable 21-3 Kubernetes NodePort Services\n\nService Name Type Service Port Mapped Port\n\nedg-cache-proxy\n\nNodePort\n\n32394\n\n20000\n\nedg-cache-rest\n\nNodePort\n\n30418\n\n8080\n\nedg-oaa\n\nNodePort\n\n31867\n\n30343\n\n80\n\n443\n\nedg-oaa-admin-ui\n\nNodePort\n\n32405\n\n443\n\nedg-oaa-policy\n\nNodePort\n\n32387\n\n443\n\nedg-email\n\nNodePort\n\n30800\n\n443\n\nedg-fido\n\nNodePort\n\n30017\n\n80\n\nedg-kba\n\nNodePort\n\n31836\n\n443\n\nedg-sms\n\nNodePort\n\n31350\n\n443\n\nedg-spui\n\nNodePort\n\n31573\n\n443\n\nedg-totp\n\nNodePort\n\n30230\n\n443\n\nedg-yotp\n\nNodePort\n\n30548\n\n443\n\nedg-push\n\nNodePort\n\n30550\n\n443\n\nedg-risk\n\nNodePort\n\n30560\n\n443\n\nedg-risk-cc\n\nNodePort\n\n30570\n\n443\n\nedg-oaa-drss\n\nNodePort\n\n30580\n\n443\n\nedg-oua-admin-ui\n\nNodePort\n\n30525\n\n443\n\nBefore You Begin\n\nBefore you begin the installation, you have to ensure that all the required tasks listed in this topic are complete.\n\nThe following tasks have to complete:\n\nObtain the required Oracle container images staged on each of the Kubernetes worker nodes, or hosted in a container registry to which you have access. For a list of the container images, see Procuring Software for an Enterprise Deployment.\n\nConfigured Oracle HTTP Server as described in Installing and Configuring Oracle HTTP Server.\n\nConfigured Oracle Unified Directory as describer in Installing and Configuring Oracle Unified Directory.\n\nConfigured Oracle Access Manager as described in Configuring Oracle Access Manager Using WDT.\n\nAdded the missing OAM policies for OIRI as described in Adding the Missing Policies to OAM.\n\nEnabled WebGate as described in Configuring Single Sign-On for an Enterprise Deployment.\n\nNote:\n\nIf you are adding to an existing deployment, you should revisit the above sections to ensure that you have the entries in place for Oracle Advanced Authentication.\n\nCreating Users and Groups in LDAP\n\nOracle Advanced Authentication requires two groups to be set up within LDAP.\n\nOAA-Admin-Role, which is used to authenticate users who are permitted to access the OAA Admin Console.\n\nOAA-App-User, which contains the list of users who are permitted to access the OAA User Preference Console.\n\nNote:\n\nA user can be part of only one group at a time.\n\nAll existing users should be part of the existing OAA-APP-User group if they are part of OAA.\n\nTo create the users and groups:\n\nCreate an LDIF file called /workdir/OAA/oaam_admin.ldif with the following contents:\n\nNote:\n\nThis example is for an OAM enabled directory.\n\ndn: cn=oaaadmin,cn=Users,dc=example,dc=com changetype: add objectClass: orclUserV2 objectClass: oblixorgperson objectClass: person objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: oblixPersonPwdPolicy objectClass: orclAppIDUser objectClass: orclUser objectClass: orclIDXPerson objectClass: top objectClass: OIMPersonPwdPolicy givenName: oaaadmin uid: oaaadmin orclIsEnabled: ENABLED sn: oaaadmin userPassword: <Password> mail: oamaamin@example.com orclSAMAccountName: oaaadmin cn: oaaadmin obpasswordchangeflag: false ds-pwp-password-policy-dn: cn=FAPolicy,cn=pwdPolicies,cn=Common,cn=Products,cn=OracleContext,dc=example,dc=com dn:cn=OAA-Admin-Role,cn=Groups,dc=example,dc=com changetype: add objectClass: top objectClass: groupofuniquenames uniqueMember: cn=oaaadmin,cn=Users,dc=example,dc=com dn:cn=OAA-App-User,cn=Groups,dc=example,dc=com changetype: add objectClass: top objectClass: groupofuniquenames\n\nSave the file.\n\nCopy the file to your LDAP container. For example:\n\nkubectl cp workdir/OAA/oaam_admin oudns/edg-oud-ds-rs-0:/u01/oracle/config-input\n\nConnect to the OUD container using the command:\n\nkubectl -n oudns exec -it -c oud-ds-rs edg-oud-ds-rs-0 -- /bin/bash\n\nLoad the LDIF file into the OUD directory using the command:\n\n/u01/oracle/oud/bin/ldapmodify -h edg-oud-ds-rs-lbr-ldap.oudns.svc.cluster.local -p 1389 -D cn=oudadmin -w password -f /u01/oracle/config-input/oaam_admin.ldif\n\nAdding Existing Users to the OAA User Group\n\nIf you want to configure your existing users to use OAA, you should add them to the newly created OAA-App-User group.\n\nRun the following commands in the LDAP instance:\n\necho \"dn:cn=OAA-App-User,cn=Groups,dc=example,dc=com\" > /u01/oracle/config-input/update_group.ldif\n\necho \"changetype: modify\" >> /u01/oracle/config-input/update_group.ldif\n\necho \"add: uniqueMember\" >> /u01/oracle/config-input/update_group.ldif\n\n/u01/oracle/oud/bin/ldapsearch -h edg-oud-ds-rs-lbr-ldap.oudns.svc.cluster.local -p 1389 -D cn=oudadmin -w password -b cn=Users,dc=example,dc=com \"cn=*\" dn | grep -v oaaadmin | grep -v \"dn: cn=Users,dc=example,dc=com\" | grep cn| awk ' { print \"uniqueMember: \"$2 } ' >> /u01/oracle/config-input/update_group.ldif\n\nThe above commands create an LDIF file which using which you can add all of your existing users to the OAA-App-User group.\n\nReview the generated /u01/oracle/config-input/update_group.ldif file and remove any users you do not want to add to the group.\n\nWhen ready to use the LDIF file, run the following command:\n\n/u01/oracle/oud/bin/ldapmodify -h edg-oud-ds-rs-lbr-ldap.oudns.svc.cluster.local -p 1389 -D cn=oudadmin -w password -f /u01/oracle/config-input/update_group.ldif\n\nSetting LDAP Attribute obpsftid for Existing OAA Users\n\nTo enable persistent login for existing OAA users (users who are a member of the LDAP Group OAA-App-User), then each LDAP user must have the LDAP attribute obpsftid set to true.\n\nPerform the following steps to set the LDAP attribute obpsftid:\n\nCreate a file called modify_oaa_user.ldap with the following details:\n\ndn: cn=<username>,<LDAP_USER_SEARCHBASE> changetype: modify replace: obpsftid obpsftid: true\n\nFor Example:\n\ndn: cn=oaauser,cn=Users,dc=example,dc=com changetype: modify replace: obpsftid obpsftid: true\n\nRun the following command from the LDAP instance to update bu:\n\n/u01/oracle/oud/bin/ldapmodify -h edg-oud-ds-rs-lbr-ldap.oudns.svc.cluster.local -p 1389 -D cn=oudadmin -w password -f /u01/oracle/config-input/modify_oaa_user.ldif\n\nNote:\n\nYou must perform the update for each user in the group OAA-App-User.\n\nRun the following LDAP command from your LDAP instance to obtain a list of members in the OAA-App-User group:\n\n/u01/oracle/oud/bin/ldapsearch -h \"<LDAP_HOST>\" -p \"<LDAP_PORT>\" -D \"<LDAP_ADMIN_USER>\" -w \"<LDAP_ADMIN_PWD>\" -b \"cn=<OAA_USER_GROUP>,<LDAP_GROUP_SEARCHBASE>\" \"cn=*\" uniqueMember\n\nFor Example:\n\n/u01/oracle/oud/bin/ldapsearch -h edg-oud-ds-rs-lbr-ldap.oudns.svc.cluster.local -p 1389 -D cn=oudadmin -w password -b \"cn=OAA-App-User,cn=Groups,dc=example,dc=com\" \"cn=*\" uniqueMember\n\nCreating Kubernetes Namespaces\n\nThe Kubernetes namespaces are used to store the OAA Objects.\n\nUse the following command to create a namespace for OAA:kubectl create namespace <OAANS>\n\nFor example:kubectl create namespace oaans\n\nCreating a Container Registry Secret\n\nIf you are using a container registry and want to pull the Oracle container images on demand, you must create a secret that contains the login details of the container registry.\n\nThis step is not required if you have staged the container images locally. Oracle strongly recommends the use of a container registry.\n\nTo create a container registry secret, use the following command:kubectl create secret -n <OAANS> docker-registry <REGISTRY_SECRET_NAME> --docker-server=<REGISTRY_ADDRESS> --docker-username=<REG_USER> --docker-password=<REG_PWD>\n\nFor example:kubectl create secret -n oaans docker-registry regcred --docker-server=iad.ocir.io/mytenancy --docker-username=mytenancy/oracleidentitycloudservice/myemail@email.com --docker-password=<password>\n\nNote:\n\nYou should create a registry secret in the OAA namespace.\n\nCreating a Kubernetes Secret for Docker Hub Images\n\nThis secret allows Kubernetes to pull an image from hub.docker.com which contains third-party images such as helm, kubectl, and logstash commands. These commands are used by the OUD cron job to test for pods that are stuck in the 'Terminating' state, and restart them if necessary.\n\nYou should have an account on hub.docker.com. If you want to stage the images in your own repository, you can do so and modify the helm override file as appropriate.\n\nTo create a Kubernetes secret for hub.docker.com, use the following command:\n\n$ kubectl create secret docker-registry dockercred --docker-server=\"https://index.docker.io/v1/\" --docker-username=\"<DH_USER>\" --docker-password=\"<DH_PWD>\" --namespace=<OUDNS>\n\nFor example:$ kubectl create secret docker-registry dockercred --docker-server=\"https://index.docker.io/v1/\" --docker-username=\"username\" --docker-password=\"<mypassword>\" --namespace=oudns\n\nCreating a GitHub Secret\n\nOAA is dependent on some containers in GitHub. If you want to pull these images directly from GitHub, you should create a secret with your GitHub credentials.See Logging in to GitHub.\n\nTo create a secret called gitcred in your namespace, use the following command:kubectl create secret -n oaans docker-registry gitcred --docker-server=ghcr.io --docker-username=mygituser --docker-password=\"mytoken\"\n\nYou should create this secret in the 'oaa' namespace.\n\nStarting the Management Container\n\nBefore starting the Management Container, ensure that you have created the persistent volumes.\n\nSee Creating File Systems and Mount Targets.\n\nTo start the Management Container:\n\nCreate a file called oaa-mgmt.yaml with the following content:\n\napiVersion: v1 kind: Pod metadata: name: oaa-mgmt namespace: <OAANS> labels: app: oaamgmt spec: restartPolicy: OnFailure volumes: - name: oaaconfigpv nfs: server: <PVSERVER> path: <OAA_CONFIG_SHARE> - name: oaacred nfs: server: <PVSERVER> path: <OAA_CRED_SHARE> - name: oaalogpv nfs: server: <PVSERVER> path: <OAA_LOG_SHARE> - name: oaavaultpv nfs: server: <PVSERVER> path: <OAA_VAULT_SHARE> containers: - name: oaamgmt image: <OAA_MGT_REPOSITORY>:<OAAMGT_VER> volumeMounts: - name: oaaconfigpv mountPath: /u01/oracle/scripts/settings - name: oaacred mountPath: /u01/oracle/scripts/creds - name: oaalogpv mountPath: /u01/oracle/logs - name: oaavaultpv mountPath: /u01/oracle/service/store/oaa command: [\"/bin/bash\", \"-ec\", \"tail -f /dev/null\"] imagePullSecrets: - name: <REGISTRY_SECRET_NAME>\n\nFor example:apiVersion: v1 kind: Pod metadata: name: oaa-mgmt namespace: oaans labels: app: oaamgmt spec: restartPolicy: OnFailure volumes: - name: oaaconfigpv nfs: server: 0.0.0.0 path: /exports/IAMPVS/oaaconfigpv - name: oaacred nfs: server: 0.0.0.0 path: /exports/IAMPVS/oaacredpv - name: oaalogpv nfs: server: 0.0.0.0 path: /exports/IAMPVS/oaalogpv - name: oaavaultpv nfs: server: 0.0.0.0 path: /exports/IAMPVS/oaavaultpv containers: - name: oaamgmt image: iad.ocir.io/mytenancy/oaa-mgmt:12.2.1.4.1_20220419 volumeMounts: - name: oaaconfigpv mountPath: /u01/oracle/scripts/settings - name: oaacred mountPath: /u01/oracle/scripts/creds - name: oaalogpv mountPath: /u01/oracle/logs - name: oaavaultpv mountPath: /u01/oracle/service/store/oaa command: [\"/bin/bash\", \"-ec\", \"tail -f /dev/null\"] imagePullSecrets: - name: regcred\n\nStart the Management CLI Container using the following command:\n\nkubectl create -f oaa-mgmt.yaml\n\nConnect to the running container using the following command:\n\nkubectl exec -n oaans -ti oaa-mgmt –- /bin/bash\n\nNote:\n\nWhen the examples instruct you to \"use the following command from within the OAA-MGMT\", it means that you should connect to the running container as described in this section, and then run the commands as specified.\n\nGranting the Management Container Access to the Kubernetes Cluster\n\nThe OAA Management Container has built-in commands to interact with the Kubernetes cluster. You must provide the Management Container with details on how to access the Kubernetes cluster.\n\nTo provide access, perform the following steps on any node which has a working kubectl command:\n\nCreating a Kubernetes Service Secret\n\nIf you are using Kubernetes 1.24 release or later, then you need to create a secret for the Kubernetes service account using the following command:kubectl create -f <WORKDIR>/create_svc_secret.yaml\n\nFor example:kubectl create -f /workdir/OIRI/create_svc_secret.yaml\n\nHere, <WORKDIR>/create_svc_secret.yaml has the following content:apiVersion: v1 kind: Secret type: kubernetes.io/service-account-token metadata: name: oaa-service-account namespace: <OAANS> annotations: kubernetes.io/service-account.name: \"oaa-service-account\"\n\nCreating a Kubernetes Service Account\n\nCreate a Kubernetes service account in the OAA namespace by using the following command:kubectl apply -f <WORKDIR>/create_svc.yaml\n\nFor example:kubectl apply -f /workdir/OAA/create_svc.yaml\n\nHere, <WORKDIR>/create_svc.yaml has the following content:apiVersion: v1 kind: ServiceAccount metadata: name: oaa-service-account namespace: <OAANS> --- apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: oaa-ns-role namespace: <OAANS> rules: - apiGroups: [\"*\"] resources: [\"*\",\"secrets\"] verbs: [\"*\"] --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: oaa-clusterrolebinding roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: system:persistent-volume-provisioner subjects: - namespace: <OAANS> kind: ServiceAccount name: oaa-service-account --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: oaa-clusteradmin roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - namespace: <OAANS> kind: ServiceAccount name: oaa-service-account --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: oaa-rolebinding namespace: <OAANS> roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: oaa-ns-role subjects: - namespace: <OAANS> kind: ServiceAccount name: oaa-service-account\n\nGenerating the ca.crt Certificate\n\nCreating a Kubernetes Configuration File for OAA\n\nGenerate a Kubernetes configuration file to instruct OAA on how to interact with kubectl.\n\nSet up environment variables for the OAA namespace, and a working directory.\n\nNote:\n\nEnsure that you have set KUBECONFIG to the Kubernetes configuration file before starting.\n\nOAANS=oaans WORKDIR=/workdir/OAA TOKEN=`kubectl -n $OAANS get secret $TOKENNAME -o jsonpath='{.data.token}'| base64 --decode` K8URL=`grep server: $KUBECONFIG | sed 's/server://;s/ //g'`kubectl config --kubeconfig=$WORKDIR/oaa_config set-cluster oaa-cluster --server=$K8URL --certificate-authority=$WORKDIR/ca.crt --embed-certs=truekubectl config --kubeconfig=$WORKDIR/oaa_config set-credentials oaa-service-account --token=$TOKENkubectl config --kubeconfig=$WORKDIR/oaa_config set-context oaa --user=oaa-service-account --cluster=oaa-clusterkubectl config --kubeconfig=$WORKDIR/oaa_config use-context oaa\n\nThese commands generate a file called oaa_config in the <WORKDIR> location. This file contains the Kubernetes cluster details.\n\nCopying Files to the OAA-MGMT Container\n\nCopy the ca.crt (see Generating the ca.crt Certificate) and oaa_config (see Creating a Kubernetes Configuration File for OAA) files to the OAA-MGMT Container, using the following commands:OAANS=oaans WORKDIR=/workdir/OAAkubectl cp $WORKDIR/ca.crt $OAANS/oaa-mgmt:/u01/oracle/scripts/credskubectl cp $WORKDIR/oaa_config $OAANS/oaa-mgmt:/u01/oracle/scripts/creds/k8sconfig\n\nFrom oaa-mgmt, run the following command:chmod 400 /u01/oracle/scripts/creds/k8sconfig\n\nValidating the kubectl Command\n\nValidate that the kubectl command works from inside the Kubernetes container by using the following command from the OAA-MGMT container:kubectl get pod -n $OAANS\n\nFor example:kubectl get pod -n oaans\n\nThe command should show you the running oaa-mgmt pod.\n\nCreating the Helm Configuration File\n\nThe OAA installation procedure is dependent on a helmconfig file being present. This file is almost always an empty file.\n\nTo create the helmconfig file:\n\nAccess the OAA-MGMT pod by using the following commands:\n\nkubectl -n oaans exec -it oaa-mgmt -- /bin/bash\n\nFrom inside the OAA-MGMT pod, create a file called /u01/oracle/scripts/creds/helmconfig with the following contents:\n\napiVersion: \"\" generated: \"0001-01-01T00:00:00Z\" repositories: - caFile: \"\" certFile: \"\" keyFile: \"\" name: idm-helm password: \"\" url: username: \"\"\n\nSave the file.\n\nCreating the OAA Server Certificates\n\nYou need to create certificates for use by OAA. OAA is configured by using only SSL communications.\n\nTo create the certificates, perform the following steps:\n\nObtaining the OAM Certificate\n\nThe OAM server is configured using SSL and this will most likely be terminated at the load balancer, especially if you have followed the instructions in this guide for deploying OAM. See Configuring Oracle Access Manager Using WDT. For OAA to successfully communicate with OAM, it has to trust OAM. To build this trust, you have to add the OAM certificate into the OAA trust store you will create in the next step.\n\nYou can obtain the load balancer certificate from using a browser, such as Firefox. However, the easiest way to obtain the certificate is to use the openssl command. The syntax of the command is as follows:openssl s_client -connect LOADBALANCER -showcerts </dev/null 2>/dev/null|openssl x509 -outform PEM >/workdir/OAA/LOADBALANCER.pem\n\nFor example:openssl s_client -connect login.example.com:443 -showcerts </dev/null 2>/dev/null|openssl x509 -outform PEM >/workdir/OAA/login.example.com.pem\n\nThe openssl command saves the certificate to a file called login.example.com.pem in the /workdir/OAA directory.\n\nCreating the OAA Trust Store\n\nTo create the OAA trust store:\n\nCreate a key file.\n\nexport WORKDIR=/workdir/OAA openssl genrsa -out $WORKDIR/ca.key 4096\n\nCreate a root certificate.\n\nopenssl req -new -x509 -days 3650 -key $WORKDIR/ca.key -out $WORKDIR/ca.crt -subj \"/C=<COUNTRY>/ST=<STATE>/L=<CITY>/O=<ORG>/CN=CARoot\"\n\nFor example:openssl req -new -x509 -days 3650 -key $WORKDIR/ca.key -out $WORKDIR/ca.crt -subj \"/C=US/ST=California/L=Redwood/O=Oracle Corporation/CN=CARoot\"\n\nGenerate the trust store.\n\nopenssl pkcs12 -export -out $WORKDIR/trust.p12 -nokeys -in $WORKDIR/ca.crt -passout pass:<OAA_KEYSTORE_PWD>\n\nMake a note of the password you assign to the trust store; you will require it later.\n\nVerify the root certificate and trust store.\n\nYou can verify that you create the root certificate and trust store using the following commands:\n\nopenssl rsa -in $WORKDIR/ca.key -check\n\nopenssl x509 -in $WORKDIR/ca.crt -text -noout\n\nopenssl pkcs12 -nokeys -info -in $WORKDIR/trust.p12\n\nWhen prompted, enter the password of the trust store.\n\nCreating the Server Certificate\n\nTo create the server certificate:\n\nCreate the server key.\n\nopenssl genrsa -out $WORKDIR/oaa.key 4096\n\nCreate the server certificate.\n\nopenssl req -new -key $WORKDIR/ssl/oaa.key -out $WORKDIR/ssl/cert.csr -subj \"/C=$SSL_COUNTRY/ST=$SSL_STATE/L=$SSL_CITY/O=$SSL_ORG/CN=$OAM_LOGIN_LBR_HOST\"\n\nFor example:openssl req -new -key $WORKDIR/oaa.key -out $WORKDIR/cert.csr -subj \"/C=US/ST=California/L=Redwood/O=Oracle Corporation/CN=login.example.com\"\n\nCreate the self signing request.\n\nopenssl x509 -req -days 1826 -in $WORKDIR/cert.csr -CA $WORKDIR/ca.crt -CAkey $WORKDIR/ca.key -set_serial 01 -out $WORKDIR/oaa.crt\n\nConvert to the PKCS12 format.\n\nopenssl pkcs12 -export -out $WORKDIR/cert.p12 -inkey $WORKDIR/oaa.key -in $WORKDIR/oaa.crt -chain -CAfile $WORKDIR/ca.crt -passout pass:<OAA_KEYSTORE_PWD>\n\nAdding the OAM Certificate to the Trust Store\n\nTo establish a trust between OAA and OAM, the load balancer certificate for OAM should be added to the trust store.\n\nYou can obtain the load balancer certificate from using a browser, such as Firefox. However, the easiest way to obtain the certificate is to use the openssl command. The syntax of the command is as follows:\n\nopenssl s_client -connect LOADBALANCER -showcerts </dev/null 2>/dev/null|openssl x509 -outform PEM >/workdir/OAA/LOADBALANCER.pem\n\nFor example:openssl s_client -connect login.example.com:443 -showcerts </dev/null 2>/dev/null|openssl x509 -outform PEM >/workdir/OAA/login.example.com.pem\n\nThe openssl command saves the certificate to a file called login.example.com.pem in the /workdir/OAA directory.\n\nConvert OAA certificate to the Privacy-Enhanced Mail (PEM) format.\n\nexport WORKDIR=/workdir/OAA\n\nopenssl x509 -in $WORKDIR/oaa.crt -out $WORKDIR/oaa.pem -outform PEM\n\nExport the existing Certificate Authority to a certificate bundle.\n\nopenssl pkcs12 -in $WORKDIR/trust.p12 -out $WORKDIR/bundle.pem -cacerts -nokeys -passin pass:<OAM_KEYSTORE_PWD>\n\nCopy the OAM certificate into the certificate bundle.\n\ncat $WORKDIR/login.example.com.pem >> $WORKDIR/bundle.pem\n\nCreate a new trust store from the certificate bundle.\n\nopenssl pkcs12 -export -in $WORKDIR/bundle.pem -nokeys -out $WORKDIR/trust.p12 -passout pass:<OAA_KEYSTORE_PWD>\n\nCopying the Certificate Files to the Mgmt Pod\n\nCopy the files to the Mgmt pod using the following commands:kubectl cp $WORKDIR/trust.p12 oaans/oaa-mgmt:/u01/oracle/scripts/creds/trust.p12kubectl cp $WORKDIR/cert.p12 oaans/oaa-mgmt:/u01/oracle/scripts/creds/cert.p12\n\nRegistering OAM TAP Partners\n\nYou must register OAM Tap partners that are used to enable OAA and OUA to authenticate with OAM in a more secure manner.\n\nRegistering OAA as OAM TAP Partner\n\nOAA should be registered with OAM as a Trusted Authentication Protocol (TAP) partner to ensure that OAM trusts OAA.\n\nConnect to the OAM Administration pod using the following command:\n\nkubectl exec -n oamns -it accessdomain-adminserver -- /bin/bash\n\nStart the WebLogic Scripting Tool (WLST) using the following command:\n\n/u01/oracle/oracle_common/common/bin/wlst.sh\n\nConnect to the OAM Administration Server using the command:\n\nconnect('WeblogicAdminUser','<WeblogicAdminPassword>','t3://<domain_name>domain-adminserver.<namespace>:<Admin_Port>'\n\nFor example:connect('weblogic','<password>','t3://accessdomain-adminserver.oamns.svc.cluster.local:30701')\n\nRun the following command to regsiter the OAA TAP partner:\n\nregisterThirdPartyTAPPartner(partnerName = \"<OAA_OAM_TAP_PARTNER>\", keystoreLocation= \"<K8_WORKDIR>/OAMOAAKeyStore.jks\", password=\"<OAA_KEYSTORE_PWD>\", tapTokenVersion=\"v2.0\", tapScheme=\"TAPScheme\", tapRedirectUrl=\"<OAM_LOGIN_LBR_PROTOCOL>://<OAM_LOGIN_LBR_HOST>:<OAM_LOGIN_LBR_PORT>/oam/pages/login.jsp\")\n\nFor example:registerThirdPartyTAPPartner(partnerName = \"OAM-OAA-TAP\", keystoreLocation= \"/u01/oracle/user_projects/workdir/OAMOAAKeyStore.jks\", password=\"keystorepassword\", tapTokenVersion=\"v2.0\", tapScheme=\"TAPScheme\", tapRedirectUrl=\"https://login.example.com:443/oam/pages/login.jsp\")\n\nCopy the resulting keystore file to your work directory:\n\nkubectl cp oamns/accessdomain-adminserver:/u01/oracle/user_projects/workdir/OAMOAAKeyStore.jks /workdir/OAA\n\nRegistering OUA as OAP Tap Partner\n\nOUA should be registered with OAM as a Trusted Authentication Protocol (TAP) partner to ensure that OUM trusts OAA. This is only required if you deploy OUA.\n\nConnect to the OAM Administration pod using the following command:\n\nkubectl exec -n oamns -it accessdomain-adminserver -- /bin/bash\n\nStart the WebLogic Scripting Tool (WLST) using the following command:\n\n/u01/oracle/oracle_common/common/bin/wlst.sh\n\nConnect to the OAM Administration Server using the command:\n\nconnect('WeblogicAdminUser','<WeblogicAdminPassword>','t3://<domain_name>domain-adminserver.<namespace>:<Admin_Port>'\n\nFor example:connect('weblogic','<password>','t3://accessdomain-adminserver.oamns.svc.cluster.local:30701')\n\nRun the following command to regsiter the OAA TAP partner:\n\nregisterThirdPartyTAPPartner(partnerName=\"<OAA_OUA_TAP_PARTNER>\", keystoreLocation= \"<K8_WORKDIR>/OAMOUAKeyStore.jks\", password=\"<OAA_KEYSTORE_PWD>\", tapTokenVersion=\"v2.0\", tapScheme=\"TAPScheme\", tapRedirectUrl=\"<OAM_LOGIN_LBR_PROTOCOL>://<OAM_LOGIN_LBR_HOST>:<OAM_LOGIN_LBR_PORT>/oam/pages/login.jsp\")\n\nFor example:registerThirdPartyTAPPartner(partnerName=\"OAM-OUA-TAP\", keystoreLocation= \"/u01/oracle/user_projects/workdir/OAMOUAKeyStore.jks\", password=\"keystorepassword\", tapTokenVersion=\"v2.0\", tapScheme=\"TAPScheme\", tapRedirectUrl=\"https://login.example.com:443/oam/pages/login.jsp\")\n\nCopy the resulting keystore file to your work directory:\n\nkubectl cp oamns/accessdomain-adminserver:/u01/oracle/user_projects/workdir/OAMOUAKeyStore.jks /workdir/OAA\n\nCopy the KeyFile to the Management Container using the command:\n\nkubectl cp /workdir/OAA/OAMOUAKeyStore.jks oaans/oaa-mgmt:/u01/oracle/scripts/creds/OAMOUAKeyStore.jks\n\nCreating the OAA Property File\n\nThe OAA deployment is dependent on the values in a property file. This file is used for creating the database schemas and to deploy OAA itself. The steps to create the file is performed inside the OAA-MGMT pod.\n\nComplete the following steps to create the property file:\n\nCopying the Template File\n\nCopy the supplied template files to the correct location:cp /u01/oracle/installsettings/installOAA.properties /u01/oracle/scripts/settings/installOAA.propertiescp /u01/oracle/installsettings/oaaoverride.yaml /u01/oracle/scripts/settings/oaaoverride.yaml\n\nUpdating the Property File\n\nUpdate the values in the property file as described in this section. If you are modifying a parameter, ensure that the parameter is not put within a comment in the property file.\n\nYou should update the /u01/oracle/scripts/settings/installOAA.properties file.\n\nDatabase Parameters\n\nTable 21-4 Database Parameters\n\nParameter Sample Value Comments\n\ndatabase.createschema\n\ntrue\n\nSet this value to create the OAA schemas.\n\ndatabase.host\n\ndbscan.example.com\n\nSet this value to the database server SCAN address.\n\ndatabase.port\n\n1521\n\nThe database listener port.\n\ndatabase.svc\n\noaaedg.example.com\n\nThe name of the OAA database service.\n\ndatabase.syspassword\n\n-\n\nSet this value to the SYS password of the database. Ensure that the parameter is not put within a comment.\n\ndatabase.schema\n\nEDG_OAA\n\nThe database schema prefix to use.\n\ndatabase.tablespace\n\nEDG_OAA_OAA_TB\n\nThe name of the tablespace to be created. Include the schema prefix to aid manageability.\n\ndatabase.schemapassword\n\n-\n\nThe password to be assigned to the OAA database schema.\n\ndatabase.name\n\n-\n\nEnsure that there is no value added to this parameter.\n\nCommon Deployment Parameters\n\nTable 21-5 Common Deployment Parameters\n\nParameter Sample Value Comments\n\n(*) To encode a username and password, use the following command:echo -n <LDAP_OAMADMIN_USER>:<LDAP_USER_PWD> | base64\n\nFor example:echo -n oamadmin:mypassword | base64\n\nIngress Parameters\n\nIf you use an Ingress controller, the installation creates the Ingress services for you. Provide these values to configure OAA for Ingress.\n\nTable 21-6 Ingress Parameters\n\nParameter Value Description\n\nFile Based Vault\n\nYou have two choices for creating a vault for OAA. You can use either a file based vault or an OCI vault. Oracle recommends you to use the OCI vault. However, if yo want to use the file based vault, you have to set the following parameters in the property file:\n\nTable 21-7 Parameters for the File Based Vault\n\nParameter Value Comments\n\nOCI Based Vault\n\nIf you want to use an OCI based vault, you have to set the following parameters in the property file:\n\nNote:\n\nEach of the vault.oci parameters listed in Table 21-8 should be encoded in Base64. To encode in Base64, run the following command:echo -n \"value\" | base64\n\nTable 21-8 Parameters for the OCI Based Vault\n\nParameter Value Comments\n\nOUA Parameters\n\nYou must set the following parameters when you deploy Oracle Universal Authenticator.\n\nTable 21-9 OUA Parameters\n\nParameter Value Comments\n\nGeneric Parameters\n\nTable 21-10 Generic Parameters\n\nParameter Value Comments\n\nSample installOAA.properties File\n\n##################################### 1. Common Deployment configuration######################################### #Common configuration options #If enabled and set to true, helm installation will only display generated values and will not actually perform the installation. #common.dryrun=true #Name of the helm deployment. It is unique per kubernetes cluster and namespace. Should be all lowercase. common.deployment.name=edg #Override file to override any char values. Must be in yaml format. common.deployment.overridefile=/u01/oracle/scripts/settings/oaaoverride.yaml #Kubernetes context if there are multiple contexts available #common.kube.context=idmoci #Kubernetes deployment namespace where all the services will be installed. common.kube.namespace=oaans #Certificate store used in all the services common.deployment.sslcert=/u01/oracle/scripts/creds/cert.p12 #Trust store used in all the services common.deployment.trustcert=/u01/oracle/scripts/creds/trust.p12 #Passphrase for cert.p12 file. If the value for the passphrase is not present in properties below, it will be prompted during installation. common.deployment.keystorepassphrase=myPassword #Passphrase for trust.p12 file. If the value for the passphrase is not present in properties below, it will be prompted during installation. common.deployment.truststorepassphrase=myPassword #If the flag is enabled then trust certificate in the JRE truststore common.deployment.importtruststore=true #The flag to disable the generation of secret in the keystore provided in the property common.deployment.sslcert. Following secret keys are generated and are required for installation to work which can also be pre-seeded in the keystore. #spui-enckey , aes256_config_key_alias and aes256_db_key_alias common.deployment.generate.secret=true #Deployment mode. Possible values are OAA, Risk or Both. Default mode is Both which will install OAA integrated with Risk. common.deployment.mode=Both #Base64 encoded config key from the migrating system. If enabled the value will be placed in the vault and used for migration of legacy data #common.migration.configkey= #Base64 encoded db key from the migrating system. If enabled the value will be placed in the vault and used for migration of db data. #common.migration.dbkey= #If the integation is required with OIM set the following property to true. This also enables the forgot password functionality. #common.oim.integration=true #Key for Apple push notification service. Only needed when push factor is enabled. #common.deployment.push.apnsjksfile= #Deprecated. By default policy snapshot import is not enabled. Kindly refer document to import it post installation. #common.deployment.import.snapshot=true ##################################### 2. Database configuration######################################### # Database setting for OAA #The installation supports the following ways to install and configure the database: #1. Installing database along with installing services on kubernetes cluster #2. Installing database outside the installation of services and providing the database configuration below. #In case of 2, set database.createschema=false #If set to true schema will be created along with the installation. database.createschema=true #Host IP or name where Oracle DB is running. If hostname is provided then it should be resolvable from the container. database.host=db-scan.example.com #Database port database.port=1521 #Database sysdba user required to create the schema. If database.createschema is set to false, the property is not required. database.sysuser=sys #Sys password will not be prompted if value is provided for the property database.syspassword. If database.createschema is set to false, the property is not required. database.syspassword=sysPassword #Schema name to be created in the database. The value is required. database.schema=EDG_OAA #Name of the tablespace. If database.createschema is set to false, the property is not required. database.tablespace=EDG_OAA_TBS #Schema password will not be prompted if value is provided for the property database.schemapassword database.schemapassword=schemaPassword #Database service name database.svc=edgoaa.example.com #Name of the database. In case of OCI database service, the name is present in the OCI console. If name is not present, use value of database.svc property. database.name=iamdb1 ##################################### 3. OAUTH configuration######################################### #Oauth setting for OAA. Oauth is required for enabling spui , admin and fido. # If oauth.enabled is set as false, install.spui.enabled , install.oaa-admin-ui.enabled and install.fido.enabled should also be set to false otherwise helm installation # will fail. Setting the property to true enables OAM Oauth integration during installation of services. oauth.enabled=true #Create OAuth Domain in OAM oauth.createdomain=true #Create OAuth Resource in OAM oauth.createresource=true #Create OAuth client in OAM oauth.createclient=true #OAuth domain name used when creating the OAuth domain in OAM oauth.domainname=OAADomain #OAuth domain identity provider configured for OAuth in OAM oauth.identityprovider=OAMIDSTORE #OAuth client name oauth.clientname=OAAClient #Grants for OAuth client created during installation. CLIENT_CREDENTIALS is required for validation to pass. oauth.clientgrants=\"PASSWORD\",\"CLIENT_CREDENTIALS\",\"JWT_BEARER\",\"REFRESH_TOKEN\",\"AUTHORIZATION_CODE\",\"IMPLICIT\" #OAuth Client Type of new OAuth client oauth.clienttype=PUBLIC_CLIENT #Client password must conform to regex ^[a-zA-Z0-9.\\-\\/+=@_ ]*$ with a maximum length of 500 oauth.clientpassword=myPassword #OAuth resouce name for new OAuth resource oauth.resourcename=OAAResource #Default score of OAuth resource oauth.resourcescope=viewResource #Post authentication redirecturl is required. Used for validating configuration of OAuth services in OAM by generating a access token. oauth.redirecturl=https://login.example.com:443 #Application id protected by oauth. The value can be any valid string. It is required to setup runtime integration between OAM and OAA. oauth.applicationid=edg #OAM Admin URL where OAuth API are enabled. oauth.adminurl=http://accessdomain-adminserver.oamns.svc.cluster.local:7001 #Base64 encoded authorization header of OAM Admin server oauth.basicauthzheader=EncodedOAMPassord #OAM Managed server providing runtime support for OAuth Services oauth.identityuri=https://login.example.com:443 ##################################### 4. Vault configuration######################################### #Following vaules are possible for vault.provider : oci , fks #If oci is the provider the oci related configuration may be required to perform the vault initialization #Name to be used in vault for this deploymemt. If name is already present in the vault, it will be reused. vault.deploy.name=oaavault #Flag to control the vault creation. If vault is initialized outside the installation, it should be set to false. vault.create.deploy=true #Provider type of vault. Supported provider types are oci, fks. vault.provider=fks #oci vault configuration required for the vault. Check vault documentation on how to obtain value for following properties. #vault.oci.uasoperator= #vault.oci.tenancyId= #vault.oci.userId= #vault.oci.fpId= #vault.oci.compartmentId= #vault.oci.vaultId= #vault.oci.keyId= #fks related configuration. Check the documentation on how to obtain value for properties below. #NFS server ip or resolvable hostname. vault.fks.server=dbdevfssmnt-shared01.dev2fss1iad.databasede2iad.oraclevcn.com #Path on NFS server to be mapped to folder in the running containers. vault.fks.path=/export/IAMPVS/oaavaultpv #Base64 encoded vault password. vault.fks.key=TWFuYWdlcjE= #The value in this property need to be same as the value passed through the helm chart. Do not change it vault.fks.mountpath=/u01/oracle/service/store/oaa ##################################### 5. Chart configuration######################################### #Note: Any property that starts with install. will be provided as input to the helm chart using --set parameter. #Container image repositories where the images can be pulled by the cluster nodes. install.global.repo=iad.ocir.io/mytenancy #Kubernetes secret reference to be used while pulling the docker images from the protected docker registries. install.global.imagePullSecrets\\[0\\].name=regcred install.global.imagePullSecrets\\[1\\].name=gitcred #Chart Database properties install.riskdb.service.type=ExternalName #Image tags to be used install.global.image.tag=12.2.1.4.1_20220419 #Oauth logout URL install.global.oauth.logouturl=https://login.example.com:443/oam/server/logout #Installation api key #Rest Api key for OAA service. install.global.uasapikey=myAPIpassword #Rest Api key for policy service. install.global.policyapikey=myAPIpassword #Rest API key for all factor services. install.global.factorsapikey=myAPIpassword #Rest API key for risk and risk customer care services. install.global.riskapikey=myAPIpassword #Rest API key for DRSS service. install.global.drssapikey=myAPIpassword #In case of OCI vault, the following configuration can be overridden if provided for read-only users during helm installation. #If the value is not provided in the properties below then it will be picked from vault section. #All the values in the section below is optional. #install.global.vault.mapId=b2NpZDEudmF1bHRzZWNyZXQub2MxLmlhZC5hbWFhYWFhYWRjeHl1dXFha2xmejVkbW9rcnpkajZva2Rtdmt0bGp2Y2tyZGIyd3B0emt6bHlkbTN1emEK #install.global.vault.oci.uasoperator= #install.global.vault.oci.tenancyId= #install.global.vault.oci.userId= #install.global.vault.oci.fpId= ##################################### 6. Optional configuration######################################### ##Ingress properties that can be used to enable ingress for services begin deployed. #Deprecated property. Will be removed in future. Use install.global.ingress.enabled instead. #install.ingress.enabled=true #Enable ingress for all services. install.global.ingress.enabled=true #Ingress resource hostname. Should be all lowercase. If provided, dedicated hostname will be used to access the deployment. Otherwise can use any hostname or IP Address. #Following configurations are deprecated. Use install.global.ingress.runtime.host and install.global.ingress.admin.host for specifying runtime and admin host #install.global.ingress.hosts\\[0\\].host=oaainstall-host #install.global.ingress.hosts\\[1\\].host=oaaadmin-host #Runtime host used for accessing runtime services including all factors, oaa ,spui and risk. install.global.ingress.runtime.host=login.example.com #Admin host used for accessing admin, policy and risk-cc services. install.global.ingress.admin.host=iadadmin.example.com ##Following properties are picked from database related properties if not present below. #install.global.dbhost= #install.global.dbport= #install.global.dscredentials= #install.global.dbservicename= ##Following properties are picked from oauth related properties if not present below. #install.global.oauth.oidcidentityuri= #install.global.oauth.oidcaudience= #install.global.oauth.oidcclientid= #if load balancer/ingress url is present, then configure the url here. All UI service will be behind this load balancer/ingress. #In case ingress installation is set to true, the appropriate service url will be fetch after ingress installation # and will be used as service url. If provided, service url from the property below will have higher priority. install.global.serviceurl=https://login.example.com:443 #Service URL of oaa admin, if different from the service url of global oauth. install.oaa-admin-ui.serviceurl=http://iadadmin.example.com:80 #If oauth.enabled is set to false, uncomment following properties. Also when deployment mode is Risk spui, fido and oaa-kba services are not required. #install.spui.enabled=false #install.fido.enabled=false #install.oaa-admin-ui.enabled=false #install.oaa-kba.enabled=false #Also authentication factor Services are enabled by default. To disable them uncomment the lines below. #When deployment mode is Risk, the following configurations is not required. #install.totp.enabled=false #install.push.enabled=false #install.sms.enabled=false #install.yotp.enabled=false #install.email.enabled=false #Default service type for services is NodePort. When deployment mode is Risk following service are not deployed : #OAA, SPUI, All Factors (fido, push, yotp, email ,sms, totp and kba) install.service.type=ClusterIP install.oaa-admin-ui.service.type=ClusterIP install.oaa-policy.service.type=ClusterIP install.spui.service.type=ClusterIP install.totp.service.type=ClusterIP install.fido.service.type=ClusterIP install.push.service.type=ClusterIP install.email.service.type=ClusterIP install.sms.service.type=ClusterIP install.yotp.service.type=ClusterIP install.risk.service.type=ClusterIP install.oaa-kba.service.type=ClusterIP install.risk.riskcc.service.type=ClusterIP #Properties used to install ingress using the ingress chart present in helmcharts folder ##################################### 7. Ingress configuration######################################### #To install the ingress controller along with the services set the following flag to true. ingress.install=false #Kubernetes name space which will be used to install ingress ingress.namespace=ingress-nginx #Admissions controller can be installed seperately. #Ingress admissions name is not present the controller.admissionWebhooks.enabled will be set to false in the nginx ingress chart. #ingress.admissions.name=ingress-nginx-controller-admission #Ingress class name that would be used for installation. Must not be existing ingress.class.name=ingress-nginx-class ingress.service.type=NodePort #anything starting with ingress.install can be additionally supplied to set the ingress chart value. #ingress.install.releaseNameOverride=base ##################################### 8. OAA management configuration######################################### #NFS volumes #install.mount.config.path=<NFS_CONFIG_PATH> #install.mount.config.server=<NFS_CONFIG_SERVER> #install.mount.creds.path=<NFS_CREDS_PATH> #install.mount.creds.server=<NFS_CREDS_SERVER> #install.mount.logs.path=<NFS_LOGS_PATH> #install.mount.logs.server=<NFS_LOGS_SERVER> #OAA mgmt chart release name, default can be used for most installations install.mgmt.release.name=oaamgmt #Location of kube credentials to use for installation. #If not provide credentials in $KUBECONFIG or ~/.kube/config will be used #install.kube.creds=<LOCAL_PATH>/<KUBE_CREDS> #SSL certificates #common.local.sslcert=<LOCAL_PATH>/<LOCAL_CERT_FILE> #common.local.trustcert=<LOCAL_PATH>/<LOCAL_TRUST_FILE> common.deployment.import.snapshot=false common.deployment.import.snapshot.file=/u01/oracle/scripts/oarm-12.2.1.4.1-base-snapshot.zip ##################################### 9. OUA Configuration ################### # OUA properties needed for integration with OAA. # OUA Agent Name. Has to be the same as the TAP Partner in OAM. oua.tapAgentName=OAM-OUA-TAP # OUA Password for the jks file (Base 64 Encoded) oua.tapAgentFilePass=keystorepassword # OUA JKS File Location oua.tapAgentFileLocation=/u01/oracle/scripts/creds/OAMOUAKeyStore.jks # OUA OAM Runtime Endpoint oua.oamRuntimeEndpoint=https://login.example.com:443\n\nCreating the OAA Override File\n\nThe OAA Override file is used to determine the number of each type of container that is started. In a highly available deployment, there should be a minimum of two for each container type.\n\nTo set the number of containers to be started, update the /u01/oracle/scripts/settings/oaaoverride.yaml file to increase the replicaCount for each type of container to the required quantity.\n\nYou can use this file to specify the resource requirements. By declaring resource requirements, you ensure that a particular OAA pod is started only on a worker node that has sufficient capacity to service a pod with these resource requirements. You can also use the HorizontalPodAutoscaler resource (see Deploying the Kubernetes HorizontalPodAutoscaler Resource), which allows the number of pods of a given type to scale up and down as demand dictates.\n\nNote:\n\nAdd any missing entries that you require.\n\nThe example below shows resource requirements added for the oaa and spui containers.\n\nSample oaaoverride.yaml file:\n\n#override file for ooa installation #if database is external to the cluster set the flag to ExternalName riskdb: service: type: ExternalName #replica count of oaa service replicaCount: 1 #The following properties define the dependency spui service and can be overridden here. spui: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 #The following properties define the dependency totp service and can be overridden here. totp: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 #The following properties define the dependency yotp service and can be overridden here. yotp: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 #The following properties define the dependency fido service and can be overridden here. fido: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 #The following properties define the dependency oaa-admin-ui service and can be overridden here. oaa-admin-ui: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 #The following properties define the dependency email service and can be overridden here. email: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 #The following properties define the dependency push service and can be overridden here. push: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 #The following properties define the dependency sms service and can be overridden here. sms: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 #The following properties define the dependency oaa-policy service and can be overridden here. oaa-policy: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 #The following properties define the defaults of risk and riskcc services. risk: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 riskcc: //Need to remove replicaCount: 1 riskcc: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 # #The following properties define the defaults of customfactor service. customfactor: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 2 # #The following properties define the defaults of oaa-kba service. oaa-kba: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1 # #The following properties define the defaults of oaa-drss service. oaa-drss: resources: requests: cpu: 200m memory: \"1Gi\" replicaCount: 1\n\nCreating the Database Schemas\n\nOracle Advanced Authentication automatically creates the schemas in the database.\n\nEnabling OAuth\n\nOracle Access Manager should have OAuth enabled to act as an OAuth server for OAA.\n\nTo enable OAuth:\n\nLog in to the OAM Administration Console using the http://iadadmin.example.com/oamconsole URL. Log in using your OAM Administration user name, for example, oamadmin.\n\nFrom the Welcome page, click Configuration, and then click Available Services.\n\nClick Enable Service next to OAuth and OpenIDConnect Service (or ensure that the green status check mark appears).\n\nValidating OAuth\n\nAt this stage, it is important to ensure that OAuth is available and that Oracle HTTP is directing requests to the OAuth Server.\n\nYou can perform a quick test by running the following command:curl -s -k --location --request GET https://login.example.com/oauth2/rest/token\n\nYou should see the Method Not Allowed message. This means that you have successfully sent a request to the OAuth Server but it has rejected the request. If you do not see this message, ensure the following:\n\nYou have successfully enabled OAuth in the OAM console.\n\nYou have the appropriate Oracle HTTP Server entries in the virtual hosts files.\n\nYou have the OAuth policies defined in OAM.\n\nDeploying Oracle Advanced Authentication\n\nTo deploy the OAuth application, you should perform the steps inside the OAA-MGMT pod.\n\nEdit the /u01/oracle/scripts/settings/installOAA.properties file.\n\nSet the value of the database.createschema property to false.\n\nRun the following command:\n\ncd /u01/oracle/scripts/settings/\n\n/u01/oracle/OAA.sh -f installOAA.properties\n\nThis command will deploy the OAA and OARM containers. It will also set up OAuth in the OAM Server. If the command fails, rectify the issue and edit the /u01/oracle/logs/status.info file to change the value from false to true. You can then rerun the command.\n\nResolving Timeouts\n\nYour deployment may fail if it takes longer than the expected time to pull the container images from the container registry. You will see the error in the deployment log.\n\nThe error appears as follows:\n\nNAME: oaainstall LAST DEPLOYED: Thu Apr 29 20:24:09 2021 NAMESPACE: default STATUS: deployed REVISION: 1 Error: timed out waiting for the condition TEST SUITE: oaainstall-email-sanity-check Last Started: Thu Apr 29 20:24:12 2021 Last Completed: Thu Apr 29 20:29:12 2021 Phase: Failed NOTES: Get the Oracle Advance Authentication(OAA) Service URL by running these commands: bash -c 'export NODE_PORT=$(kubectl get --namespace default -o jsonpath=\"{.spec.ports[0].nodePort}\" services oaainstall-oaa) && export NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\"{.items[0].status.addresses[0].address}\") && echo \"\" && echo https://$NODE_IP:$NODE_PORT/health' Helm test failed Fail to install OAA. Please check the log file\n\nYou can run the following command to check the status of the pods:kubectl get pods\n\nThe output appears as follows:\n\nNAME READY STATUS RESTARTS AGE edg-email-66944cd9d8-7vp7g 1/1 Running 0 41m edg-email-66944cd9d8-t8gcc 1/1 Running 0 41m edg-fido-66b969fb6f-9zcnr 1/1 Running 0 41m edg-fido-66b969fb6f-mzj2n 1/1 Running 0 41m edg-oaa-86cd6b4ff6-pxrmm 1/1 Running 0 41m edg-oaa-86cd6b4ff6-svlpk 1/1 Running 0 41m edg-oaa-admin-ui-764c555cf4-6xtzv 1/1 Running 0 41m edg-oaa-admin-ui-764c555cf4-rxs2c 1/1 Running 0 41m edg-oaa-kba-6d6d7bcd59-rwm5q 1/1 Running 0 41m edg-oaa-policy-7cc99c7bc5-8tpzz 1/1 Running 0 41m edg-oaa-policy-7cc99c7bc5-rsvqr 1/1 Running 0 41m edg-push-794c8d89d-6xcjt 1/1 Running 0 41m edg-push-794c8d89d-b9xl4 1/1 Running 0 41m edg-risk-768fddd6b5-6k4p4 1/1 Running 0 41m edg-risk-768fddd6b5-wrcjh 1/1 Running 0 41m edg-risk-cc-77fcd64cb5-7nfft 1/1 Running 0 41m edg-risk-cc-77fcd64cb5-bfzfn 1/1 Running 0 41m edg-sms-7bdbf58d66-kk6qq 1/1 Running 0 41m edg-sms-7bdbf58d66-lp8jj 1/1 Running 0 41m edg-spui-59649cd778-5rbgb 1/1 Running 0 41m edg-spui-59649cd778-nkl8s 1/1 Running 0 41m edg-totp-7dc888b994-m854x 1/1 Running 0 41m edg-totp-7dc888b994-zgfkw 1/1 Running 0 41m edg-yotp-569fbbc7df-27zgm 1/1 Running 0 41m edg-yotp-569fbbc7df-9qsx7 1/1 Running 0 41m oaa-mgmt 1/1 Running 0 45m\n\nIf you give it time, the pods will eventually start. You can avoid the timeout by adjusting its value in the /u01/oracle/helmcharts/oaa/values.yaml file, inside the OAA Management container. The section are:\n\ntest: # test.image -- image name that will be used to test sanity of installation. image: shared/oracle/linux:8-slim # test.timeoutsecs time for which sanity tests will run before timing out. timeoutsecs: 480 # test.waitsecs time interval between sanity checks. waitsecs: 50\n\nImporting the OAA Policy Snapshot\n\nThe snapshot populates the database schemas with the seed data. You should perform the steps to import inside the OAA-MGMT pod.\n\nTo import the OAA policy snapshot:\n\nEnsure that the settings/installOAA.properties file has entries for the following:\n\ncommon.deployment.import.snapshot=true common.deployment.import.snapshot.file=/u01/oracle/scripts/oarm-12.2.1.4.1-base-snapshot.zip\n\nImport the snapshot using the following commands:\n\ncd ~/scripts\n\n./importPolicySnapshot.sh -f settings/installOAA.properties\n\nThe snapshot is applied if you see the message:\n\nSuccessfully applied snapshot:\n\nNote:\n\nIf you see an error similar to 504 Gateway Time-out, then reissue the importPolicySnapshot.sh file. The step should succeed the second time.\n\nReset the Snapshot flag to false to ensure that future upgrades do not overwrite the data.\n\nUpdate the settings/installOAA.properties file and set common.deployment.import.snapshot=false\n\nAdding the OAA Certificate to the OHS Wallet\n\nYou should ensure that Oracle HTTP Server trusts the OAA servers. To build the trust, you have to add the OAA certificate to the Oracle HTTP Server wallet.\n\nTo add the wallet:\n\nIf you have not already done so, create an Oracle Wallet on each Oracle HTTP Server. See Creating an Oracle HTTP Server Wallet\n\nObtain the OAA certificate using the following command:\n\nopenssl s_client -connect <K8WORKER>:<OAA_ADMIN_K8> -showcerts </dev/null 2>/dev/null|openssl x509 -outform PEM > oaa.pem\n\nWhere:\n\n<K8WORKER> is one of the Kubernetes worker nodes.\n\n<OAA_ADMIN_K8> is the NodePort Service of the OAA Administration pod. You can find the NodePort Service using the following command:kubectl get service -n oaans | grep NodePort | grep oaa-admin | awk '{ print $5 }'\n\nAdd the certificate to the wallet using the following commands:\n\nexport ORACLE_HOME=/u02/private/oracle/products/ohs/\n\nexport OHS_DOMAIN_HOME=/u02/private/oracle/config/domains/ohsDomain\n\nexport PATH=$ORACLE_HOME/bin:$ORACLE_HOME/oracle_common/bin:$PATH\n\norapki wallet add -wallet $OHS_DOMAIN_HOME/ohswallet -trusted_cert -cert oaa.pem -auto_login_only\n\nValidating OAA\n\nAfter deploying OAA, ensure that OAA is working by accessing the OAA Administration Console.\n\nTo validate OAA, log in to the OAA Administration Console using the http://iadadmin.example.com/oaa-admin URL.\n\nYou should be redirected to the OAM Credential Collection page. Enter the user name and password for oaaadmin. If all is well, you will be asked to accept the OAuth authentication. When you click Allow, you will see the OAA Administration page.\n\nConfiguring Email/SMS Servers and Automatic User Creation\n\nOAA has built-in email/SMS integration. You have to configure OAA to use the Email SMTP client and the SMS client.\n\nIn addition you can set SPUI to automatically create users in the OAA database that already exist in LDAP when a user first logs into SPUI. This is an additional configuration property that can be set.\n\nYou can configure the OAA Email/SMS client using cURL. The curl command is:\n\ncurl --location --insecure --request PUT '<OAM_LOGIN_LBR_PROTOCOL>://<OAM_LOGIN_LBR_HOST>:<OAM_LOGIN_LBR_PORT>/oaa/runtime/config/property/v1' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: Basic <Encoded OAA User>' \\ -d '[ { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeEmail.umsClientURL\", \"value\": \"<UMS_SERVER_URL>\" }, { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeEmail.umsClientName\", \"value\": \"<UMS_ADMIN_USER>\" }, { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeEmail.umsClientPass\", \"value\": \"<UMS_ADMIN_PASSWORD>\" }, { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeSMS.umsClientURL\", \"value\": \"<UMS_SERVER_URL>\" }, { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeSMS.umsClientName\", \"value\": \"<UMS_ADMIN_USER>\" }, { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeSMS.umsClientPass\", \"value\": \"<UMS_ADMIN_PASSWORD>\" } { \"name\": \"oaa.default.spui.pref.runtime.autoCreateUser\", \"value\": \"true\" } ]'\n\nFor example:curl --location --insecure --request PUT 'http://login.example.com/oaa/runtime/config/property/v1' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: Basic b2FhLW9hYTphcGlrZXl0b2Jlc2V0ZHVyaW5naW5zdGFsbGF0aW9u' \\ -d '[ { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeEmail.umsClientURL\", \"value\": \"http://governancedomain-cluster-soa-cluster.oigns.svc.cluster.local:8001/ucs/messaging/webservice \" }, { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeEmail.umsClientName\", \"value\": \"weblogic\" }, { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeEmail.umsClientPass\", \"value\": \"password\" }, { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeSMS.umsClientURL\", \"value\": \"http://governancedomain-cluster-soa-cluster.oigns.svc.cluster.local:8001/ucs/messaging/webservice \" }, { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeSMS.umsClientName\", \"value\": \"weblogic\" }, { \"name\": \"bharosa.uio.default.challenge.type.enum.ChallengeSMS.umsClientPass\", \"value\": \"password\" } { \"name\": \"oaa.default.spui.pref.runtime.autoCreateUser\", \"value\": \"true\" } ]'\n\nIntegrating Oracle Advanced Authentication with Oracle Access Manager\n\nThis procedure explains the procedure to configure OAA with OAM such that when you access a protected resource, you are presented first with the OAM credential collector, and then the session is handed off to OAA for pin code validation.\n\nThis integration is in addition to using OAM as an OAuth Server.\n\nThe integration procedure includes the following steps:\n\nConfiguring the OAM Agent in OAA\n\nTo configure the OAM Agent:\n\nLog in to the OAA Administration Console with you administrator credentials:\n\nhttp://iadadmin.example.com/oaa-admin\n\nUnder Quick Actions, select Create OAM Integration Agent.\n\nIn the Create Agent, Details tab, enter the following:\n\nName: <OAA_OAM_TAP_PARTNER> - The name of the partner should be same as the TAP partner name that you registered earlier. For example: OAM-OAA-TAP. See Registering OAA as OAM TAP Partner.\n\nDescription: OAM TAP partner for OAA.\n\nClient Type: Oracle Access Manager.\n\nClient ID: Click Re-Generate.\n\nClient Secret: Click Re-Generate.\n\nPrivate Key File: Either drag and drop the /workdir/OAA/OAMOAAKeyStore.jks key file, or click + to select the file from the file system.\n\nPrivate Key Password: The password (<OAA_KEYSTORE_PWD>) you specified for the keystore at the time of registering the TAP partner.\n\nCopy the values of Client ID and Client Secret to a safe place as these are required later, at the time of configuring OAM.\n\nClick Save.\n\nIn the Agents screen, click the name of the agent you just created. For example: OAM-OAA-TAP\n\nClick the Assurance Levels tab.\n\nClick Create to create a new assurance level.\n\nIn the Create Assurance Level screen, enter the following details, and click Create:\n\nName: OAM-OAA-Level\n\nDescription: OAM-OAA-Level for OAM Integration.\n\nUnder Define Policy, select the factors to assign to the assurance level. For example: Oracle Mobile Authenticator and Email Challenge.\n\nClick Save.\n\nRestarting the OAM Domain\n\nYou should restart the OAM domain to enable the OAM Managed Servers to use the OAA plug-in.\n\nUse the following commands to restart the domain:kubectl -n <OAMNS> patch domains <OAM_DOMAIN_NAME> --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/serverStartPolicy\", \"value\": \"NEVER\" }]'\n\nNote:\n\nCheck that all the Kubernetes pods (with the exception of the helper pod) in the namespace have stopped by using the following command:kubectl -n <OAMNS> get all\n\nAll the Kubernetes pods (with the exception of the helper pod) in the namespace will be stopped when there are no entries for the Administration Server or the Managed Servers. For example:kubectl -n oamns patch domains accessdomain --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/serverStartPolicy\", \"value\": \"NEVER\" }]'kubectl -n oamns patch domains accessdomain --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/serverStartPolicy\", \"value\": \"IF_NEEDED\" }]'\n\nCreating an OAM Authentication Module for OAA\n\nAfter you have imported the OAA plug-in into OAM, you have to create an OAM Authentication Module:\n\nLog in to the OAM Administration Console using the http://iadadmin.example.com/oamconsole URL.\n\nIn the OAM console, select Application Security, select Plug-ins, and then select Authentication Modules.\n\nIn the Authentication Modules tab, click Create Authentication Module, and then click Create Custom Authentication Module.\n\nIn the Authentication Module page, click the General tab and enter the following information:\n\nName: OAA-MFA-Auth-Module\n\nDescription: OAA MFA Authentication Module\n\nClick the Steps link and in the Steps tab, click Add.\n\nIn the Add New Step page, enter the following details and click OK:\n\nStep Name: UserIdentificationStep\n\nDescription: Identify the User\n\nPlug-in Name: UserIdentificationPlugIn\n\nClick Add again, enter the following details, and then click OK:\n\nStep Name: User OAA MFA Step\n\nDescription: MFA with OAA\n\nPlug-in Name: OAAAuthnPlugin\n\nClick Add again, enter the following details, and then click OK:\n\nStep Name: PasswordValidation\n\nDescription: Validate user password on OAM\n\nPlug-in Name: UserAuthenticationPlugin\n\nClick User OAA MFA Step and specify the following information:\n\nOAA_URL: <SPUI_URL/authn/v1>, for example, https://login.example.com:443/oaa/rui/authn/v1.\n\nTAP_AGENT: <partner_name> - This value should be same as the name given at the time of registering the TAP partner with OAM. For example: OAM-OAA-TAP. See Registering OAA as OAM TAP Partner.\n\nAPPLICATION_ID: <app_id> - This is the name of the OAA group to associate with the OAM user names that are migrated to OAA. For example: edg. This value must match with the value of oauth.applicationid used in the installOAA.properties file, when installing OAA.\n\nIDENTITY_STORE_REF: <default_user_identity_store> - This value should be set to the value of the default store set in the OAM Console (User Identity Stores under Configuration). For example: OAMIDSTORE.\n\nASSURANCE_LEVEL: <assurance_level> - This value should be set to the assurance level created in OAA earlier. For example: OAM-OAA-Level. See Configuring the OAM Agent in OAA.\n\nCLIENT_ID: <client_id> - This is the value of the Client ID that is copied when creating the agent. For example: 485aa420-85c0-47db-958c-04c1258e4bc2.\n\nCLIENT_SECRET: <client_secret> - This is the value of the client secret that is copied when creating the agent. For example: 3bc9bc4d-ebd7-4909-bcf5-2ac7472c13db.\n\nLDAP_ATTRS: mail, postalcode - These are the LDAP attributes set for the email address and to use with the Oracle Mobile Authenticator for user names stored in the LDAP server. These attributes enable the migration of user data to OAA. Entries should be in lowercase.\n\nClick Save.\n\nCreating an OAM Authentication Scheme for OAA\n\nCreate an OAM Authentication Scheme to enable the use of the OAA Authentication Module.\n\nLog in to the OAM Administration Console using the http://iadadmin.example.com/oamconsole URL.\n\nIn the OAM console, select Application Security, select Access Manager, and then select Authentication Schemes.\n\nIn the Authentication Schemes tab, select Create Authentication Scheme and enter the following information:\n\nName: OAA-MFA-Scheme\n\nDescription: OAA MFA Authentication Scheme\n\nAuthentication Level: 2\n\nChallenge Method: Form\n\nChallenge Redirect URL: /oam/server/\n\nAuthentication Module: OAA-MFA-Auth-Module\n\nChallenge URL: /pages/login.jsp\n\nContext Type: Default\n\nContext Value: /oam\n\nChallenge Parameters: initial_command=NONE\n\nClick Apply to save the changes.\n\nCreating the OAM Authorization Policy\n\nTo enable protection of resources with OAA, you have to create an OAM Authorization Policy.\n\nLog in to the OAM Administration Console using the http://iadadmin.example.com/oamconsole URL.\n\nIn the OAM Console, select the Application Security menu, select Access Manager, and then click Application Domains.\n\nIn the Search Application Domains window, click Search to list the available domains.\n\nSelect the IAM Suite domain.\n\nSelect the Authentication Policies tab and click Create to create a new authentication policy. Enter the following information:\n\nName: OAA_MFA-Policy\n\nAuthentication Scheme: OAA-MFA-Scheme\n\nClick Apply to save the changes.\n\nSet OAA Cookie Domain\n\nThe property oaa.browser.cookie.domain must be set to the OAA host domain in order to collect the device cookie. For example, if the OAA is accessible on https://login.example.com, then set the value to login.example.com.\n\nThe property oaa.risk.integration.postauth.cp must be set to postauth to invoke risk rules for use cases such as Risky IP, Geo-velocity, and Geo-location.\n\nSetting Properties\n\nRun the following command to obtain the encoded OAA user:\n\necho -n <OAA_DEPLOYMENT>-oaa-policy:<OAA_API_PWD> | base64\n\nFor example:\n\ncurl --location -g --request PUT 'http://iadadmin.example.com/policy/config/property/v1' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: Basic ZWRnLW9hYS1wb2xpY3k6bXlBUElwYXNzd29yZAo=' \\ --data '[ { \"name\": \"oaa.browser.cookie.domain\", \"value\": \"login.example.com\" }, { \"name\": \"oaa.risk.integration.postauth.cp\", \"value\": \"postauth\" } ]'\n\nUse the <POLICY_URL>/config/property/v1 REST API to set the properties.\n\nFor example:\n\ncurl --location -g --request PUT '<OAA_POLICY_URL>/config/property/v1' \\ --header 'Content-Type: application/json' \\ --header 'Authorization: Basic <Encoded OAA User>' \\ --data '[ { \"name\": \"oaa.browser.cookie.domain\", \"value\": \"<host.domain>\" }, { \"name\": \"oaa.risk.integration.postauth.cp\", \"value\": \"postauth\" } ]'\n\nValidating the OAM-OAA Integration\n\nThis is a simple method of validating the integration of OAM and OAA. Oracle recommends that you roll back all the steps after completing the validation.\n\nThe validation procedure comprises the following steps:\n\nCreating the HTML Test Page\n\nCreate a simple HTML test page on each Oracle HTTP server. This test page provides a simple resource that can be protected by OAA.\n\nOn the OHS Servers located in the WEB_DOMAIN_HOME/config/fmwconfig/components/OHS/<instance_name>/htdocs directory, create a test page called test_page.html with the following content:\n\nOn the OHS servers located in the WEB_DOMAIN_HOME/config/fmwconfig/components/OHS/<instance_name>/htdocs directory, create a test page called test_page.html with the following content:\n\n<!DOCTYPE html> <html> <body> <h1>This is a Test Page</h1> </body> </html>\n\nSave the file and restart the Oracle HTTP servers.\n\nCreating an Oracle Resource for the Test Page\n\nAfter you create the test page, create a resource in OAM so that WebGate is aware of it and protects it using OAA.\n\nLog in to the OAM Administration Console using the http://iadadmin.example.com/oamconsole URL.\n\nIn the OAM Console, select Access Manager and click Application Domains.\n\nClick Search to view the defined application domains.\n\nClick the IAM Suite domain.\n\nSelect the Resources tab, click Create, and enter the following information:\n\nType: HTTP\n\nDescription: OAA Resource\n\nHost Identifier: IAMSuiteAgent\n\nResource URL: /test_page.html\n\nOperations: ALL\n\nProtection Level: Protected\n\nAuthentication Policy: OAA_MFA-Policy\n\nAuthorization Policy: Protected Resource Policy\n\nClick Apply to save the changes.\n\nNo restarts are necessary but it can take a short time for the changes to propagate.\n\nCreating a Test User\n\nCreate a test user in Oracle Unified Directory (OUD). Assign this user to the OAA-APP-User group. The user should also have a valid email address if you want to receive One Time Pin Codes through email, and a postal code if you have configured Oracle Mobile Authenticator.\n\nYou can use the following sample ldif file to create a test user:dn: cn=oaauser,cn=Users,dc=example,dc=com changetype: add objectClass: orclUserV2 objectClass: oblixorgperson objectClass: person objectClass: inetOrgPerson objectClass: organizationalPerson objectClass: oblixPersonPwdPolicy objectClass: orclAppIDUser objectClass: orclUser objectClass: orclIDXPerson objectClass: top objectClass: OIMPersonPwdPolicy givenName: oaauser uid: oaauser orclIsEnabled: ENABLED sn: oaauser userPassword: password mail: oaauser@example.com orclSAMAccountName: oaauser cn: oaauser postalCode: oaauser obpasswordchangeflag: false obpsftid: true ds-pwp-password-policy-dn: cn=FAPolicy,cn=pwdPolicies,cn=Common,cn=Products,cn=OracleContext,dc=example,dc=com dn:cn=OAA-App-User,cn=Groups,dc=example,dc=com changetype: modify add: uniqueMember uniqueMember: cn=oaauser,cn=Users,dc=example,dc=com\n\nValidating the Deployment\n\nTo validate the deployment:\n\nGo to https://login.example.com/test_page.html.\n\nWhen prompted for a username and password, enter your 'oaa' test user that you created earlier. See Creating a Test User.\n\nSelect Email to receive the one time pin through email.\n\nWhen prompted, enter the one time pin you received through email.\n\nYour test page appears.\n\nConfiguring Oracle Universal Authentication\n\nThis section describes various tasks related to configuring Oracle Universal Authentication.\n\nNote:\n\nCurrently, Oracle Universal Installer only supports Microsoft Windows Clients.\n\nMicrosoft Entra Domain\n\nThe following prerequisites are required while using Microsoft Windows clients to login with OUA.\n\nYou must have a Microsoft Entra Domain Services managed domain.\n\nYou must create a Microsoft Windows user in the domain if you want to use OUA.\n\nAdministrators must have a working knowledge of Microsoft Entra before using OUA. The following document does not contain instructions on how to setup a Microsoft Entra Domain, LDAP directories or user accounts.\n\nPrerequisite Configurations for Windows Desktop Environment\n\nThe following prerequisites are required for Microsoft Windows clients to login with OUA and is applicable to any Windows Desktop or Server where the OUA client application is installed:\n\nA Microsoft Windows Desktop client running Windows 10 or 11, or a Windows 2016 or 2019 Server.\n\nThe Microsoft Windows Desktop or Server must have joined the Windows domain in Microsoft Entra.\n\nThe Microsoft Windows user who wants to login via OUA must be able to login to the Windows domain with a valid username and password.\n\nChrome v88+, Microsoft Edge v92+ is required for the OUA SSO Browser Extension.\n\nAdministrator credentials to install the OUA client application.\n\nOAM User Accounts\n\nThe Microsoft Windows user must have a user account in the User Identity Store used by Oracle Access Management (OAM). The user must be able to login with Single-Sign On (SSO) to an application protected with OAM.\n\nCreating an OAM Integration Agent for DRSS\n\nPerform the following steps to configure OAM Integration Agent for DRSS and update DRSS configuration parameters:\n\nRun the following command to connect to the OAA Management container:\n\nkubectl exec -n oaans -ti oaa-mgmt -- /bin/bash\n\nRun the following command to change the directory to /u01/oracle/scripts/drssconfig:\n\ncd /u01/oracle/scripts/drssconfig\n\nRun the following command to execute the script configureDRSS.sh:\n\n./configureDRSS.sh -f /u01/oracle/scripts/settings/installOAA.properties\n\nSet the DRSS parameter oua.drss.oaa.group to the value of oauth.applicationid from the installOAA.property file using the following command:\n\ncurl --location -g -v -k --request PUT 'https://login.example.com/oaa-drss/oua/property/v1' \\ --header 'Content-Type: application/json' \\ -u <OAA_DEPLOYMENT>_OAA_DRSS:<OAA_API_PWD> \\ -d '[ { \"name\": \"oua.drss.oaa.group\", \"value\": \"<OAA_DEPLOYMENT>\" } ]'\n\nFor Example: curl --location -g -v -k --request PUT 'https://login.example.com/oaa-drss/oua/property/v1' \\ --header 'Content-Type: application/json' \\ -u EDG_OAA_DRSS: myAPIpassword \\ -d '[ { \"name\": \"oua.drss.oaa.group\", \"value\": \"edg\" } ]'\n\nEnabling the OAM Session Management APIs\n\nPerform the following steps to enable the OAM Session Management APIs within the oam-config.xml.\n\nCreate a file called session.xml with the following content:\n\n<Configuration> <Setting Name=\"RequireAuthorizationHeader\" Type=\"xsd:boolean\" Path=\"/DeployedComponent/Server/NGAMServer/Profile/RestServices/Token/RequireAuthorizationHeader\">true</Setting> </Configuration>\n\nSave the file.\n\nRun the following command to update oam-config.xml:\n\ncurl -s -u <LDAP_WLSADMIN_USER>:<LDAP_WLSADMIN_PWD> -H 'Content-Type: text/xml' -X PUT http://<OAM_ADMIN_LBR_HOST>:<OAM_ADMIN_LBR_PORT>/iam/admin/config/api/v1/config? path=/DeployedComponent/Server/NGAMServer/Profile/RestServices/Token/RequireAuthorizationHeader -d @./session.xml\n\nFor Example:\n\ncurl -s -u weblogic_iam:MyPassword -H 'Content-Type: text/xml' -X PUT http://iadadmin.example.com/iam/admin/config/api/v1/config? path=/DeployedComponent/Server/NGAMServer/Profile/RestServices/Token/RequireAuthorizationHeader -d @./session.xml\n\nVerify the change using the following commands:\n\nkubectl exec -n <OAMNS> -ti <OAM_DOMAIN_NAME>-adminserver -- /bin/bash\n\nFor Example:\n\nkubectl exec -n oamns -ti accessdomain-adminserver -- /bin/bash\n\nLocate the following lines in /u01/oracle/user_projects/domains/accessdomain/config/fmwconfig/oam-config.xml: <Setting Name=\"Token\" Type=\"htf:map\"> <Setting Name=\"Enabled\" Type=\"xsd:boolean\">true</Setting> <Setting Name=\"RequireAuthorizationHeader\" Type=\"xsd:boolean\">true</Setting>\n\nEnabling the OAM Identity Service\n\nPerform the following steps to enable the OAM Identity Service within oam-config.xml.\n\nCreate a file called service.xml with the following content:\n\n<Configuration> <Setting Name=\"IdentityServiceEnabled\" Type=\"xsd:boolean\" Path=\"/DeployedComponent/Server/NGAMServer/Profile/IdentityManagement/IdentityServiceConfiguration/IdentityServiceEnabled\">true</Setting> </Configuration>\n\nSave the file.\n\nRun the following command to update oam-config.xml:\n\ncurl -s -u <LDAP_WLSADMIN_USER>:<LDAP_WLSADMIN_PWD> -H 'Content-Type: text/xml' -X PUT http://<OAM_ADMIN_LBR_HOST>:<OAM_ADMIN_LBR_PORT>/iam/admin/config/api/v1/config?path=/DeployedComponent/Server/NGAMServer/Profile/IdentityManagement/IdentityServiceConfiguration/IdentityServiceEnabled -d @./service.xml\n\nFor Example:\n\ncurl -s -u weblogic_iam:MyPassword -H 'Content-Type: text/xml' -X PUT http://iadadmin.example.com/iam/admin/config/api/v1/config?path=/DeployedComponent/Server/NGAMServer/Profile/IdentityManagement/IdentityServiceConfiguration/IdentityServiceEnabled -d @./service.xml\n\nVerify the change using the following commands:\n\nkubectl exec -n <OAMNS> -ti <OAM_DOMAIN_NAME>-adminserver -- /bin/bash\n\nFor Example:\n\nkubectl exec -n oamns -ti accessdomain-adminserver -- /bin/bash\n\nLocate the following lines in /u01/oracle/user_projects/domains/accessdomain/config/fmwconfig/oam-config.xml:\n\n<Setting Name=\"IdentityServiceConfiguration\" Type=\"htf:map\"> <Setting Name=\"IdentityServiceEnabled\" Type=\"xsd:boolean\">true</Setting> <Setting Name=\"IdentityServiceProvider\" Type=\"xsd:string\">oracle.security.am.engines.idm.provider.OracleIdentityServiceProvider</Setting> <Setting Name=\"AnonymousAuthLevel\" Type=\"xsd:integer\">0</Setting> <Setting Name=\"IdentityServiceProviderConfiguration\" Type=\"htf:map\"> <Setting Name=\"DateFormatPattern\" Type=\"xsd:string\">yyyy-MM-dd'T'HH:mm:ss'Z'</Setting> <Setting Name=\"ForcedPasswordChangeURL\" Type=\"xsd:string\">/identity/faces/firstlogin</Setting> <Setting Name=\"ChallengeSetupNotDoneURL\" Type=\"xsd:string\">/identity/faces/firstlogin</Setting> <Setting Name=\"TimeFormatPattern\" Type=\"xsd:string\">yyyyMMddHHmmss'z'</Setting> <Setting Name=\"LockoutDurationSeconds\" Type=\"xsd:long\">1</Setting> <Setting Name=\"PasswordExpiredURL\" Type=\"xsd:string\">/identity/faces/firstlogin</Setting> <Setting Name=\"AccountLockedURL\" Type=\"xsd:string\">/identity/faces/accountlocked</Setting> <Setting Name=\"IdentityManagementServer\" Type=\"xsd:string\">OIM-SERVER-1</Setting> <Setting Name=\"LockoutAttempts\" Type=\"xsd:integer\">5</Setting> </Setting> </Setting>\n\nEnabling OAM Persistent Login\n\nOUA requires persistent login to be enabled in OAM. For more information on persistent login, see Understanding Persistent Login. Perform the following steps to enable persistent login in OAM:\n\nRun the following command to connect to the to the OAM Administration server:\n\nkubectl exec -n <OAMNS> -ti <OAM_DOMAIN_NAME>-adminserver -- /bin/bash\n\nFor Example:\n\nkubectl exec -n oamns -ti accessdomain-adminserver -- /bin/bash\n\nRun the following command to start WLST:\n\n/u01/oracle/oracle_common/common/bin/wlst.sh\n\nRun the following command to connect to the domain:\n\nconnect('<OAM_WEBLOGIC_USER>','<OAM_WEBLOGIC_PWD>')\n\nFor Example:\n\nconnect('weblogic','MyPassword')\n\nRun the following WLST command to configure persistent login:\n\nconfigurePersistentLogin(enable=\"true\",validityInDays=\"30\", maxAuthnLevel=\"2\", userAttribute=\"obPSFTID\")\n\nA SUCCESS messgae will be displayed.\n\nExit WLST using the following command\n\nexit()\n\nConfiguring Persistent Login Scheme\n\nPerform the following steps to configure Persistent Login Scheme:\n\nUse the following url to launch a browser and access the OAM Administration console :\n\nhttp://iadadmin.example.com/oamconsole\n\nLog in as the oamadmin user.\n\nNavigate to Configuration > User Identity Stores. You must ensure the Default Store is set to the store where your OAM users reside. For example, OAMIDStore.\n\nUnder OAM ID Stores, select the store OAMIDSTORE and click Edit.\n\nIn the configuration page of your identity store, select the Use Native ID Store settings, Enable Password Management, and Use Oblix User Schema.\n\nIn the configuration page of your identity store, select the Enable Password Management and Use Native ID Store settings.\n\nClick Apply.\n\nRestarting the OAM Domain\n\nYou should restart the OAM domain to enable the OAM Managed Servers to use the OAA plug-in.\n\nNote:\n\nCheck that all the Kubernetes pods (with the exception of the helper pod) in the namespace have stopped by using the following command:kubectl -n <OAMNS> get all\n\nAll the Kubernetes pods (with the exception of the helper pod) in the namespace will be stopped when there are no entries for the Administration Server or the Managed Servers. For example:kubectl -n oamns patch domains accessdomain --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/serverStartPolicy\", \"value\": \"Never\" }]'kubectl -n oamns patch domains accessdomain --type='json' -p='[{\"op\": \"replace\", \"path\": \"/spec/serverStartPolicy\", \"value\": \"If_Needed\" }]'\n\nUpdating Test User to Add Authenticator\n\nIf you have created an OAA test user in Creating a Test User and you want to use this user to validate OUA then you must register the TOTP Authenticator against this user by adding a factor through the OAA user preference screen.\n\nLog into the OAA user preference console using the following URL\n\nhttps://login.example.com/oaa/rui\n\nUse the user you want to set up an authentication factor for. For example, oaauser.\n\nClick Manage from the My Authenticators box.\n\nClick Add Authentication Factor.\n\nSelect an Authentication factor. For example, Mobile Authenticator.\n\nEnter a name.\n\nClick Save.\n\nNote:\n\nYou must setup the Oracle Mobile Authenticator using the displayed QR code or make a note of the Key below to setup the Oracle Mobile Authenticator later before saving the details as you will not be able to obtain these details again.\n\nInstalling the OUA Client Application\n\nFor more information about how to install the OUA Client application, see Installing the Oracle Universal Authenticator Client Application."
    }
}