{
    "id": "correct_subsidiary_00128_3",
    "rank": 41,
    "data": {
        "url": "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/finger.htm",
        "read_more_link": "",
        "language": "en",
        "title": "Device Fingerprinting and Identification",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/img/usa_fing1.gif",
            "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/img/dev_det_fing.png",
            "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/img/customfing008.png",
            "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/img/customfing009.gif",
            "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/img/fing12.gif",
            "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/img/fing13.gif",
            "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/img/fing14.gif",
            "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/img/fing15.gif",
            "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/img/fing16.gif",
            "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/img/sessionalerts7.gif",
            "https://docs.oracle.com/cd/E40329_01/admin.1112/e60557/img/devid14.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2015-08-27T13:40:40+00:00",
        "summary": "",
        "meta_description": "Documentation for administrators that describes how to use Oracle Adaptive Access Manager to effectively create static policies, patterns, and predictive policies to perform risk analysis. It also contains instructions to set up risk-based authentication methods.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "E.1.2 What Makes Up a Device Fingerprint?\n\nThe overall fingerprinting of a user device is based on multiple factors which is explained in this section.\n\nOAAM's fingerprinting technology does not solely rely on one element. Oracle Adaptive Access Manager uses dozens of attributes to recognize and fingerprint the device typically used to login, providing greater coverage. For example, where certain elements are unavailable, the system can still provide robust security utilizing other objects (secure cookie, Flash cookie, HTTP header, Real Media, QuickTime, and so on).\n\nThe HTML example code includes a Flash shared object and image tags to collect additional device characteristics. The Flash code internally makes a call to the application server thereby uploading the device characteristics.\n\nNote:\n\nThe most recent OAAM Sample Application can be downloaded from the Oracle Technology Network at:\n\nhttp://www.oracle.com/technetwork/index.html\n\nGenerally the login page is embedded with a few lines of static HTML code. A device is generally fingerprinted as soon as it logs in to a protected application, prior to any authentication attempt. In this way, the device fingerprinting information is available for risk evaluation at any checkpoint. Some common checkpoints are pre-authentication, post-authentication and in-session/transaction. As well, a device may be re-fingerprinted at any time during a session to help detect some forms of man-in-the-middle attack.\n\nE.1.2.1 Secure Cookie and Browser Characteristics\n\nSecure cookies are one of the attributes used to identify the device. Oracle Adaptive Access Manager generates a unique Secure Cookie for each identification and looks for the same cookie the next time any user logs in from the device. The cookie is only valid for that session on that particular device. If the end user logs out and logs back in, that cookie is used to identify the device at that point.\n\nNote:\n\nIf there is a policy that does not allow cookies, the secure cookie will not persist.\n\nThe Secure Cookie are extracted from the HTTP request. Along with the secure cookie, Oracle Adaptive Access Manager also extracts browser characteristics\n\nFor additional characteristics that are used to create a unique fingerprint for the device, refer to the browser fingerprint enum and table below.\n\nOS/Browser Characteristics Operating System\n\nOperating System\n\nVersion\n\nPatch level\n\nBrowser\n\nBrowser\n\nVersion\n\nPatch level\n\nLocale\n\nCountry\n\nLanguage\n\nVariant\n\nThe browser type enum is shown below to illustrate the information to be collected for a browser fingerprint.\n\n#Enum for fingerprint type vcrypt.fingerprint.type.enum=Enum for fingerprint type vcrypt.fingerprint.type.enum.browser=1 vcrypt.fingerprint.type.enum.browser.name=Browser vcrypt.fingerprint.type.enum.browser.description=Browser vcrypt.fingerprint.type.enum.browser.userAgent=userAgent vcrypt.fingerprint.type.enum.browser.locallang=localLang vcrypt.fingerprint.type.enum.browser.localcountry=localCountry vcrypt.fingerprint.type.enum.browser.localvariant=localVariant vcrypt.fingerprint.type.enum.browser.header_list=locallang,localcountry,localvariant,userAgent vcrypt.fingerprint.type.enum.browser.search_list=locallang,userAgent vcrypt.fingerprint.type.enum.browser.result_list=locallang,userAgent vcrypt.fingerprint.type.enum.browser.header_value_nv=t,true,f,false,en,English,es,Spanish,de,German,it,Italian,ja,Japanese,fr,French,ko,Korean,zh,Chinese,ar,Arabic,cs,Czech,da,Danish,nl,Dutch,fi,Finnish,el,Greek,iw,Hebrew,hu,Hungarian,no,Norwegian,pl,Polish,pt,Portuguese,ro,Romanian,ru,Russian,sk,Slovak,sv,Swedish,th,Thai,tr,Turkish,BR,Brazil\n\nE.1.2.2 Flash Shared Object and Device Characteristics\n\nA \"Flash cookie\" is a Flash shared object. Shared objects function like secure cookies. Oracle Adaptive Access Manager can use a Flash Shared Object to store a one-time use token and replace it each time the device is fingerprinted.\n\nThe Flash shared object is sent to the server using an HTTP request. The Flash shared object captures and communicates additional device characteristics; such as system information and configuration settings, which adds additional granularity to the Device ID.\n\nE.1.2.2.1 What Data is Collected During Fingerprinting\n\nDuring the login process, data is gathered about a users device to form the device fingerprint. This data can be broken down into two categories: secure and digital.\n\nEach of these categories has within them a fingerprint and a cookie.\n\nOracle Adaptive Access Manager uses two types of cookies to perform device identification. One is the secure cookie, also known as browser or persistent cookie, and the other is the digital cookie, also known as the Flash cookie. The terms secure cookie and Flash cookie are terms that will be used in this chapter. Flash uses flash shared object which is stored against the domain/webapp by flash. For the flash cookie name, the key for the value is \"vc\".\n\nSecure data is gathered from the user's browser. This data includes the user-agent string, and an HTTP cookie value. This cookie value is retrieved from the user's browser upon login. A user-agent string provides information on which browser is being used, its version number, and details about the system, such as operating system and version. For more information about browser characteristics, see Section E.1.2.1, \"Secure Cookie and Browser Characteristics.\"\n\nDigital fingerprint can be based on other custom fingerprints such as Java applet, Quick time, or others. This data includes an array of Flash system capability data, and a Flash Locally Stored Object (LSO). The Flash capability data is used as the digital fingerprint representing the Flash system capabilities. The LSO contains a unique one-time use value that is set every time a user logs in. This value is retrieved using a Flash movie that runs upon login. OAAM also provides fingerprinting with JavaScript. When both JavaScript and Flash fingerprinting are enabled (default), Flash will be used if data is available. When no Flash data is present, JavaScript will be used.\n\nIn cases where images are blocked, the cookies might be extracted from the login request itself. Oracle Adaptive Access Manager uses these different modes of collecting the cookies to overcome some technical difficulties imposed by browser or the security settings on the device.\n\nHardware/Software Characteristics System\n\nOperation system\n\nFlash version\n\nPlayer type\n\nDebug version\n\nScreen DPI\n\nScreen resolution\n\nColor screen\n\nScreen aspect ratio\n\nVideo embedded\n\nVideo encoder\n\nStreaming video\n\nSupports Video\n\nScreen broadcast applications\n\nPlayback screen broadcast applications\n\nAudio card\n\nMicrophone\n\nAudio encoder\n\nStreaming audio\n\nMP3\n\nNative SSL support\n\nPrinter support\n\nInput Method Editor (IME)\n\nManufacturer\n\nSettings\n\nAudio/Video enabled\n\nAccessibility enabled\n\nAudio enabled\n\nLocal file read disabled\n\nLanguage\n\nThe Flash type enum is shown below to illustrate the information to be collected for a Flash fingerprint.\n\n#Enum for fingerprint type vcrypt.fingerprint.type.enum=Enum for fingerprint type vcrypt.fingerprint.type.enum.flash=2 vcrypt.fingerprint.type.enum.flash.name=Flash vcrypt.fingerprint.type.enum.flash.description=Flash vcrypt.fingerprint.type.enum.flash.processor=com.bharosa.uio.processor.device.FlashDeviceIdentificationProcessor vcrypt.fingerprint.type.enum.flash.header_list=avd,acc,a,ae,ev,ime,mp3,pr,sb,sp,sa,sv,tls,ve,deb,l,lfd,m,os,ar,pt,col,dp,r,v vcrypt.fingerprint.type.enum.flash.search_list=deb,l,os,v vcrypt.fingerprint.type.enum.flash.result_list=deb,l,os,v vcrypt.fingerprint.type.enum.flash.header_name_nv=avd,Audio/Video disabled by user,acc,Has accessibility,a,Has audio,ae,Had audio encoder,ev,Embedded video, ime, Has input method editor (IME) installed,mp3, Has MP3, pr, Supports printer, sb, Supports screen broadcast applications, sp, Supports playback on screen broadcast applications, sa, Supports streaming audio, sv, Supports streaming video, tls, Supports native SSL, ve, Contains video encoder, deb, Debug version, l, Language, lfd, Is local file read disabled, m, Manufacturer, os, Operating System, ar, Aspect ratio of screen, pt, Player type, col, Is screen color, dp, Dots-per-inch (DPI), r, Screen resolution, v, Flash version #vcrypt.fingerprint.type.enum.flash.header_value_nv=t,true,f,false vcrypt.fingerprint.type.enum.flash.header_value_nv=t,true,f,false,en,English,es,Spanish,de,German,it,Italian,ja,Japanese,fr,French,ko,Korean,zh,Chinese,ar,Arabic,cs,Czech,da,Danish,nl,Dutch,fi,Finnish,el,Greek,iw,Hebrew,hu,Hungarian,no,Norwegian,pl,Polish,pt,Portuguese,ro,Romanian,ru,Russian,sk,Slovak,sv,Swedish,th,Thai,tr,Turkish,BR,Brazil\n\nThe JavaScript type enum is shown below to illustrate the information to be collected for a JavaScript fingerprint.\n\nvcrypt.fingerprint.type.enum.javascript.name=Javascript vcrypt.fingerprint.type.enum.javascript.description=Javascript vcrypt.fingerprint.type.enum.javascript.processor=com.bharosa.uio.processor.device.JSDeviceIdentificationProcessor vcrypt.fingerprint.type.enum.javascript.header_list=acn,gl,amv,l,ce,an,av,p,u a,o,je,te,w,h,cd,aw,ah,tzo,mt,pl,osc,prod,prods,bid,pd,cc,dnt vcrypt.fingerprint.type.enum.javascript.search_list=acn,l,ua vcrypt.fingerprint.type.enum.javascript.result_list=acn,l,ua vcrypt.fingerprint.type.enum.javascript.header_name_nv=acn,App code name,gl,Geo location,amv,App minor version,l,Language,ce,Cookies enabled,an,App name,av,App version,p,Platform,ua,User agent,o,Online,je,Java enabled,te,Taint enabled,w,Width,h,Height,cd,Color depth,aw,Available width,ah,Available height,tzo,Timezone offset,mt,Mime types,pl,Plugins,osc,OS CPU,prod,Product,prods,Sub product,bid,Build ID,pd,Pixel depth,cc,CPU class,dnt,Do not track vcrypt.fingerprint.type.enum.javascript.header_value_nv=t,true,f,false,en,English,es,Spanish,de,German,it,Italian,ja,Japanese,fr,French,ko,Korean,zh,Chinese,ar,Arabic,cs,Czech,da,Danish,nl,Dutch,fi,Finnish,el,Greek,iw,Hebrew,hu,Hungarian,no,Norwegian,pl,Polish,pt,Portuguese,ro,Romanian,ru,Russian,sk,Slovak,sv,Swedish,th,Thai,tr,Turkish,BR,Brazil vcrypt.fingerprint.type.enum.javascript.is_device_fingerprint=true\n\nE.1.2.3 Native Mobile Application\n\nOAAM device fingerprinting is integrated into mobile applications via the Access Management SDK and REST services layer. Developers embed the SDK in their application to collect application ID, operating system, OS version, IP Address, one-time fingerprinting value, GPS/triangulation location, IMEI/MAC. These data elements are used by OAAM to fingerprint and identify the device and run risk evaluations.\n\nMobile cookies are listed in the following table.\n\nTable E-1 Mobile Cookie\n\nAttributes Description\n\nThe mobile type enum is shown below to illustrate the information to be collected for a mobile fingerprint.\n\n#Enum for fingerprint type vcrypt.fingerprint.type.enum=Enum for fingerprint type vcrypt.fingerprint.type.enum.native_mobile=900 vcrypt.fingerprint.type.enum.native_mobile.name=Native Mobile vcrypt.fingerprint.type.enum.native_mobile.description=Native Mobile implementation using OIC vcrypt.fingerprint.type.enum.native_mobile.processor=com.bharosa.uio.processor.device.NativeMobileDeviceIdentificationProcessor vcrypt.fingerprint.type.enum.native_mobile.header_list=os.type,os.version,hw.imei,hw.mac_addr vcrypt.fingerprint.type.enum.native_mobile.header_name_nv=os.type,Operating System Type,os.version,Operating System Version,hw.imei,Hardware IMEI Number,hw.mac_addr,Hardware Mac Address vcrypt.fingerprint.type.enum.native_mobile.header_value_nv=t,true,f,false\n\nE.1.2.4 IP Intelligence and Historical Context\n\nThe combinations of users, devices, locations and other context captured by Oracle Adaptive Access Manager are used to evaluate the probability a device is one identified previously. This evaluation is especially useful when the total amount of device attributes is limited. For example, if user accesses via a browser without a secure cookie of Flash shared object.\n\nE.2.1 Assigning the Device ID\n\nThe first time the user logs in, OAAM captures a unique combination of attributes of the device. At this point, the user does not have any cookie because he is logging in for the first time; therefore, the OAAM Server must process the device fingerprint data and determine if the device has ever been seen before. If the combination is found in the OAAM database, for example, a user's wife used the device, OAAM knows it is the same device and assigns the same Device ID to the user.\n\nOracle Adaptive Access Manager generates a unique secure cookie for each Device ID being created. The secure cookie stored by OAAM in the client's browser is merely a tracking cookie:\n\nIt does not store any information about the user.\n\nIt is only used to track if the user had logged in from this browser before to identify a device.\n\nIt is valid for a single user only.\n\nDevice ID is not based on cookie. For each device OAAM stores the cookie value it is expecting next. OAAM looks for the same cookie the next time any user logs in from the device. If OAAM is able to find this cookie in the browser, it compares this cookie with an expected value. If the two values match, OAAM does not look at the Flash data. It goes no further because it knows that the request has come from a previously used device; hence the Device ID is reused.\n\nIf it does not match, it may be a stale or a modified cookie, so it is ignored. This cookie is discarded and a new cookie is generated. In this case, configured rules are triggered and a higher score results and a new Device ID is generated. If the cookie is not present in the browser, it is a new request. If the OAAM cookies are not set on the browser, OAAM looks at the Flash shared object. If Flash is not enabled, OAAM looks at the browser user agent string data along with other contextual data available in the session. OAAM looks at and determines if the combination came in before from somewhere else so that it can potentially assign the same Device ID.\n\nIf the user disables the cookies on the browser side and prevents the cookies to be set, a default Device ID is given. The Device ID is then based on the other attributes such as the user-agent string.\n\nIf the user deletes his cookies, a new Device ID is generated.\n\nDifferent Web Browser/Different Device ID\n\nWhen using web browser based fingerprinting, by design each web browser will be given its own unique device identifier except when using Internet Explorer and Mozilla Firefox web browsers installed on the same laptop. In other cases with web browsers which are installed on the same laptop, the device may appear as two distinct Device IDs in the OAAM Admin Console because OAAM is profiling all the Device IDs used in a deployment both in relation to users and independently.\n\nInternet Explorer and Mozilla Firefox Use/Same ID if Flash Available\n\nIf Flash is available, the device identifier would be the same even if you use Mozilla Firefox and Internet Explorer on the same machine. This is true only for Mozilla Firefox and Internet Explorer. Other web browsers might act differently. For example, if you use Chrome, a different device identifier results.\n\nOnly a Subset of Data is Available\n\nThe identification logic and policies are designed to deal with scenarios where only a subset of the data is available. If only the browser user agent string is available the OAAM logic will look at context data such as the composition of devices the user has used previously and locations the user has accessed from in the past. It automatically deals with situations where a user either deletes the cookies and Flash Shared Object or does not have them enabled at all.\n\nOAAM will assign a new ID for a short period (3 logins) then revert back to the first ID from there on if a user's behavior is consistent (same user and IP for example). The device fingerprinting logic also accounts for common changes in device data such as an operating system or browser upgrade.\n\nThis scenario shows a what occurs if a user deletes both their secure cookie and Flash shared object after every session but the other data stays consistent across sessions. The OAAM device identification logic and policies determine that after three successful fingerprints the device can be recognized as a consistent Device ID.\n\nSes User IP User Agent Secure Cookie Flash cookie Flash cookie Data Action 1 jsmith 1.1.1.1 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.28) Gecko/20120306 Firefox/3.6.28 No expected,\n\nNo cookie, Cookies enabled, Set\n\nNo DC expected,\n\nNo FSO, Installed and set\n\nType=Flash, Screen Aspect=1.0, A/V Disabled=F, Video Encoder=T … New device\n\n1234\n\n2 jsmith 1.1.1.1 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.28) Gecko/20120306 Firefox/3.6.28 Cookie expected,\n\nNo cookie, Cookies enabled, Set\n\nDC expected,\n\nNo FSO, Installed, Set\n\nType=Flash, Screen Aspect=1.0, A/V Disabled=F, Video Encoder=T … New device\n\n1235\n\n3 jsmith 1.1.1.1 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.28) Gecko/20120306 Firefox/3.6.28 Cookie expected,\n\nNo cookie, Cookies enabled, Set\n\nDC expected,\n\nNo FSO, Installed, Set\n\nType=Flash, Screen Aspect=1.0, A/V Disabled=F, Video Encoder=T … New device\n\n1236\n\n4 jsmith 1.1.1.1 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.28) Gecko/20120306 Firefox/3.6.28 Cookie expected,\n\nNo cookie, Cookies enabled, Set\n\nDC expected,\n\nNo FSO, Installed, Set\n\nType=Flash, Screen Aspect=1.0, A/V Disabled=F, Video Encoder=T … New device\n\n1237\n\n5 jsmith 1.1.1.1 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.28) Gecko/20120306 Firefox/3.6.28 Cookie expected,\n\nNo cookie, Cookies enabled, Set\n\nDC expected,\n\nNo FSO, Installed, Set\n\nType=Flash, Screen Aspect=1.0, A/V Disabled=F, Video Encoder=T … Device by browser data\n\n1234\n\n6 jsmith 1.1.1.1 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.28) Gecko/20120306 Firefox/3.6.28 Cookie expected,\n\nNo cookie, Cookies enabled, Set\n\nDC expected,\n\nNo FSO, Installed, Set\n\nType=Flash, Screen Aspect=1.0, A/V Disabled=F, Video Encoder=T … Device by browser data\n\n1234\n\nCookies Match /Different Fingerprint\n\nThere are cases where the user's cookies match, but he has a different fingerprint, for example, the user changed his resolution, OAAM gives the device the same Device ID, but a different score. The device looks the same, but it might be considered suspicious, so the risk score is raised based on what has changed. The Device ID is the same because he came in with the same cookie (cookies match), but the Flash is different from what it was before.\n\nE.2.2 Device Identification Policies\n\nThe Device ID is determined by the configuration of the rules and trigger combinations.\n\nOracle Adaptive Access Manager uses the policy engine for many purposes including business logic to drive user experience, risk analysis and device identification. The device identification policies are designed to function for all customer deployments.\n\nNote:\n\nOracle does not recommend or support alterations to the device identification policies.\n\nThe following list of policies are used for device identification and should therefore never be deleted or altered in any way.\n\nOAAM Base Device ID Policy\n\nOAAM Mobile Device ID Policy (mainly used for Oracle Access Management Mobile and Social integrations)\n\nOAAM Device ID Policy\n\nOAAM System Deep Analysis Flash Policy\n\nOAAM System Deep Analysis No Flash Policy\n\nNote:\n\nThe OAAM System Deep Analysis Flash Policy and OAAM System Deep Analysis No Flash Policy will not be covered in this chapter.\n\nAll the actions of the policies are taken from the trigger combination. Device ID depends heavily on trigger combinations.\n\nFor information on policies and trigger combinations, see Chapter 10, \"OAAM Policy Concepts and Reference.\"\n\nE.2.2.1 OAAM Base Device ID Policy\n\nThe OAAM Base Device ID Policy determines which Device ID policy to run for the client device identification.\n\nThe Base ID policy contains one rule to check if the user is a mobile user and if the login is coming in from a Mobile and Social integration. The rules contains two conditions:\n\nThe Device: Check if device is using Mobile Browser condition checks whether the current device is using a mobile browser to access the website. This is based on the user agent.\n\nThe Device: Browser header substring condition checks whether the supplied string exists as a substring in the browser header information.\n\nThe Base Device ID Policy trigger combinations determine all actions to be taken.\n\nIf the device is mobile and coming in from a Mobile and Social type of integration, OAAM runs the Mobile Device ID policy. If the device is not mobile and is coming in from a UIO deployment or a more traditional deployment, OAAM runs the Device ID policy.\n\nFor information on the OAAM Base Device ID Policy, see Section 10.5.2, \"OAAM Base Device ID Policy.\"\n\nE.2.2.2 OAAM Mobile Device ID Policy\n\nThe OAAM Mobile Device ID Policy identifies the mobile devices specific to Oracle Access Management Mobile and Social (Mobile and Social) integrations.\n\nThe OAAM Mobile Device ID policy contains three rules:\n\nMobile Cookie Valid with the Device ID: Is cookie value condition.\n\nThe Device ID: Is Cookie valid condition determines if there is a valid node for the given cookie.\n\nMobile Known Header Match with the Device ID: Header data match condition.\n\nThe Device ID: Header data match condition determines if the header is a match.\n\nMobile Device Data Present with the Device ID: Header data present condition.\n\nThe Device ID: Header data present condition determines if the header data is present.\n\nAll the actions are taken by the Mobile Device ID Policy trigger combinations. They check if there is already a mobile device assigned or if OAAM needs to assign a new one:\n\nIf the mobile cookie is valid and the device matches, OAAM finds the device by the mobile cookie itself.\n\nIf the mobile cookie is valid, but the header does not match, OAAM identifies the device by mobile cookie, but there may be some suspicion. Question might arise such as: Why would the header not match? Was there an upgrade? Was the mobile cookie copied from somewhere? Because of the suspicion, a high score is generated.\n\nIf the mobile cookie is completely not valid at all, which usually means the user is coming in new, a new Device ID is issued and a score of 200 is generated.\n\nIf there is no mobile cookie present which could mean that the user is always not coming in from the mobile cookie because everything has been disabled, OAAM tries to check if the device always comes in with no mobile cookie and assigns it a standard Device ID.\n\nFor information on the OAAM Mobile Device ID Policy, see Section 10.5.3, \"OAAM Mobile Device ID Policy.\"\n\nE.2.2.3 OAAM Device ID Policy\n\nThe OAAM Device ID Policy determines if the device should be identified by an existing ID or if a new one should be issued. It contains ten rules.\n\nThe Device ID policies check if the browser cookie is valid, if the Flash cookie is valid, if Flash is completely disabled, if Flash is present at all, if the browser fingerprint matches, if the Flash fingerprint matches, if the cookie matches, and other rules. The rules look for certain conditions. If you have customized device identification, you can use these rules or you can use completely new rules through custom development.\n\nOAAM Device ID Policy contains ten rules.\n\nThe Browser Cookie Valid rule contains the Device ID: Browser Cookie Valid condition.\n\nThe Device ID: Browser Cookie Valid condition determines if there is a valid cookie node for a given device value.\n\nThe Flash Cookie Valid rule contains the Device ID: Flash Cookie Valid condition.\n\nThe Device ID: Flash Cookie Valid condition determines if there is a valid node for the given cookie value.\n\nThe Flash Cookie Disabled rule contains the Device ID: Flash Cookie Disabled condition.\n\nThe Device ID: Flash Cookie Disabled condition determines if the cookie is disabled for the user based on the history.\n\nThe Browser Cookie Disabled rule contains the Device ID: Browser Cookie Disabled condition.\n\nThe Device ID: Browser Cookie Disabled condition determines if the browser cookie is disabled for the user based on history.\n\nBrowser Cookie Present rule contains the Device ID: Browser Cookie Present condition.\n\nThe Device ID: Browser Cookie Present condition determines if the cookie value is empty or not empty. The validation check is not included.\n\nThe Flash Cookie Present rule contains the Device ID: Flash Cookie Present condition.\n\nThe Device ID: Flash Cookie Present condition determines if the cookie value is empty or not empty. The validation check is not included.\n\nThe Browser FP match rule contains the Device ID: Header data match condition.\n\nThe Device ID: Header data match condition determines if the header data matches.\n\nThe Flash FP match rule contains the Device ID: Header data match condition.\n\nThe Device ID: Header data match condition determines if the header data matches.\n\nThe Cookie match rule contains the Device ID: Cookies Match condition.\n\nThe Device ID: Cookies Match condition checks the tracker node matches for both cookies.\n\nThe Flash Data Present rule condition contains the Device ID: header data present condition.\n\nThe Device ID: header data present condition determines if the header data is present.\n\nTwo trigger combinations will be explained to illustrate how the Device ID policy works. Each row in a trigger combination is one rule presented in the policy. Each vertical column represent the combination of the rules being triggered or not triggered.\n\nFigure E-11Device ID Policy Trigger Combinations 1-3\n\nDescription of \"Figure E-11Device ID Policy Trigger Combinations 1-3\"\n\nThe first column represents a situation where the browser fingerprint match, the Flash fingerprint matches, and the cookies match. If this is the case, the action generated is OAAM device identified by secure cookie. OAAM uses that cookie and if there is already an existing device that uses the cookie, then, OAAM assigns that particular device to the session.\n\nIf the user logs in as a separate user from the same device or the same browser, the cookies are the same as well. Even if the user logs in as a different user, he arrives at the same device.\n\nSometimes it is logical not to use any score, but only generate an action or alert. In column 1, the cookies matched so OAAM reuses the device identified by the secure cookie.\n\nThe second column is a second set of conditions. If the first set of conditions were not met, OAAM proceeds to the second column. If the first set of conditions were met, no other column is executed. If not, OAAM proceeds to the second column.\n\nSome of the columns have scores to generate if the conditions are met because the situation appears suspicious, for example in the second column, if the Flash cookie did not match, but the browser cookie matches. OAAM identifies the device by browser fingerprint, but does not understand why the device does not have Flash present, so OAAM generates a score. In this instance, the situation appears suspicious because Flash is not present. In any other policies downstream that generate scores that score will be factored in (the score will be used in post-authentication or challenge). This is called device risk gradient, a pre-conditions in rules. You cannot use the score in the Device Identification because the score is the result of this checkpoint."
    }
}