{
    "id": "correct_subsidiary_00128_3",
    "rank": 59,
    "data": {
        "url": "https://docs.oracle.com/cd/E28280_01/admin.1111/e14568/patterns.htm",
        "read_more_link": "",
        "language": "en",
        "title": "Managing Autolearning",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.oracle.com/cd/E28280_01/admin.1111/e14568/img/bucket.gif",
            "https://docs.oracle.com/cd/E28280_01/admin.1111/e14568/img/aamad009.gif",
            "https://docs.oracle.com/cd/E28280_01/admin.1111/e14568/img/aamad010.gif",
            "https://docs.oracle.com/cd/E28280_01/admin.1111/e14568/img/aamad011.gif",
            "https://docs.oracle.com/cd/E28280_01/admin.1111/e14568/img/aamad_dt_011.gif",
            "https://docs.oracle.com/cd/E28280_01/admin.1111/e14568/img/ps1_pat_srch.gif",
            "https://docs.oracle.com/cd/E28280_01/admin.1111/e14568/img/ps1_pat_sum.gif",
            "https://docs.oracle.com/cd/E28280_01/admin.1111/e14568/img/ps1_pat_at.gif",
            "https://docs.oracle.com/cd/E28280_01/admin.1111/e14568/img/bucket.gif",
            "https://docs.oracle.com/cd/E28280_01/admin.1111/e14568/img/ps1_pat_rg.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2014-08-02T11:35:08+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "17.1 Introduction and Concepts\n\nThis section introduces you to the concepts of autolearning and how they are used.\n\n17.1.1 Autolearning\n\nThe Autolearning feature tracks transactions and authentications being performed by different actors based on patterns you create. This process establishes what is normal or average behavior for an individual or a population.\n\n17.1.2 Patterns\n\nPatterns record the behavior of the users, device and locations accessing the system by creating a digest of the access data. The digest or profile information is then stored in a historical data table and used for calculating the current risk using rules.\n\nPatterns require that bucketing, member types, and attributes to be defined. As well, rules must be configured to harness the profiling conducted by the patterns.\n\nPatterns are used by Oracle Adaptive Access Manager to either define one bucket or dynamically create buckets. Oracle Adaptive Access Manager collects data and populates these buckets with members based on pattern parameters, and rules perform risk evaluations on dynamically changing membership and distributions of the buckets. Pattern evaluation and population occurs only when the result of the transaction is successful.\n\nBucket Creation and Population\n\nFigure 17-1 shows a bucket creation and population example.\n\nFigure 17-1 Login Times\n\nIf you want to track employee login times, you would:\n\nSet up a pattern where the member type is User and the attribute is Time.\n\nChoose multi-bucket as the creation method for the pattern. A multi-bucket pattern creates as many buckets as required to capture behaviors as opposed to a single-bucket pattern which only creates one to capture a specific behavior.\n\nSet start time=0:00 and end time=23:59, which are the hours of the day, and a increment step size of 8 hours.\n\nDuring the processing of the transaction/login data, Oracle Adaptive Access Manager creates the buckets as required and populates them with counts for each member. Each bucket automatically keeps from overlapping with each other based on the other buckets already in the system. As shown in Figure 17-1, Oracle Adaptive Access Manager builds a maximum of 3 buckets with 8-hour periods in which logins have occurred.\n\nFor example, if Jeff logs in at 8:27, his counter in the 7:00 and 14:59 bucket is incremented by one. If no user has ever logged into this system between 7:00 and 14:59 then Oracle Adaptive Access Manager also creates that bucket as part of the processing. This 7:00 and 14:59 bucket then is used to record login time behavior for all users going forward.\n\nAfter creation, the buckets are populated with the logins of users that have fallen within each 8-hour time range.\n\nOracle Adaptive Access Manager only records that Jeff used this computer if he logs in successfully. This validates that what is recorded is most likely Jeff's real behavior and not a fraudulent attempt to log in using Jeff's credentials. The memberships and associated statistics are saved in each user profile.\n\n17.1.3 Member Types and Attributes\n\nTo profile behavior, members and attributes are required.\n\nMembers and attributes act as a guide for Oracle Adaptive Access Manager to analyze data. Member is the actor in the system. Examples of actors are user, IP address used for logging in, and so on.\n\nAttributes are the particular pieces of information associated with the activity being tracked. An example is the time of day for a login. Patterns collect data about members. If the member type is User, the pattern collects data about users.\n\nIn defining the Pattern you specify which data points you are interested in for the members.\n\nFor example, if Joe lives in San Francisco, logs into a protected application from home at 9:00 am on a Friday; City, Time, and Day of Week are attributes associated with the user, Joe. A pattern could be configured to capture all the city, time, and day of the week combinations Joe uses to log in. Or separate patterns could be created for time, city and day of the week to be evaluated together or independently. The configuration you choose is based on the business use cases.\n\nIf you are interested in profiling the cities that users log in from, the attribute to profile would be City.\n\nAnother example, if you want to track users based on the devices they use, you would set up a pattern with User as the member type since you want to collect information about users. You would then select Device ID as the attribute since you want to know the devices each user is using.\n\nBecause members and their attributes are tracked by Oracle Adaptive Access Manager when configured to do so, it is possible to capture complex behavior. However, often times the best practice is to keep the patterns relatively simple in terms of the number of attributes and then use rules to perform complex evaluations involving multiple patterns tracking different attributes. This strategy is more flexible and manageable in the long run.\n\n17.1.4 Buckets\n\nPatterns are configured by an administrator and Oracle Adaptive Access Manager uses that configuration to create buckets as it needs them. Administrators do not deal or see buckets directly in any way.\n\nPatterns are configured to create either one bucket or multiple buckets. Buckets are containers that are used to capture the frequency of behaviors. Rules evaluate the counters in these buckets for specific members to determine if a situation is anomalous.\n\nSingle-Bucket\n\nSingle-bucket patterns create and populate one bucket with the exact data points and value ranges specified in the pattern.\n\nFor example, if you choose to create an authentication pattern for users (member type) with the country United States (attribute), exactly one bucket is created and populated with users. If a user logs in from the United States, he or she becomes a member of the bucket and the bucket counts are incremented; if he or she does not log in from the United States, the bucket count is not incremented.\n\nAnother example, if you choose to create an authentication pattern for users (member type) with time 8am to 5pm (attribute), exactly one bucket is created and populated with users. If a user logs in from 8am to 5pm, he or she becomes a member of the bucket and the bucket counts are incremented; if the user does not log in between 8am to 5pm, the bucket count is not incremented.\n\nFigure 17-2 Single Bucket\n\nMulti-Bucket\n\nMulti-bucket patterns usually create more buckets than single-bucket patterns. They create buckets as required based on the parameter configurations.\n\nYou configure the data types and samples you want Oracle Adaptive Access Manager to generate buckets from, and then during pattern processing Oracle Adaptive Access Manager creates buckets as needed to capture behaviors.\n\nFor example:\n\nIf you specify \"For each\" as the compare operator and country as the attribute, Oracle Adaptive Access Manager creates a bucket dynamically for each country as activity occurs from the country. The first time any user logs in from Canada, Oracle Adaptive Access Manager creates a Canada bucket and adds that user as a member with a count of one. The next user to log in from Canada is added to that same bucket as a member with a count of one. Each subsequent time a user logs in from Canada his Canada bucket counter is incremented.\n\nFigure 17-3 Countries Multi-Bucket\n\nBuckets are not created until they are needed. If you choose user logins for a 24-hour range with an increment step size of 8 then up to 3 buckets are created, one for each 8-hour time slot in which logins occur.\n\nFigure 17-4 Time Multi-Buckets\n\n17.1.5 Pattern Rules Evaluations\n\nOAAM uses patterns and the buckets they generate to capture the frequencies at which specific behaviors occur for each individual user, device, location, and so on. Since the pattern buckets are updating in real-time rules can be run against them to dynamically determine if the current behavior seems abnormal. The rules evaluations can view either the individual's current behavior versus his past behavior or the individual's current behavior versus the past behavior of all individuals.\n\nThe Autolearning feature tracks transactions and authentications being performed by different actors (entities) based on patterns you create. This process establishes what is normal or average behavior for an individual or a population.\n\nNote: Transaction patterns can only be defined based on entity values and not data values.\n\nFigure 17-5 Bucket Evaluation\n\nIn this example John's login behavior is being evaluated against his own profile and the profile of all users.\n\nBucket Evaluation Example\n\nIn this example a pattern was created to capture user, device and IP login time behavior. The multi-bucket pattern was configured to create buckets to cover the entire 24 hours of the day in four hour samples. Consequently, OAAM ended up creating four time buckets as login activity occurred within each time range.\n\nBuckets Time Range\n\nAfter a month of recording, the system has created four time buckets and populated them with members and counters for each member. The three entities now have the following bucket memberships.\n\nEntity Membership\n\nEvaluation of the memberships produces the following conclusions:\n\nNote:\n\nThese scenarios are not a sequence; each is a distinct scenario.\n\nScenarios Risk\n\nThe following paragraph describes the first scenario in more granular detail.\n\nIf User A logs in at 3:37 and he has previously only logged in between 9:00 and 16:59 that elevates the risk because he is not a member of the Bucket #1. If Device X is used and it has previously only been used between 5:00 to 23:59 that elevates the risk because User A and Device X are not members of Bucket #1. And, if IP Y is used and it has previously only been used between 5:00 to 16:59 that elevates the risk as well since User A, Device X, and IP Y are all not members of Bucket #1. Since all three of the major components involved in the risk evaluation are not in bucket #1 the overall risk level is very high. It is important to emphasize that each of these elements is evaluated for membership in the time profiles independently in this example.\n\n17.1.6 Bucket Population\n\nBuckets are created, populated and the counters incremented only after the transaction is successful.\n\nExample\n\nJoe logs in from three cities (home, office A and office B). A city pattern records how often he logs in from each.\n\nBucket Location\n\nCity Bucket #1\n\nhome\n\nCity Bucket #2\n\noffice A\n\nCity Bucket #3\n\noffice B\n\nJoe's company wants users to be challenged with an OTP two sessions in a row if they are logging in from a city they have not used in the last month. If Joe stops working at office B for 37 days and does not access from anywhere else in that city he is challenged for an OTP the next time he logs in from that city. To accomplish this use case a rule is configured to check on the membership count for the current city bucket in the last month. The count threshold is set to two so the rule triggers until the user has been a member at least twice in the last rolling month window.\n\n17.3 Before You Begin to Use Autolearning\n\nBefore using the Autolearning feature, read through Section 17.1, \"Introduction and Concepts.\" The section is useful in helping you to understand the concepts presented in this chapter.\n\nTo use the Autolearning feature, you must perform the following procedures.\n\n17.3.1 Importing Base Authentication-Related Entities\n\nThe actors that are tracked during authentication are called authentication entities and include user, city, device, and so on. These base entities are required to enable conditions that are used for patterns. Before you begin using the Autolearning feature, you must import these base entities into your system. Refer to Section 2.6, \"Importing the OAAM Snapshot.\"\n\nTo import the entities into the server:\n\nNavigate to the Entities Search page, as described in Section 20.2, \"Navigating to the Entities Search Page.\"\n\nClick Import Entities.\n\nIn the Import Pattern dialog, click Browse and locate Auth_EntityDefinition.zip.\n\nClick OK.\n\nOAAM Admin shows the entities in that file.\n\nSelect and import all of them.\n\n17.3.2 Enabling Autolearning Properties\n\nEnable autolearning so that OAAM collects profiling data.\n\nEnsure that vcrypt.tracker.autolearning.enabled is set to true.\n\nThe default value is true. It is like a \"master (on/off) switch\" for autolearning.\n\nIf this property is absent, this default value is used. If the property is present, the assigned value is used.\n\nSet the following properties to true:\n\nIf the properties do not exist, create them.\n\nvcrypt.tracker.autolearning.use.auth.status.for.analysis\n\nThis property must be set to true for the authentication patterns to work. Authentication patterns are the patterns that are used in processing the data relevant to authentication (login) related information only.\n\nvcrypt.tracker.autolearning.use.tran.status.for.analysis\n\nThis property must be set to true.\n\n17.3.3 Importing Autolearning Policies into the Server\n\nImport the out-of-the-box autolearning policies, refer to Section 2.6, \"Importing the OAAM Snapshot.\"\n\n17.3.4 Using Autolearning in Native Integration\n\nBefore autolearning can be used for monitoring of transactions and authentications, native integration clients need to use updateStatus or updateTransaction APIs which use the autolearning flags.Alternatively native integration can also use the processPatternAnalysis API for processing the session data for autolearning.\n\nThe API helps to provide OAAM with information about user activity (logins or transactions). For example, updateAuthStatus or updateTransaction is called when a customer login is complete or a login is blocked, and so on.\n\nFor the UpdateAuth Status API, an analyzePatterns value of \"true\" triggers the pattern processing for the login. If no value is passed, a value of false is assumed. If the authentication status value, resultStatus, is \"success\" and the analyzePatterns value is \"true,\" OAAM processes the users's data and autolearning/profiling data is collected for the user. For any login, autolearning is performed only once if the authentication status is \"success.\" If the authentication or transaction status is not \"success,\" the buckets are not updated. If the buckets are not updated, the data that autolearning rules use may not be accurate.\n\nFor information on autolearning APIs, see Appendix B, \"Pattern Processing.\"\n\n17.9 Creating and Editing Patterns\n\nThis section explains how to create and edit patterns. It contains the following topics:\n\nCreating a Pattern\n\nEditing the Pattern\n\nAdding Attributes\n\nEditing Attributes\n\nDeleting Attributes\n\n17.9.1 Creating a Pattern\n\nBest Practices for Autolearning and Pattern Creations\n\nBest practices for autolearning and pattern creations are:\n\nFor autolearning configurations: Administrators should keep in mind that any tracking of behavior warrants computational power and storage space and be prudent in configuring the system for the most returns on the efforts.\n\nBest practices for pattern creation: When creating patterns, you must ensure that other patterns in your system are not already collecting the same kind of information. For example, if you create a pattern to collect login time information on user and IP, and then you create another pattern on user and login time, you are creating two patterns that are collecting the same information.\n\nBest practices to keep Oracle Adaptive Access Manager current and relevant given the evolving online security threats: autolearning technology automatically adjust to changing activity and behaviors. For example, autolearning profiles what normal behavior is for each user and all users. In this way security policies are dynamically adjusting in real-time to how users really acts rather than a guess at how they will act. In addition to the automated features it is recommended that security policy be reviewed on a regular basis to make sure they are behaving as expected.\n\nFor heavy pattern usage: You might assign different evaluation priorities to various patterns. For example, you can set login patterns to High and other patterns to Low.\n\nFor evaluation property: Ensure that you do not set \"High\" as the evaluation priority for all your patterns, since performance will be impacted by doing so.\n\nProcedure to Create a New Pattern\n\nFollow this procedure to create a new pattern.\n\nAll values except transaction type can be modified later in the Pattern Details page.\n\nTransaction type, Creation Method, Member Type, Evaluation Priority, and Description are required fields.\n\nNavigate to the Patterns Search page, as described in Section 17.5, \"Navigating to the Patterns Search Page.\"\n\nIn the Patterns Search page, click the New Pattern button or the New icon.\n\nAlternative methods to open the New Pattern page are listed in Section 3.9, \"Search, Create, and Import.\"\n\nIn the New Pattern page, enter the pattern name.\n\nA unique pattern name must be entered.\n\nSelect the transaction type.\n\nThe default is Authentication.\n\nThe support for transaction-based patterns is limited. Transaction patterns can only be defined based on entity values and not data value. (You cannot create a pattern using the data elements from the transaction itself, only from the data elements belonging to the entities.) You cannot create rules based on those patterns.\n\nFrom the Creation Method list, select the method you want to use to create the pattern.\n\nSingle-Bucket\n\nMulti-Bucket\n\nSelect a member type.\n\nThe member type is the actor for which data must be captured.\n\nFor example, if you select city as the member type, the pattern created collects city data.\n\nSelect a evaluation priority\n\nEvaluation priority is the priority in which data is evaluated. There are two evaluation priorities: High and Low.:\n\nHigh\n\nThere is double the amount of resources made available to process the pattern data in this category as compared to the \"Low\" priority.\n\nResources include processing resources and database resources.\n\nLow\n\nThere is half the amount of resources made available to process the pattern data in this category as compared to the \"High\" high priority.\n\nThe chances for finishing the processing of high priority pattern data are doubled the chances for finishing the low priority patterns.\n\nEnter a description.\n\nClick Apply.\n\nFigure 17-7 New Pattern\n\nThe Pattern Details page is opened with the Summary and Attributes tabs.\n\nIf you try to create a pattern that already exists in the database, an error occurs.\n\nIf you try to create a pattern with the same members as another pattern, a message appears: \"A pattern with the same member configuration already exists. Are you sure you want to create a new pattern? If you answer \"yes,\" you are allowed to create the pattern.\n\nThe pattern is enabled upon creation and the Pattern Details page is displayed. You can edit or review the pattern.\n\nPatterns can be created without any attributes.\n\nAdd attributes.\n\nFigure 17-8 Add Attribute\n\nFor information, see Section 17.9.2, \"Adding Attributes.\"\n\nFor information on attributes, see Section 17.1.3, \"Member Types and Attributes.\"\n\nActivate the pattern.\n\nTo activate the pattern, see Section 17.9.3.1, \"Activating Patterns.\"\n\nTo use the patterns in rule evaluation, see Section 17.12, \"Using Autolearning Data/Profiling Data.\"\n\nTo verify that autolearning is working, see Chapter 31, \"FAQ/Troubleshooting.\"\n\n17.9.2 Adding Attributes\n\nFor information on attributes, see Section 17.1.3, \"Member Types and Attributes.\"\n\nFollow these steps to add attributes.\n\nIf you are not on the Pattern Details page of the pattern, follow the instructions in Section 17.8.1, \"Viewing Details of a Specific Pattern.\"\n\nIn the Attributes tab, click the Add button in the Search Results toolbar.\n\nIn the Add Attributes dialog, select an attribute or attributes from the Add list.\n\nSelect attributes (data points) you are interested in for the member type. OAAM collects data on the attributes to determine if the member belongs to the profile.\n\nFor example, if you select \"user\" as the member type and the attributes: IP (NNN.N.N.N), City (Redwood City) and Is Registered (False); OAAM records when users match all of these attributes--the user has an IP address of NNN.N.N.N, who lives in Redwood City, and who is not registered. This profiling can then be used to evaluate risk for the \"user.\"\n\nFor example, if you want OAAM to track the login times for \"user\" and \"IP\" (member type), you would select \"time\" as an attribute.\n\nAfter the attributes are added, they are not available in the list for further selection.\n\nSpecify the condition information for the attribute.\n\nSelect the Status.\n\nFor example, \"Active\" if you want OAAM to collect data on the attribute to be used in the pattern membership.\n\nEnter the description.\n\nFor example, \"This pattern creates buckets to track login times for users and IPs.\"\n\nSelect a compare operator.\n\nFor example, \"range\" with start value of 0 and end value of 23 if you want to collect data for a range of 24 hours.\n\nThe list of compare operators depends on the value of the attribute and the type of pattern (multi-bucket or single bucket) you have chosen.\n\nFor detailed information about compare operators, see Section 17.19, \"Pattern Attributes Operators Reference.\"\n\nEnter Increment Step.\n\nThe sample size (interval)\n\nFor example, 2 for 2 hour intervals.\n\nClick Add.\n\nIn the Attributes tab, use the arrow controls to reorder the attributes if you want.\n\nOrder is not required and is automatically pre-filled.\n\nClick Apply.\n\nA dialog appears, with the message that the attribute was added successfully to pattern.\n\nClick OK to dismiss the dialog.\n\n17.9.3 Activating and Deactivating Patterns\n\nThis section explains how to activate and deactivate patterns.\n\nIf you select an active pattern, you have the option to deactivate it. Whereas if you select an inactive pattern, you have the option to activate it.\n\n17.9.3.1 Activating Patterns\n\nTo activate patterns:\n\nNavigate to the Patterns Search page, as described in Section 17.5, \"Navigating to the Patterns Search Page.\"\n\nIn the Patterns Search page, enter the search criteria you want and click Search. For information, see Section 17.6, \"Searching for a Pattern.\"\n\nSelect the row for each pattern you want to activate.\n\nPress the Activate button.\n\n17.9.3.2 Deactivating Patterns\n\nYou should be extremely careful when disabling patterns. The system does not check to see whether the pattern being disabled is used in any policy.\n\nWhen patterns are disabled, the data collection stops.\n\nAlso when rules are executed and the pattern being used by the rule condition is not active, the condition evaluates to false (unless you have configured it to return true).\n\nTo deactivate patterns:\n\nTo deactivate a pattern, from the Patterns Search page select the row for each pattern you want to deactivate and press the Deactivate button.\n\nTo deactivate a pattern from the Pattern Details page, press the Deactivate button.\n\n17.9.4 Editing the Pattern\n\nCare should be taken when editing patterns. Potentially, data that is already collected based on that pattern may no longer be usable after the edit.For example the data would be unusable if you remove one of the attributes and the buckets created in the past for the pattern had taken into account the attribute that is being removed.\n\nTo edit the details of a specific pattern:\n\nIf you are not on the Pattern Details page of the pattern you want to edit, follow the instructions in Section 17.7, \"Navigating to the Patterns Details Page.\"\n\nTo change the pattern name, evaluation priority, and description, edit the appropriate fields in the Summary tab of the Pattern Details page.\n\nTo change the status, select from the status you want.\n\nTo change the status of the pattern, see Section 17.9.5, \"Changing the Status of the Pattern.\"\n\nAdd or change the member types.\n\nFor information, see Section 17.9.6, \"Adding or Changing Member Types.\"\n\nFor information about member types, see Section 17.1.3, \"Member Types and Attributes.\"\n\nChange the evaluation priority\n\nTo change the evaluation priority, see Section 17.9.7, \"Changing the Evaluation Priority.\"\n\nTo add attributes, see Section 17.9.2, \"Adding Attributes.\"\n\nFor information on attributes, see Section 17.1.3, \"Member Types and Attributes.\"\n\nTo edit attributes, see Section 17.9.8, \"Editing Attributes.\"\n\nTo delete attributes, see Section 17.9.9, \"Deleting Attributes.\"\n\nClick Apply.\n\n17.9.5 Changing the Status of the Pattern\n\nActive is the default status of the pattern, but you can change the status to one you want.\n\nThese are the pattern states:\n\nActive\n\nIf data must be collected, the pattern must be in the active state.\n\nInactive\n\nIf the pattern is complete, but you do not want the pattern to collect data, select Inactive.\n\nIncomplete\n\nIf the pattern has been created, but you are not ready to decide what attributes to choose yet, select Incomplete. Data is not collected for this state.\n\nInvalid\n\nIf you do not want the pattern to be used, select Invalid. Data is not collected for this state.\n\nDeleted\n\nThe pattern has been deleted, but the system must keep this record to maintain data integrity. No autolearning data analysis is performed for a pattern in this state.\n\nNote:\n\nIt is recommended that you do not use the Deleted status. This status may not be available in future releases.\n\n17.9.6 Adding or Changing Member Types\n\nYou can select more than one member type to add or change.\n\nIf you try to select the same members as another pattern, a message appears: \"A pattern with the same member configuration already exists. Are you sure you want to create a new pattern? If you answer \"yes,\" you are allowed to create the pattern.\n\nFor information on member type, see Section 17.1.3, \"Member Types and Attributes.\"\n\nFollow these steps to add or change member types.\n\nIf you are not on the Pattern Details page of the pattern, follow the instructions in Section 17.7, \"Navigating to the Patterns Details Page.\"\n\nIn the Summary tab, add or change the actor you want to capture data.\n\nFor example, user is the member type if you want to collect information about the user.\n\n17.9.7 Changing the Evaluation Priority\n\nFollow these steps to change the evaluation priority.\n\nIf you are not on the Pattern Details page of the pattern, follow the instructions in Section 17.7, \"Navigating to the Patterns Details Page.\"\n\nIn the Summary tab, change the evaluation priority.\n\n17.9.8 Editing Attributes\n\nFollow these steps to edit attributes.\n\nClick the Attributes tab of the Pattern Details page.\n\nIf you are not on the Pattern Details page of the pattern you want to edit, follow the instructions in Section 17.8.1, \"Viewing Details of a Specific Pattern.\"\n\nIn the Attributes page, select the attribute you want to edit.\n\nEdit the attribute details and click Save.\n\nReorder the attributes if you want.\n\nClick Apply.\n\n17.9.9 Deleting Attributes\n\nCare should be taken when deleting attributes. For example the data would be unusable if you remove one of the attributes and the buckets created in the past for the pattern had taken into account the attribute that is being removed.\n\nFollow these steps to delete attributes.\n\nClick the Attributes tab of the Pattern Details page.\n\nIf you are not on the Pattern Details page of the pattern you want to edit, follow the instructions in Section 17.8.1, \"Viewing Details of a Specific Pattern.\"\n\nIn the Attributes page, click the checkbox next to the Attribute(s) you want to delete from the pattern.\n\nClick Delete.\n\nIf you delete an attribute, it is added to the Add list and becomes available the next time you select Attributes.\n\n17.13 Use Cases\n\nThis section describes example use cases for autolearning and patterns.\n\n17.13.1 Use Case: Challenge Users If Log In Different Time Than Normally\n\nJeff is a Security Administrator at Dollar Bank. He wants to challenge users with an OTP if they are logging in at a time of day they do not normally come in. To do this he must configure a security policy and associated groups, rules and patterns.\n\nJeff starts with the pattern. He performs a search for patterns that have users as members since his use case focuses on the behavior of users.\n\nHe sees there are two patterns that have users as members. Neither of them has a time range attribute that works for his use case so Jeff must create a new one.\n\nJeff creates a multi-bucket login checkpoint pattern with \"user\" member type and first evaluation priority. He then adds a time range attribute from 0:00 - 23:00 and a step size of 4. This pattern creates and populates 6 time range buckets as users log in.\n\nJeff searches for the Post-Authentication checkpoint policies already in the system. There are four of them. Since he wants to challenge with an OTP he wants a policy that contains other rules with OTP challenge outcomes.\n\nNext Jeff requires a rule to evaluate the bucket memberships. Jeff searches the rules for one that evaluates if a member has fallen into the current bucket less than a specified percentage in the last specified period. He does not find one so he create one using a user in bucket less than % of time condition.\n\nJeff adds the rule to the policy and links the pattern.\n\nHe then must link action and alert groups. Jeff searches for an action group that contains the challenge OTP action. He finds that there is one already so he links it to the rule.\n\nHe searches for an alert group by \"time\" in the alert message text. He finds one alert group that has an alert with the alert text \"device has failed to log in successfully more than 10 times\". This alert is not appropriate for his rule so he decides to create a new alert group and alert.\n\nJeff creates a new alert group for his alert. He then adds a new medium alert to the group with the text \"User has fallen into this login time bucket less than 5% of the time in the last 3 months\".\n\nFinally Jeff links the alert group to the rule.\n\nHe performs log ins to the system to start autolearning.\n\n17.13.2 Use Case: Test a Pattern\n\nJeff a Security Administrator must make sure the pattern he configured in his use (see Section 17.13.1, \"Use Case: Challenge Users If Log In Different Time Than Normally\") is working properly.\n\nTo test the pattern:\n\nOne morning at 9:30 am he creates a new test user and then performs 7 successful logins.\n\nAt 3 pm of that day, he performs 3 successful logins.\n\nThe next day he logs in at 7 pm and is challenged with an OTP.\n\nThis occurs because he has fallen into the 7 pm time bucket less than 5% of the time in the last month.\n\nAfter the policy and pattern have been in the production system for a month he checks to see if the bucketing in the rule evaluation is accurate. Jeff runs a report to find users that triggered the rule by searching for sessions with the alert, \"User has fallen into this login time bucket less than 5% of the time in the last 3 months\".\n\nHe then selects a few of them and searches for their bucket memberships for this pattern in the last month.\n\nIn this way Jeff can see the session where the alert was triggered was at a time that fell into a bucket it had not previously fallen into more than 5% of the time in the last month. From that, Jeff confirms that the policy configuration and pattern are functioning as designed.\n\n17.13.3 Use Case: Track Off-Hour Access\n\nJeff is a Security Administrator at Dollar Bank. He wants to track off-hour access by employees based on a standard day shift. To do this, he must create a pattern for behavior-based profiling on time.\n\nThe pattern profiles the login times of users into three 8-hour buckets.\n\nFigure 17-9 Using Buckets to Track Off-Hour Access\n\nNavigate to the Patterns Search page, as described in Section 17.5, \"Navigating to the Patterns Search Page.\"\n\nIn the Patterns Search page, click the New Pattern button.\n\nIn the Create Pattern dialog, enter the Pattern name: \"User: Work hours.\"\n\nSelect Authentication as the transaction type.\n\nFrom the Creation Method list, select Multi-Bucket.\n\nSelect User as the Member Type.\n\nSelect First as the Evaluation Priority.\n\nEnter a description.\n\nClick OK.\n\nA confirmation is displayed.\n\nClick OK.\n\nThe Pattern Details page appears.\n\nClick the Attributes tab.\n\nOn this tab you can add/edit the attributes of the users behaviors to be tracked. Choose from available attributes shown in the dropdown list.\n\nIn the Attributes page, click the Add button.\n\nIn the Add Attributes dialog, select Time from the available attributes shown in the drop-down list.\n\nEdit the attribute details.\n\nSelect Active as the Status.\n\nEnter the description.\n\nFor example, \"This creates three 8-hour buckets.\"\n\nSelect a compare operator range with start value of 0 and end value of 23.\n\nEnter 8 as the Increment Step.\n\nClick Add.\n\nClick Apply.\n\nOAAM creates buckets as needed for the behavior.\n\n17.13.4 Use Case: User Logs in During a Certain Time of Day More Than X Times\n\nJeff is a Security Administrator at Dollar Bank. He wants to be notified with an alert if a user logs in between 10 am to 5 pm more than 3 times. To do this, he must create a pattern that profiles users and time, and an alert group.\n\nCreate a single bucket pattern called, TimeLog10AM-5PM_PS, with the member type, user.\n\nAdd the Attribute, Time.\n\nCompare operator is Range\n\nStart value is 10 (10 am)\n\nEnd value is 17 (5 pm)\n\nCreate an Alert Group so that an alert is used to notify you about either anomalies or information in the system when rules are triggered.\n\nFor information on Action and Alert groups, see Chapter 12, \"Managing Groups.\"\n\nCreate a policy that uses autolearning conditions in the Post-Authentication checkpoint.\n\nCreate a rule within the policy that uses conditions to associate the pattern.\n\nEnsure that the rule contains the autolearning condition, \"Entity: Entity is member of pattern N times.\"\n\nFill in the values for the condition\n\nLabel Name Default\n\nPattern Hit Count More than\n\nPattern Hit Count More than\n\n3\n\nPattern Name For Membership\n\nPattern Name for Membership\n\nTimeLog10AM-5PM_PS\n\nis Membership Count more than the Pattern Hit Count for User\n\nisMoreThan\n\ntrue\n\nTime period type for pattern membership\n\nTime Period Type for Patternmembership\n\nhours\n\nTime Period Type for Pattern Membership\n\nTime Period Type for Pattern Membership\n\n1\n\nMember Type for pattern Membership\n\nMemberType for pattern Membership\n\nuser\n\nAdd the Alert group as a result of the rule.\n\nGroup link to user group.\n\nVerify that the alerts are generated, starting with the fourth login.\n\n17.13.5 Use Case: Patterns Can have Multiple Member Types\n\nJeff is a Security Administrator at Dollar Bank. He wants to track logins by employees based on days of the week and devices. To do this, he must create a pattern to profile the days of the week, users, and devices login.\n\nIf Joe logs in on Monday, his User ID and the Device ID of the computer he is using are added to the Monday bucket once. If Fred uses the same computer to log in on Monday, his User ID and the Device ID of the computer will be added once. At that point, the Monday bucket will have one count for Joe, one count for Fred, and two counts for the device. Rule conditions are then used to evaluate the bucket memberships.\n\nA rule could be created to evaluate one member type of multiple member types.\n\nFor example,\n\nJoe logged in on Tuesday less than 5% of the time in the last two months\n\nJoe and this computer logged in on Tuesday less than 5% of the time in the last two months\n\nTo set up patterns so that they can have multiple member types with the members independently profiled by the pattern, you perform the following steps.\n\nCreate a pattern with User and Device as entities. It will have \"Day of the Week\" as the attribute and the operator for the attribute will be \"for each.\"\n\nDescribe the bucket population correctly.\n\nThe condition to use is \"Entity member of pattern (fingerprint) less than percentage times (as compared to its own data).\"\n\nFor information, see Section C.2.1.2, \"Pattern (Authentication): Entity is Member of Pattern Less Than Some Percent Time.\"\n\nCreate one rule.\n\nSet the percent value to be 5% in the rule.\n\nSet the pattern described in Step1 as the pattern in the rule.\n\nSet the entity to be user.\n\nSet time period to 2.\n\nSet time period type to months.\n\nLeave the other values to the default.\n\nCreate another rule.\n\nSet the percent value to be 5% in the rule.\n\nSet the pattern described in Step1 as the pattern in the rule.\n\nSet entity to be device this time.\n\nSet time period to 2.\n\nSet time period type to months.\n\nLeave the other values to the default.\n\n17.13.6 Use Case: City Usage\n\nJoe's company wants all users to be challenged with an OTP if they are logging in from a city they are not a member of.\n\nJoe logs in from three cities (home, office A and office B). A city pattern records how often he logs in from each.\n\nBucket Location\n\nCity Bucket #1\n\nhome\n\nCity Bucket #2\n\noffice A\n\nCity Bucket #3\n\noffice B\n\nJoe's company wants users to be challenged with an OTP two sessions in a row if they are logging in from a city they have not used in the last month. If Joe stops working at office B for 37 days and does not access from anywhere else in that city he will be challenged for an OTP the next time he logs in from that city. To accomplish this use case a rule will be configured to check on the membership count for the current city bucket in the last month. The count threshold will be set to two so the rule will trigger until the user has been a member at least twice in the last rolling month window.\n\nTo set up the system so that users are challenged with an OTP if they are logging in from a city they are not a member of, perform the following steps.\n\nCreate a pattern with User as the actor, City as the attribute, and For Each as the compare operator.\n\nUse the condition, \"Entity is member of bucket less than N times in given time period\"\n\nSet the rule parameters for conditions as:\n\nPattern Name as the pattern that you have created.\n\nTime period type is month.\n\nTime period is 1.\n\nCount is 3.\n\nOperator if required is less than.\n\nThe rule will trigger (and challenge) the user, if the user has not used that city more than 2 times in the last month (in last 30 days).\n\n17.13.7 Use Case: Autolearning Adapts to Behavior of Entities\n\nIn addition to profiling, collecting data, and checking it, autolearning adjusts so that the system acts depending on the user's behavior. Conditions and the specified percentage remain unchanged.\n\nIf you log into the bank application from California everyday, but then you locate to Seattle without informing your bank. When you log in for the first time from Seattle, you are challenged. The second time, you are challenged again because you are logging in from a city less than 50% of your total logins within 1 month. The system knows Seattle is not the usual place you log in from. You are annoyed, but do not consider it a hindrance yet. Challenging you again will degrade your user experience.\n\nThe condition, therefore, has to be configured in such a way that there is a percentage when the system knows that it should no longer challenge you. The system should automatically be smart enough to understand that you are logging in from Seattle every time now going forward and that it should not challenge you.\n\nThe system does not challenge you when you log in a third time from Seattle. When you fly to California after three months the system challenges you when you log in. The system wanted to make sure that you are the person logging in to the system.\n\nExample\n\nYou want the system to KBA challenge the user if the user logs in from a city less than 50% of the time within a month.\n\nCreate a multi- bucket pattern for each city called, UserLoginsCity.\n\nMember type is user\n\nAttribute is City; compare operator is \"for each\"\n\nWhen a user logs in from different cities a bucket will be created for each city\n\nCreate an Action Group to KBA challenge the user for each city less than % membership.\n\nCreate policy that will use autolearning conditions in the Post-Authentication checkpoint.\n\nCreate a rule within the policy that uses conditions to associate the pattern.\n\nThe rule will calculate the percentage membership of a user belonging to a pattern\n\nEnsure that the rule contains the autolearning condition, \"Entity: Entity is member of pattern less than some percent times\".\n\nFor information on this condition, see \"Pattern (Authentication): Entity is Member of Pattern Less Than Some Percent Time\".\n\nFill in the values for the condition\n\nLabel Default\n\nPattern Hit Percent less than\n\n50\n\nPattern name for membership\n\nUserLoginsCity\n\nIs Membership Count Less than patternHitPercent\n\nTrue\n\nTime period type for pattern membership\n\nMonth\n\nTime period for pattern membership\n\n1\n\nMember type for pattern membership\n\nUser\n\nAdd the Action group as a result of the rule.\n\nGroup link to user group.\n\nIf the user logs in from a city < than 50% of the total logins within 1 month, the user is challenged.\n\n17.13.8 Use Case: Single Bucket Pattern\n\nSingle-bucket (manually created) patterns create and populate one bucket with the exact data points and value ranges specified in the pattern. You can create a pattern that describes behavior that has been deemed to be high risk based on industry expertise.\n\nYou can configure a bucket so that OAAM can look for any traffic that falls in:\n\n8am -10am pattern\n\nNew location\n\nNew device\n\nNew transfer account, not owned by this user is created\n\nWire transfer to new account\n\nThis specific combination has been known to be a very high fraud risk in the past so you want to challenge with an OTP through SMS any time this pattern is seen.\n\n17.13.9 Use Case: Using Pattern\n\nA Security Administrator must configure a policy that challenges a user with a challenge question if the user is logging in from a state that he or she does not log in from very often, specifically one that he or she uses less than twice in a month.\n\nThe outcome should include a score and an alert.\n\nWhy use patterns for this scenario\n\nThis evaluation involves both profiling (patterns) and the rules to evaluate those patterns.\n\nPatterns are used in this scenario for the following reasons:\n\nIf rules are to track the frequency of behavior, the period for evaluating the frequency might be relatively long, especially if the evaluation requires months or even years. Using a pattern is recommended in these cases because rules will not have to perform large queries for results. Oracle Adaptive Access Manager checks the bucketing to see if the user is a member of the current state bucket that he is falling into now and the frequency at which he has fallen into that bucket.\n\nOther rules that run can use the pattern, which tracks the state or frequency of state usage, for other types of risk evaluations. By using the same pattern, no overhead is incurred to impact performance.\n\nSteps\n\nLog in to OAAM Admin as an administrator.\n\nIn the Navigation tree, double-click Patterns. The Patterns Search page is displayed.\n\nClick the New Pattern button.\n\nCreate a pattern where:\n\nCreation Method: Multi-bucket\n\nMember Type: User\n\nEvaluation Priority: High\n\nDescription: Pattern to track the state usage and frequency\n\nClick Create.\n\nClick the Attribute tab.\n\nClick the Add button.\n\nIn the Add Attribute dialog, select State as the attribute and click Next.\n\nIn the page following, select for Each as the Compare Operator and click Add and then OK.\n\nThe compare operator for Each is selected to profile every state that users log in from (a bucket is created for each state and populated with users as they fall into the buckets).\n\nIn the Navigator tree, double-click Group.\n\nClick New Group. The Create Group dialog is displayed.\n\nCreate a new StateNotUsedOften alert group.\n\nGroup name: State not used often\n\nGroup type: alerts\n\nCaching policy: Full cache since the group is used in rules and conditions.\n\nClick Create and then OK. The Group Details page is display.\n\nIn the Alerts tab of the Group Details page, click Add Member.\n\nIn the Add Member page, select Create new element.\n\nSelect the Customer Care as the alert type.\n\nSelect the Medium as the alert level.\n\nType in the alert message in the Alert Message box.\n\nFor example, user is logging in from a state he or she has used less than 2 times in a month.\n\nClick Add to create and add the new alert to the alert group.\n\nWhen the confirmation dialog appears, click OK to dismiss the dialog.\n\nIn the Navigation tree, double-click Policies. The Policies Search page is displayed.\n\nSearch policies for post-authentication policies that are available.\n\nIn best practices, KBA challenges occur in the Post-Authentication checkpoint.\n\nBecause the rule being created will have the outcome of a KBA challenge, it will have to be in the Post-Authentication checkpoint. It must also be in a policy in which there is a check for KBA registration before this rule runs.\n\nOpen the policy to the details page and click the Rules tab.\n\nClick Add.\n\nPlan the rule:\n\nA rule should be created to KBA-challenge the user if it is triggered; therefore the rule must be contained in a policy with other rule challenges.\n\nBecause the rule will result in a KBA challenge, the best practice is for the scoring that you set and configure for the rule to have a relationship to the action/outcome of that rule and to the severity of that rule that is being evaluated. The severity of the situation, the action for which the rule would trigger, and the score in which the rule would generate must be proportional to each other.\n\nThe rule is checking if the user is logging in from a state that he has logged in from recently, but the situation does not necessarily mean fraud. The situation is one of medium risk--that is why a KBA challenge is used instead of a block. A KBA challenge is appropriate for the scores in the 500 to 700 risk range. For this example, a score of 600 is specified. An OTP challenge would have been appropriate for a score in the 701 to 900 range. For a score of 900 and over, the action triggered should be a \"block.\" The user should be allowed to continue on if the score is under 500.\n\nEnter the summary information and click the Results tab.\n\nEnter 600 as the score.\n\nEnter 100 as the weight.\n\nSelect ChallengeQuestionPad as the action.\n\nSelect StateNotUsedOften as the alert.\n\nClick the Conditions tab.\n\nClick Add and select Pattern (Authentication): Entity is Member of Pattern N Times.\n\nEnter the following values:\n\nLabel Name Default\n\nPattern Hit Count More than\n\nPattern Hit Count More than\n\n2\n\nPattern Name For MemberShip\n\nPattern Name for MemberShip\n\nuser:state\n\nis MemberShip Count more than the Pattern Hit Count for User\n\nisMoreThan\n\nfalse\n\nTime period type for pattern membership\n\nTime Period Type for Patternmembership\n\nmonth\n\nTime Period Type for Pattern MemberShip\n\nTime Period Type for Pattern MemberShip\n\n1\n\nMemberType for pattern Membership\n\nMemberType for pattern Membership\n\nuser\n\nClick Save to save your changes.\n\nA confirmation dialog displays the status of the operation.\n\nClick OK to dismiss the confirmation dialog.\n\n17.13.10 Use Case: Logins from Out of State\n\nAcme is a small business group and all their clients are local to the city and are not expected to travel out of the state very often. The business group wants to track all logins occurring from other states, so they can challenge the users and also trigger a high alert so they can investigate to ensure that it is a valid user logging in from the other state. If they are valid, they will be added to an \"Allow User group\" so they will not be challenged the next time they log in from another state.\n\nSet autolearning properties to true.\n\nvcrypt.tracker.autolearning.use.auth.status.for.analysis\n\nvcrypt.tracker.autolearnin.enabled\n\nCreate a single bucket pattern with the following parameters so the pattern tracks all logins not occurring from this state. Essentially the counter will be incremented every time the login occurs from another state.\n\nTransaction Type: Authentication\n\nAttribute: State\n\nCompare Operator: Not in\n\nCompare Value: State name\n\nMember Type: User\n\nEvaluation Priority: First\n\nUse this pattern in a rule condition.\n\nCreate a rule.\n\nAdd the condition, ENTITY: Entity is member of pattern N times.\n\nPattern hit count more than: count\n\nPattern Name for membership: Pattern name\n\nIs Membership Count More than patternHitCountForUser: True\n\nTime period type for pattern membership-- Hours\n\nTime period for pattern membership: 1\n\nMember type for pattern membership-- User\n\nSave the policy and rule.\n\nSimulate a few logins from different states. The users should be challenged and a high alert should be triggered.\n\nAdd a user to the \"White User Group\".\n\nAdd this user group to \"excluded user group\" in the pre-conditions in the rule.\n\nSave the policy and rule.\n\nRepeat step 5. Users in the White User Group will not be challenged.\n\n17.19 Pattern Attributes Operators Reference\n\nInformation about the pattern attribute operators is presented in this section.\n\nThe Day of Week and City attributes are used in the examples that follow to illustrate how operators work.\n\nNumbers corresponding to the days of the week are:\n\n1 = Sunday\n\n2 = Monday\n\n3 = Tuesday\n\n4 = Wednesday\n\n5 = Thursday\n\n6 = Friday\n\n7 = Saturday\n\nOracle Adaptive Access Manager will create buckets dynamically as necessary. The first time the criteria specified is fulfilled, Oracle Adaptive Access Manager will create a bucket for the criteria and add the actor as a member with a count of one. The next time the criteria is fulfilled, the actor is added to that same bucket as a member with a count of one. Each subsequent time the criteria is fulfilled, the bucket counter will be incremented.\n\n17.19.1 For Each\n\nIf the For each attribute is set, a bucket is created for each distinct value of the attribute.\n\nWhen the user specifies For Each, and Day of Week as the attribute, a bucket will be created dynamically for each day of the week as required and the counts updated for the buckets as logins occur.\n\n17.19.2 Equals\n\nIf the Equals operator is set, the bucket is created and then the count updated only when the attribute value equals the value specified in the Compare Value field.\n\nWhen the user specifies Day of Week as the attribute and enters 7 (Saturday) in the Compare Value field, a bucket is created for Saturday and the count updated as soon as he logs in on Saturday. The other days do not fulfill the criteria he specified.\n\n17.19.3 Less Than\n\nIf the Less Than operator is specified, a bucket is created and the count updated only when the attribute value is less than the value specified in the Compare Value field.\n\nWhen the user specifies Day of Week as the attribute and enters 4 (Wednesday), a single bucket is created for Sunday (day=1), Monday (day=2), and Tuesday (day=3) and all his logins on Sunday, Monday, and Tuesday will be counted as part of that bucket.\n\n17.19.4 Greater Than\n\nIf the Greater Than operator is specified, a bucket is created and the count updated only when the attribute value is greater than the value specified in the Compare Value field.\n\nIf the user specifies Day of Week as the attribute and enters 3 (Tuesday), a single bucket is created and the count updated only for Wednesday (day=4), Thursday (day=5), Friday (day=6), and Saturday (day=7). A bucket will not be created nor will the count be updated for the user for Tuesday (day=3).\n\n17.19.5 Less Than Equal To\n\nIf the Less Than Equal To operator is specified, a bucket is created and the count updated only if the attribute value is less than or equal to the value specified in the Compare Value field.\n\nWhen the user specifies Day of Week as the attribute and enters 3 (Tuesday), a bucket will be created and the count updated when the user logs in on Sunday (day=1), Monday (day=2), and Tuesday (day=3). In Less Than Equal To 3, Tuesday (day=3) also qualifies as meeting the bucket population criteria.\n\n17.19.6 Greater Than Equal To\n\nIf the Greater Than Equal To operator is specified, a bucket is created and the count updated only if the attribute value is greater than or equal to the value specified in the Compare Value field.\n\nWhen the user specifies Day of Week as the attribute and entered 3 (Tuesday), a bucket will be created and the count updated when the user logs in on Tuesday (day=3), Wednesday (day=4), Thursday (day=5), Friday (day=6), and Saturday (day=7). In Greater Than Equal To 3, Tuesday also qualifies as meeting the bucket population criteria.\n\n17.19.7 Not Equal\n\nIf the Not Equal operator is set, a bucket is created and the count updated when the authentication/transaction attribute has a value not equal to the value specified in the Compare Value field by the user.\n\nIn the Day of Week example, if the user specifies a value of 1 (Sunday), a single bucket will be created for all logins other than Sunday (day=1).\n\n17.19.8 In\n\nThe In operator works like the Equals operator except all the comma separated values in the Compare Value field are used for an \"equals to\" comparison. In the Day of Week example, if the user enters 1,2,3,4,5, a single bucket is created for all logins that fall on Sunday (day = 1) through Thursday (day =5).\n\n17.19.9 Not In\n\nThe Not In operator works exactly the opposite of In. In the Day of Week example, if the user enters the values 1,2,3,4,5 for the day of the week, a single bucket is created for Friday (day = 6) and Saturday (day =7) only.\n\n17.19.10 Like\n\nThe Like operator is applicable and enabled only for string type attributes. If the user's login \"city\" is used as the attributes and he specifies \"San\" for the city attribute, his logins from the cities, \"San Francisco,\" \"Santa Clara,\" \"San Jose,\" and \"Sangamner\" will result in a single bucket and updates to the count.\n\n\"Like\" compares the string attribute's value with the one specified by the user.\n\n17.19.11 Not Like\n\nThe Not like operator is applicable and enabled only for string type attributes. If the user's login \"city\" is used as the attribute and he specifies \"San\" for the City attribute, his logins from the cities, \"San Francisco,\" \"Santa Clara,\" \"San Jose,\" and \"Sangamner\" will not result in the creation of a bucket or updates to the count. His logins from Redwood City, Austin, and other cities that do not have \"San\" in the name will result in a single bucket and updates for this pattern.\n\n17.19.12 Range\n\nRange is usually used with numerics.\n\nFigure 17-10 Range Compare Operator\n\n17.19.12.1 Fixed Range\n\nWhen the user enters values for Start Value and End Value and leaves the Increment Step value as 0, he wants to create a bucket for the activity when the attribute value is Greater Than Equal To the Start Value and Less Than Equal To the End Value. Using the Day of Week example, if the user enters 1 (Sunday) as the Start Value and 5 (Thursday) as the End Value, all the logins from Sunday (day=1) through Thursday (day=5) will result in the creation and updates to the count of a single bucket. A fixed range is when the upper and lower limit are fixed and there are no steps \"in between\" (the increment step is not entered by user).\n\n17.19.12.2 Fixed Range with Steps (or Increment)\n\nWhen the user enters values for Start Value and End Value and also provides a value for the Increment Step, he wants to create a bucket for the activity when the attribute value is Greater Than or equal to the Start Value and Less Than Equal To the End Value and he wants to create finer level buckets which are separated by the \"increment\" value of the attribute. Using the Day of Week example, if the user enters 1 (Sunday) as the Start Value and 5 (Thursday) as the End Value and the Increment Step as 1, all the logins from Sunday (day=1) through Thursday (day=5) will result in the creation and updates to the count of multiple buckets. A bucket will be created and updated for the day starting Monday and then for each day (since the increment is one).\n\n17.19.12.3 Upper Unbound Ranges with Steps\n\nUpper unbounded ranges with increment steps are used for items, such as numbers, such as amounts. Basically, multiple-tiered ranges can be configured.\n\nFor example you can configure\n\n0 to 100 with Step 10.\n\n101 to 1000 with Step 100.\n\n1001 to 10000 with Step 1000.\n\n10001 to ... with Step 10000.\n\nAll the ranges but the last one works the same way as the earlier range example with Start Value and End Value with Increment Step.\n\nThe last range works as if the upper limit is infinity. In this scenario, buckets are created for each 10000 (ten thousand) after 10001 (ten thousand one).\n\nIf a user has an amount of 200,123 (two hundred thousand 123), a bucket would be created for him for 200,000 through 210,000. His transaction for this amount will fall into this bucket."
    }
}