{
    "id": "dbpedia_9267_0",
    "rank": 46,
    "data": {
        "url": "https://medium.com/%40nathan5x/https-medium-com-nathan5x-chrome-dev-summit-2018-day-1-e7a68ea4321a",
        "read_more_link": "",
        "language": "en",
        "title": "Chrome Dev Summit 2018 ‚Äî Day 1. This is my first story/post after a‚Ä¶",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*HqpCNCFj7KjqSgmzqqXcKg.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*HqpCNCFj7KjqSgmzqqXcKg.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*hbZwdGCiy5_XXa-YKnZg8Q.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*hbZwdGCiy5_XXa-YKnZg8Q.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Sabarinathan Masilamani",
            "medium.com"
        ],
        "publish_date": "2018-11-17T22:03:12.656000+00:00",
        "summary": "",
        "meta_description": "This is my first story/post after a couple of years. So I decided to dedicate this to the awesome web community. I couldn‚Äôt find a better post than writing and sharing my experience with Chrome Dev‚Ä¶",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@nathan5x/https-medium-com-nathan5x-chrome-dev-summit-2018-day-1-e7a68ea4321a",
        "text": "This is my first story/post after a couple of years. So I decided to dedicate this to the awesome web community. I couldn‚Äôt find a better post than writing and sharing my experience with Chrome Dev Summit 2018. This post is mainly for anyone interested in knowing more about Chrome‚Äôs latest web platform capabilities and/or never had a chance to attend them in person, or who don‚Äôt have much time to watch @ChromeDeveloper‚Äôs Youtube channel. I tried my best to give the summit experience as useful as possible. So bear with me for mistakes/unclear details. Please feel free to comment/message any corrections you may find as you read.\n\nDisclaimer:\n\nAll the slides in the pictures of this post are owned by Google Inc.\n\nThis post just literally shares my understanding of the sessions and experience of the summit, not necessarily resembles the exact content or intent of the speakers. Thoughts expressed here are my own and not of my employers.\n\nChrome Dev Summit 2018\n\nChrome Dev Summit establishes a platform to share the latest and upcoming modern web technologies on web platform (especially Chrome) that can be used to build amazing web experiences and collect feedbacks. And, of course, to engage with the leading web developers in the community to build awesome stuff leveraging the latest capabilities and the best practices recommended by Chrome engineers and advocates.\n\nThis is the 6th Chrome Dev Summit, my first summit to attend in person meeting with all the web geeks and of course Googlers on Chrome team.\n\nLocation: Yerba Buena Center for the Arts ¬∑ San Francisco\n\nCan‚Äôt ask for the better location than this, perfect in the center of downtown San Francisco. üòà\n\nThis is one of the interesting kick starts at any conference that I have ever seen. It started off with the video hilariously describing how Chrome was baked from the fork of Apple Webkit. While it was hilarious, it also mentioned some of the key details went behind baking Chrome. Kudos to ‚Äî Jake Archibald, Paul Lewis, Mariko Kosaka for the fun filled start üëè\n\nAfter all, it was the 10th anniversary of Chrome and Android. Can‚Äôt believe its been 10 years since Chrome was launched. I guess the experience of using Chrome has made us forget the ubiquitous use of it.\n\nWithout further due, let‚Äôs dive into the keynote and sessions of the day.\n\nContext setting\n\nDay 1 ‚Äî Focussed more on what can be achieved today with the support of available modern web technologies and browser supports, and touched little bit of what‚Äôs coming.\n\nDay 2 ‚Äî Covered and highlighted what‚Äôs coming in the future, that includes experimental features on Chrome and proposals to TC 39. And at the end of the day, some of the key features of Chrome OS were highlighted.\n\nKeynote\n\nBen Galbraith, Director, Chrome\n\nDion Almaer, Director, Web Developer Ecosystem\n\nBen Galbraith and Dion Almaer covered a lot of topics and gave an insightful overview of the latest web platform capabilities and how Chrome has crossed various milestones, including security enhancements. Basically recalled how Chrome was started and became a mainstream browser, including the screenshots of the early version of Chrome especially that blue Omnibox with those cartoons. How nostalgic! üòä\n\nWhat Chrome has been supporting ‚Ä¶\n\nV8 engine ‚Äî Celebrating 10 yrs\n\nWeb Assembly support\n\nNative support of async / wait\n\nOptimization of object restructuring\n\nAV1 ‚Äî new video format\n\nWebP for images (new image format ‚Äî 30% perf improvement)\n\nHere are some of the Chrome Toolings highlighted,\n\nLighthouse (Some of you might have been already using it)\n\nPageSpeed Insights\n\nCrUX (Chrome User Experience)\n\nCase Studies and Examples\n\nStarbucks (native-like experience on mobile web)\n\nPinterest (video of mobile web experience played)\n\nWayfair (performance tool with ratings)\n\nThese case studies have highlighted some of the early results of customer acquisition of Chrome partners based on their adaption of latest web techniques.\n\nTwo interesting new features highlighted that I liked and anticipated a lot,\n\n1. Webpackaging (Would it replace the latest build tools? Webpack? ü§î)\n\n2. Portals\n\nThere was a smooth demo that compared the Canvas rendering with and without WebAssembly and Workers.\n\nCheck out the demo yourself ‚Äî Demo\n\nLooks like Desktop PWA will be the next big thing in bringing modern web technologies to Desktop Apps. Spotify PWA was highlighted. Based on what I heard, Adobe Photoshop and Twitter will see Desktop PWA soon. üòª\n\nOne of the key highlights was web.dev üíª. A new resource to learn modern web technologies, best practices on page insights tooling, performance measurements and monitoring and help the web community to build faster websites. And, the day 1 keynote was ended with the sneak peek of the demo Project VisBug ü¶ã.\n\nThere was an interesting slide ‚ÄúService Workies‚Äù ‚öôÔ∏è‚Äî couldn‚Äôt resist sharing with you all here.\n\nHere is the link www.serviceworkies.com\n\nSome use cases where web performance matters\n\n1Ô∏è‚É£ Spotify story\n\nLooks like Spotify has been investing greatly on the mobile web as it has seen excellent growth, especially countries like Brazil where it has introduced the mobile web experience. Results showed the importance of mobile web considering how users can benefitted especially when they run out of storage spaces in their mobile phones.\n\nSome of the technical adaption üíª ‚öôÔ∏è ‚Äî Media Session API, Add to Home Screen, Protected Content (DRM) and more. There was also a mention of AB testing (Universe A vs Universe B) to validate the demand of mobile web.\n\n2Ô∏è‚É£ Starbucks story\n\nStarbucks addressed this hypothesis by adapting the latest\n\ncapabilities of the modern web\n\n‚ÄúHow can we use the web to give our customers the best possible experience?\n\nSome of the technical adaption üíª ‚öôÔ∏è‚Äî Caching through Service Workers, Workbox, IndexedDB, Credential Management API, Add to Home Screen, the right set of Accessibility, and a Pattern Library (Reusable React components)\n\nThis adaptation brought a 65% increase in Starbucks Registrations overall via the web.\n\n3Ô∏è‚É£ Pinterest story\n\nPinterest took a step back and rewritten their app from scratch using modern web PWA capabilities. The new app was 4x faster, JavaScript down to 200 KB from 650 KB, CSS down to 6KB from 160 KB. They measure their growth by the metric called Pins Seen.\n\nWhats achieved ‚Äî\n\nWorldwide : +103% weekly users +300% session duration\n\nLow-bandwidth areas: 300% weekly users and 600% Pins seen.\n\nI guess it is true to bring lots of mobile web to life and put in real-use. I still remember some of my friends had storage issues, and they generally don‚Äôt install apps unless it is really important. Bringing the native experience to mobile web would definitely be beneficial with the right adaptation of PWA and other modern web capabilities.\n\nMany other companies have been investing heavily on the mobile web. Here is a glimpse of some the companies worldwide.\n\nState of the Union for Speed Tooling\n\nPaul Irish, Performance Engineer\n\nElizabeth Sweeny, Product Manager\n\nThis session majorly covered three topics ‚Äî\n\nMetrics\n\nLighthouse\n\nUX Tooling\n\nI couldn‚Äôt agree more on this.\n\nMetrics: Some of you might have already been working to collect, measure and monitor the metrics. Some use Lighthouse and some PageSpeedInsights. This time Chrome introduced a new metric called ‚ÄúFirst Input Delay (FID)‚Äù along with First Contentful Paint, Time to Interactive (TTI)\n\nThis is an experimental metric, so it may or may not make it to the upcoming versions of Chrome.\n\nLighthouse: Lighthouse improvements on Chrome\n\nLighthouse report (introduced badges to better focus on metrics)\n\nRuntime reduction\n\nScore Bucketing (increased the bar for the green range to 90 to 100). This one was interesting, as they moved the range of green zone to a higher level. Better monitoring?\n\nThrottling simulation (‚ÄúFast 3G‚Äù is ‚ÄúSlow 4G‚Äù)\n\nLighthouse integrations (also in Web.dev)\n\nUX Tooling: Chrome UX Report\n\nRegional analysis (not sure about this, I guess I was taking notes on previous slides üòÉ üêí)\n\nCrUX Dashboard ‚Äî this is something new coming to Chrome. I‚Äôm excited to learn more about this.\n\nAlso, there was a mention of SquareSpace‚Äôs perf dashboard built along with Lighthouse. It significantly improved the TTI (Time-to-Interactive) by 3x.\n\nOverall unified Tooling experience by bringing some of the Lighthouse features to PageSpeed Insights that better helps the team. In other words, ‚ÄúPageSpeed API v5 is the new Lighthouse API v1‚Äù ‚òÑ\n\nSpeed Essentials: Key Techniques for Fast Websites\n\nHoussein Djirdeh, Developer Advocate\n\nKatie Hempenius, Chrome Engineer\n\nIn general, there are several pitfalls that can degrade the performance of any websites that will make the website slower. However, loading and optimizing three major assets would bring significant performance improvement to the websites. I‚Äôm sure, you guessed it correctly ‚Äî Images, Web Fonts, and JavaScript. This session has covered several techniques available today to optimize these assets and how it can be achieved efficiently.\n\n1Ô∏è‚É£ Images üì∑\n\nI remember experts (like Addy Osmani) recommending to use <video> tag in place of <img> tag when embedding GIFs. If I remember correctly, <video> uses intraframe compression effectively to bring GIFs to the web. On the other hand, WebP has been in use for almost 8 years. Not many developers know about this, it uses best class compression techniques.\n\nüåü Hint: Inspect Google Image Search üîç\n\nThis tweet has got very good attention from the participants as it evoked the eagerness of Apple fanboys. üòÉ üì±\n\n‚≠êÔ∏è New video format ‚Äî AV1 (AOMedia Video) is an open source video coding format developed by Alliance for Open Media. Could this be the future of the video on the web ü§î? It basically compresses the video by 30% (40‚Äì45% than MP4). Significant improvement to bring a growing number of videos on the web to low bandwidth areas.\n\n‚≠êÔ∏è Lazy loading technique for loading images into the browser ‚Äî Chrome introduced this new attribute ‚Äúlazyload‚Äù with values being on or off or auto in <img> tag to lazy load images natively. This is cool and much needed for image heavy websites.\n\n2Ô∏è‚É£ Web Fonts\n\nFor sites that rely on typography and fonts and rendering with perfect anti-aliasing ‚Äî here is the new tip\n\nfont-display: swap;\n\n[font-display ‚Äî CSS: Cascading Style Sheets | MDN]\n\nRefer this MDN page for more details on font-display swapping techniques.\n\n3Ô∏è‚É£ JavaScript\n\nThis section covered all the greatest techniques that can be used to optimize and load JavaScript effectively.\n\n‚≠êÔ∏è Split your JS bundle and load them on demand\n\n‚≠êÔ∏è Use dynamic import to load on demand modules. All the modern\n\nframeworks already supporting dynamic import.\n\nHere is the code snippet of Vue‚Äôs dynamic import to lazy load\n\ncomponents (you guessed it correctly I‚Äôm a big fan of Vue.js),\n\n‚≠êÔ∏è Use ‚Äúpreload‚Äù for script loading\n\n<link rel=‚Äúpreload‚Äù as=‚Äúscript‚Äù href=‚Äúcode.js‚Äù>\n\n‚≠êÔ∏è Only transpile what you need.\n\n‚≠êÔ∏è Differential serving ‚Äî serve bundles based on browser supports.\n\nUse this in Webpack config,\n\n‚Äútargets‚Äù : {\n\nesmodules: true\n\n}\n\n‚≠êÔ∏è Chrome‚Äôs native module loading,\n\nLoad as module\n\n<script type=‚Äùmodule‚Äù src=‚Äùmain.mjs‚Äù>\n\n‚≠êÔ∏è Use ‚Äònomodule‚Äô to hint the browser\n\n<script nomodule src=‚Äùbundle.js‚Äù>\n\n<link rel=‚Äùmodulepreload‚Äù as=‚Äùscript‚Äù>\n\n‚≠êÔ∏è Find unused CSS and JS. This can be monitored using the Coverage tab in Chrome.\n\n‚≠êÔ∏è Webpack Bundle Analyzer is another great utility tool to see the sizes of different bundles/dependency modules used.\n\n‚≠êÔ∏è Introduce Lighthouse as part of the CI process (supports well on Github) to monitor the metrics.\n\nHere is the popular clothing brand Uni Qlo‚Äôs successful results,\n\nIn summary, ‚ÄúUse what works best‚Äù üòä. But before introducing, understand the existing architecture.\n\nBuilding Faster, More Resilient Apps with Service Worker: A Caching Strategy Deep Dive\n\nEwa Gasperowicz, Developer Programs Engineer\n\nPhil Walton, Developer Programs Engineer\n\nThis is one of the excellent sessions that covered Service Worker and different caching strategies to provide the best user experience.\n\nAs you know Service Workers comes at a cost, so this session followed the objective ‚ÄúMaximize the benefits while reducing the cost‚Äù\n\nThere were two different strategies discussed,\n\n1. Serving strategy\n\n2. Caching strategy\n\nPlenty of resources available on these topics [Workbox | Google Developers]. Workbox JS provides easy to use wrapper APIs to bring Service Worker into the web app.\n\nSome of the recommendations shared in the talk to speedup navigations\n\n‚≠êÔ∏è Respond from Cache right away\n\n‚≠êÔ∏è When the network is needed, fetch partial content and stream the rest from a cache\n\n‚≠êÔ∏è Use navigation preload so network requests on SW startup\n\n‚ÄúService-Worker-Navigation-Preload: true‚Äù\n\nCaching strategy was explained very neatly with the example of Food | Side Dish | Trash by Ewa Gasperowicz. I missed taking that pic, but it was a good one üòâ. It basically explained ‚Äî cache what is needed and configure service worker accordingly, and of course use quota to manage cache efficiently.\n\nHere are some of the key points highlights, üåü\n\nüåü Hint: Workbox simplifies the implementation of SW with strategies.\n\nSmooth Moves: Rendering at the Speed of Right\n\nJason Miller, Developer Programs Engineer\n\nAdam Argyle, UX Engineer\n\nHow to start! Hmm‚Ä¶ Well‚Ä¶ There was an interesting pronunciation chit chat between Jason Miller and Adam Argyle for the demo app title whether to call ‚Äúschaaat‚Äù or ‚ÄúChaaat‚Äù or ‚Äúchat‚Äù. üòÑ\n\nMicro-interactions play a key role in perceiving the performance of the app. This session covered some of the useful techniques that enable rendering up to 60 fps.\n\nDelivering 60 fps on low-end mobile ensures the smoothness everywhere.\n\nThis session also touched some aspects of RAIL model, and discussed three key areas to achieve smooth moves,\n\n1Ô∏è‚É£ Efficient animation\n\nInstead of style.left (goes through 4 stages)\n\nRecalculate -> Layout -> Paint -> Composite\n\nUse style.transform (goes through 2 stages)\n\nRecalculate -> ~~Layout~~ -> ~~Paint~~ -> Composite\n\nAs it passes through only two stages to render the elements. Composite is an intensive memory-hogging task, so it is important to pay attention to simple CSS properties that could enable efficient rendering. On the other hand, GPUs are really good at transforming composited layers, and modern web browsers are taking advantage of this and renders the content efficiently.\n\n2Ô∏è‚É£ Read.then (write)\n\n‚≠êÔ∏è Script (read and write) causes some additional calculations, so this is another important area to focus on while rendering elements.\n\n‚≠êÔ∏è Sometimes requestAnimationFrame() could help in achieving the smoothness, but it should be used with caution.\n\n3Ô∏è‚É£ Lazy Wins\n\nUsing some of the native supported techniques could also bring good\n\nsmoothness. Here are some of them,\n\n‚≠êÔ∏è Leveraging browser scrolling (use of sticky display)\n\nAlso, the use of native smooth scrolling ignores the dependency of all\n\nthose DOM utilities.\n\nHere is the code snippet to smooth scroll,\n\nelement.scrollView({\n\nbehavior: ‚Äúsmooth‚Äù,\n\nblock: ‚Äúend‚Äù\n\n})\n\n‚≠êÔ∏èCSS property\n\nscroll-snap-start\n\n[Well-Controlled Scrolling with CSS Scroll Snap | Web | Google Developers]\n\nRefer this article written by Robert & Majit\n\nOverall, this session has covered how simple things can significantly improve the rendering performance of different DOM elements.\n\nComplex JS-heavy Web Apps, Avoiding the Slow\n\nJake Archibald, Developer Advocate\n\nMariko Kosaka, Drawsplainer\n\nThis is another interesting session üòç. Through the demo of Squoosh.app ‚Äî it covered how JS code can be significantly reduced.\n\nThe demo was started by showing how the app can apply different compression algorithms while maintaining a considerable amount of quality. If I remember correctly, they used a long shot image taken in Google IO. While Mariko Kosaka was playing with the app, Jake Archibald covered the story behind it. It was a perfect combo talk! üòâ\n\nAfter the demo, there was a story about how they went behind in building this app. Also covered different technologies and capabilities used to build the app.\n\nWhat went behind? Here are some I noted from the talk,\n\n‚≠êÔ∏è Uses OptiPNG (significant boost in reducing the PNG file size)\n\n‚≠ê Ô∏èLots of Web Assembly (especially for compression algorithms)\n\n‚≠êÔ∏è PREACT + Webpack\n\n‚≠êÔ∏è Two workers (one on either side)\n\n‚≠êÔ∏è Library comlink to take care of the communication between workers and main app thread.\n\nSurma has written an article Emscripting a C library to Wasm. Check out for more in-depth details on how WA can be used in your project.\n\nIt is surprising to see how the right combination of technologies can bring better code reduction and improvements. Squoosh.app is one of the great examples of such combination! Kudos Surma, Mariko, Jake Archibald and the team. Would you believe if the actual JS size of this app (excluding the WA side) is just 350 bytes üòã (minified and gzipped)? I was surprised to see such a heavy JS app is literally under 1Kb. And the audience was like wooooow‚Ä¶ that must be one heck of a reduction üòÑ\n\nBuilding Modern Web Media Experiences: Picture-in-Picture and AV1\n\nFran√ßois Beaufort, Developer Programs Engineer\n\nAngie Bird, Chrome Engineer\n\nIf you are building a media based apps or want to build one, this talk would be interesting and informative as it covered some of the key capabilities available today on the web platform.\n\nThis talk has covered PIP (Picture-in-Picture) APIs and codecs. And some code snippets that are ready to be used.\n\nChrome natively supports AV1 video format which was built on VP9. I remember it used to be H.264 which is widely adopted online. I guess, AV1 has brought better compression techniques that help load the videos faster.\n\nDemo: AV1 to H.264 Switching\n\nTo show this codec comparison, there was a demo that explained the smoothness of switching between two different formats and how it can play smoothly (just like a butter sliding between two slices of breadüòÑ).\n\nHere is the road map of AV1 support and when it is arriving to different platforms (this is just an ETA, timing might vary),\n\nTo get the different configuration of decoding information supported by the browser ‚Äî\n\nawait navigator.mediaCapabilities.decodingInfo(mediaConfig)\n\nHere is the MDN link [Media Capabilities API ‚Äî Web APIs | MDN]\n\nModern Websites for E-commerce in the Real World\n\nCheney Tsai, Mobile Solutions Consultant\n\nRamya Raghavan, Mobile Solutions Consultant\n\nThis is another talk where they showcased some of the partner case studies who adopted PWA and AMP capabilities, especially in the e-commerce domain. This talk covered these case studies under three categories,\n\nOrganizational Alignment\n\nTechnical Approach\n\nMeasurement\n\n1Ô∏è‚É£ Organizational Alignment\n\nWebsites mentioned: 1800flowers.com and justfly.com\n\nThey talked about how having along-term vision and plan for short-term goals can bring better results. I couldn‚Äôt take good notes for this üôÅ\n\n2Ô∏è‚É£ Technical Approach\n\nWebsites mentioned: walmart.com, ebay.com, and airbnb.com\n\nWalmart has significantly reduced their JS and CSS bundle sizes for faster loading of their web content and assets.\n\nWhereas, Ebay followed Predictive Prefetching of their Listing Pages to achieve faster loading. Imagine prefetching the details page when the user is viewing the listing page. The moment the user clicks the details page it will load at a blazing speed as the assets are pre-cached in the browser. This is very interesting as it leads to many technical challenges.\n\nAirbnb adopted client-side-rendering (CSR) like server-side-rendering (SSR) to achieve faster rendering. I assume, CSR has been introduced only in certain scenarios.\n\nThe motto of this technical approach is ‚ÄúImprove Speed by Focusing on User Navigations‚Äù.\n\n3Ô∏è‚É£ Measurement\n\nShowcased: Cdiscount, Carrousel, Wayfair\n\nThis section of the talk was mainly talked about how having a controlled measurement strategy and performance budget can bring in more customer acquisition.\n\nHere is the slideshot (new naming huh üòÑ) of how common goals tied to specific metrics and yield better results.\n\nPerformance Budget is basically a framework that helps in bring different stakeholders of the product to adhere to certain guidelines to achieve desired results while improving the performance (just saying üò∫). Addy Osmani has written a detailed article on several performance improvement techniques that also covered performance budget and other key measurements ‚Äî\n\nProgressive Content Management Systems\n\nAlberto Medina, Developer Advocate\n\nWeston Ruter, Developer Programs Engineer\n\nThis talk was one of my favorites as they took Wordpress as their experimental CMS platform to test the latest web platform capabilities like Service Workers and PWAs (Accelerated Mobile Pages). And of course, they shared the learnings that can be followed while introducing PWA capabilities to other CMS platforms.\n\nAlberto Medina had set the context of the talk before diving in and also talked about the importance of delightful User Experience. Here is the slideshot from his talk,\n\nI really like how he categorized different pillars that can impact the user experience. üòâ üëè\n\nThe twofold approach followed in the talk,\n\n1Ô∏è‚É£ AMP (AMP for Wordpress)\n\n2Ô∏è‚É£ Integration of Modern Web Capabilities and APIs\n\nWeston Ruter showcased the demo POC that was built to experiment PWAs in Wordpress\n\nLater, he shared the challenges and how it was solved. Also, described how the learnings can be applied to successfully introduce PWAs to any CMS platforms. If I remember correctly, some of the major CMS providers have already plugins built-in or coming soon to help the content creators to introduce progressive capabilities to their websites.\n\nMaking Modern Web Content Discoverable for Search\n\nMartin Splitt, Developer Advocate\n\nTom Greenaway, Developer Advocate\n\nThis talk was started with the quote (at least if I remember correctly ü§î)\n\n‚ÄúThe Best Practices for ensuring a modern JavaScript powered website is indexable by search.‚Äù\n\nThis is another interesting talk. I have always been intrigued by the search engines and how it crawls the content at a massive scale. Martin Splitt and Tom Greenaway gave an insightful session on how Google Search sees the content compared to web browsers (in other words frameworks‚Äôs CSR), and also covered several aspects of single-page-apps (SPA) contents to be discoverable.\n\nHere is the high-level architecture discussed,\n\nAnd it looks like, behind the scenes of search engine dynamic rendering plays a major role in sending optimized content to the browsers. It is fascinating how all these rendering magic happens at nanoseconds and gets delivered at microseconds!"
    }
}