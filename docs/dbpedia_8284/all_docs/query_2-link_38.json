{
    "id": "dbpedia_8284_2",
    "rank": 38,
    "data": {
        "url": "https://docs.cloudera.com/cdp-private-cloud-base/7.1.9/installation/topics/cm_ig_mysql.html",
        "read_more_link": "",
        "language": "en",
        "title": "Install and Configure MySQL for Cloudera Software",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://docs.cloudera.com/common/img/cloudera_short_logo.png",
            "https://docs.cloudera.com/common/img/cloudera.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "You can install a MySQL database for use with Cloudera Manager and other components that require a database.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "You can install a MySQL database for use with Cloudera Manager and other components that require a database.\n\nTo use a MySQL database, follow these procedures. For information on compatible versions of the MySQL database, see Database Requirements.\n\nBefore you begin\n\nEnsure that the MySQL DB is configured with the InnoDB engine by running the following command from the MySQL shell:\n\nmysql> show table status;\n\nInstalling the MySQL Server\n\nInstall the MySQL database:\n\nOS Command\n\nConfiguring and Starting the MySQL Server\n\nStop the MySQL server if it is running.\n\nOS Command RHEL 7 Compatible, SLES, and Ubuntu\n\nsudo systemctl stop mysqld\n\nMove old InnoDB log files /var/lib/mysql/ib_logfile0 and /var/lib/mysql/ib_logfile1 out of /var/lib/mysql/ to a backup location.\n\nDetermine the location of the option file, my.cnf (/etc/my.cnf by default).\n\nUpdate my.cnf so that it conforms to the following requirements:\n\nTo prevent deadlocks, set the isolation level to READ-COMMITTED.\n\nConfigure the InnoDB engine.\n\nThe default settings in the MySQL installations in most distributions use conservative buffer sizes and memory usage. Cloudera Management Service roles need high write throughput because they might insert many records in the database. Cloudera recommends that you set the innodb_flush_method property to O_DIRECT.\n\nSet the max_connections property according to the size of your cluster:\n\nFewer than 50 hosts - You can store more than one database (for example, both the Cloudera Manager Server and Reports Manager) on the same host. If you do this, you should:\n\nPut each database on its own physical disk for best performance. You can do this by manually setting up symbolic links or running multiple database instances (each instance uses a different data directory path).\n\nAllow 100 maximum connections for each database and then add 50 extra connections. For example, for two databases, set the maximum connections to 250. If you store four databases on one host (the databases for Cloudera Manager Server, Hue, Reports Manager, and Hive metastore), set the maximum connections to 450.\n\nMore than 50 hosts - Do not store more than one database on the same host. Use a separate host for each database/host pair. The hosts do not need to be reserved exclusively for databases, but each database should be on a separate host.\n\nIf the cluster has more than 1000 hosts, set the max_allowed_packet property to 16M. Without this setting, the cluster may fail to start due to the following exception: com.mysql.jdbc.PacketTooBigException.\n\nBinary logging is not a requirement for Cloudera Manager installations. Binary logging provides benefits such as MySQL replication or point-in-time incremental recovery after database restore. Examples of this configuration follow. For more information, see The Binary Log.\n\nHere is an option file with Cloudera recommended settings:\n\n[mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock transaction-isolation = READ-COMMITTED # Disabling symbolic-links is recommended to prevent assorted security risks; # to do so, uncomment this line: symbolic-links = 0 key_buffer_size = 32M max_allowed_packet = 16M thread_stack = 256K thread_cache_size = 64 # The following 3 parameters only apply to MySQL version 5.7 and lower: query_cache_limit = 8M query_cache_size = 64M query_cache_type = 1 max_connections = 550 #expire_logs_days = 10 #max_binlog_size = 100M #log_bin should be on a disk with enough free space. #Replace '/var/lib/mysql/mysql_binary_log' with an appropriate path for your #system and chown the specified folder to the mysql user. log_bin=/var/lib/mysql/mysql_binary_log #In later versions of MySQL, if you enable the binary log and do not set #a server_id, MySQL will not start. The server_id must be unique within #the replicating group. server_id=1 binlog_format = mixed read_buffer_size = 2M read_rnd_buffer_size = 16M sort_buffer_size = 8M join_buffer_size = 8M # InnoDB settings innodb_file_per_table = 1 innodb_flush_log_at_trx_commit = 2 innodb_log_buffer_size = 64M innodb_buffer_pool_size = 4G innodb_thread_concurrency = 8 innodb_flush_method = O_DIRECT innodb_log_file_size = 512M [mysqld_safe] log-error=/var/log/mysqld.log pid-file=/var/run/mysqld/mysqld.pid sql_mode=STRICT_ALL_TABLES\n\nIf you are using MySQL version 8, remove the following three parameters from the options file:\n\nquery_cache_limit = 8M query_cache_size = 64M query_cache_type = 1\n\nIf AppArmor is running on the host where MySQL is installed, you might need to configure AppArmor to allow MySQL to write to the binary.\n\nEnsure the MySQL server starts at boot:\n\nOS Command RHEL 7 Compatible, SLES, and Ubuntu\n\nsudo systemctl enable mysqld\n\nStart the MySQL server:\n\nOS Command RHEL 7 Compatible, SLES, and Ubuntu\n\nsudo systemctl start mysqld\n\nRun /usr/bin/mysql_secure_installation to set the MySQL root password and other security-related settings. In a new installation, the root password is blank. Press the Enter key when you're prompted for the root password. For the rest of the prompts, enter the responses listed below in bold:\n\nsudo /usr/bin/mysql_secure_installation\n\n[...] Enter current password for root (enter for none): OK, successfully used password, moving on... [...] Set root password? [Y/n] Y New password: Re-enter new password: Remove anonymous users? [Y/n] Y [...] Disallow root login remotely? [Y/n] N [...] Remove test database and access to it [Y/n] Y [...] Reload privilege tables now? [Y/n] Y All done!\n\nInstalling the MySQL JDBC Driver\n\nInstall the JDBC driver on the Cloudera Manager Server host, as well as any other hosts running services that require database access.\n\nCloudera recommends that you consolidate all roles that require databases on a limited number of hosts, and install the driver on those hosts. Locating all such roles on the same hosts is recommended but not required. Make sure to install the JDBC driver on each host running roles that access the database.\n\nOS Command RHEL\n\nDownload the MySQL JDBC driver from http://www.mysql.com/downloads/connector/j/5.1.html (in .tar.gz format). As of the time of writing, you can download version 5.1.48 using wget as follows:\n\nwget https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.48.tar.gz\n\nExtract the JDBC driver JAR file from the downloaded file. For example:\n\ntar zxvf mysql-connector-java-5.1.48.tar.gz\n\nCopy the JDBC driver, renamed, to /usr/share/java/. If the target directory does not yet exist, create it. For example:\n\nsudo mkdir -p /usr/share/java/ cd mysql-connector-java-5.1.48 sudo cp mysql-connector-java-5.1.48-bin.jar /usr/share/java/mysql-connector-java.jar\n\nSLES\n\nsudo zypper install mysql-connector-java\n\nUbuntu\n\nsudo apt-get install libmysql-java\n\nInstalling the MySQL client\n\nTo use MySQL as a backend database for Hue, you must install the MySQL client and other required dependencies on all the Hue hosts based on your operating system.\n\nCent OS\n\nRHEL\n\nSLES\n\nUbuntu\n\nSSH into the Hue host as a root user.\n\nDownload the MySQL yum repository as follows:\n\ncurl -sSLO https://dev.mysql.com/get/mysql80-community-release-el7-5.noarch.rpm\n\nInstall the package as follows:\n\nrpm -ivh mysql80-community-release-el7-5.noarch.rpm\n\nInstall the required dependencies as follows:\n\nyum install mysql-devel yum install -y xmlsec1 xmlsec1-openssl\n\nFor MySQL version 8.0.27, add the mysql-community-client-8.0.25 client package as follows:\n\nyum install mysql-community-client-8.0.25\n\nAdd the path where you installed the MySQL client and packages to the PATH environment variable as follows:\n\nexport PATH=/usr/local/bin:$PATH\n\nInstall the MySQL client as follows:\n\npip3.8 install mysqlclient\n\nSSH into the Hue host as a root user.\n\nDownload the MySQL yum repository as follows:\n\n(RHEL 7)\n\ncurl -sSLO https://dev.mysql.com/get/mysql80-community-release-el7-5.noarch.rpm\n\n(RHEL 8)\n\ncurl -sSLO https://dev.mysql.com/get/mysql80-community-release-el8-8.noarch.rpm\n\n(RHEL 9)\n\ncurl -sSLO https://dev.mysql.com/get/mysql80-community-release-el9-4.noarch.rpm\n\nInstall the package as follows:\n\n(RHEL 7)\n\nrpm -ivh mysql80-community-release-el7-5.noarch.rpm\n\n(RHEL 8)\n\nrpm -ivh mysql80-community-release-el8-8.noarch.rpm\n\n(RHEL 9)\n\nrpm -ivh mysql80-community-release-el9-4.noarch.rpm\n\nInstall the required dependencies as follows:\n\nyum install mysql-devel yum install -y xmlsec1 xmlsec1-openssl\n\nAdd the path where you installed the MySQL client and packages to the PATH environment variable as follows:\n\nexport PATH=/usr/local/bin:$PATH\n\nInstall the MySQL client as follows:\n\n(RHEL 8)\n\npip3.8 install mysqlclient\n\n(RHEL 9)\n\npip3.9 install mysqlclient\n\nSSH into the Hue host as a root user.\n\nInstall the required packages and dependencies as follows:\n\nzypper install libmysqlclient-devel zypper install xmlsec1 zypper install xmlsec1-devel zypper install xmlsec1-openssl-devel\n\nAdd the path where you installed the packages to the PATH environment variable as follows:\n\nexport PATH=/usr/local/bin:$PATH\n\nInstall the MySQL client as follows:\n\npip3.8 install mysqlclient\n\nSSH into the Hue host as a root user.\n\nInstall the required packages and dependencies as follows:\n\napt-get install libmysqlclient-dev apt-get install -y xmlsec1 apt-get install libxmlsec1-openssl\n\nAdd the path where you installed the packages to the PATH environment variable as follows:\n\nexport PATH=/usr/local/bin:$PATH\n\nInstall the MySQL client as follows:\n\npip3.8 install mysqlclient\n\nCreating Databases for Cloudera Software\n\nServices that require databases\n\nCreate databases and service accounts for components that require databases:\n\nCloudera Manager Server\n\nCloudera Management Service roles:\n\nReports Manager\n\nHue\n\nEach Hive metastore\n\nOozie\n\nSchema Registry\n\nStreams Messaging Manager\n\nSteps\n\nLog in as the root user, or another user with privileges to create database and grant privileges:\n\nmysql -u root -p\n\nEnter password:\n\nCreate databases for each service deployed in the cluster using the following commands. You can use any value you want for the <database>, <user>, and <password> parameters. The Databases for Cloudera Software table, below lists the default names provided in the Cloudera Manager configuration settings, but you are not required to use them.\n\nConfigure all databases to use the utf8 character set.\n\nInclude the character set for each database when you run the CREATE DATABASE statements described below.\n\nCREATE DATABASE <database> DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;\n\nQuery OK, 1 row affected (0.00 sec)\n\nCreate USER by following the steps in this topic: CREATE USER Statement.\n\nGRANT ALL ON <database>.* TO '<user>'@'%';\n\nQuery OK, 0 rows affected (0.00 sec)\n\nTable 1. Databases for Cloudera Software Service Database User Cloudera Manager Server scm scm Reports Manager rman rman Ranger RHEL/CentOS/Ubuntu ranger rangeradmin Ranger KMS RHEL/CentOS rangerkms rangerkms Hue hue hue Hive Metastore Server hive hive Oozie oozie oozie Schema Registry schemaregistry schemaregistry Streams Messaging Manager smm smm\n\nConfirm that you have created all of the databases:\n\nSHOW DATABASES;\n\nYou can also confirm the privilege grants for a given user by running:\n\nSHOW GRANTS FOR '<user>'@'%';\n\nRecord the values you enter for database names, usernames, and passwords. The Cloudera Manager installation wizard requires this information to correctly connect to these databases."
    }
}