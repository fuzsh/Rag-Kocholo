{
    "id": "dbpedia_8284_0",
    "rank": 83,
    "data": {
        "url": "https://riccardotramma.com/2015/01/mysql-c-with-mysql-connector/",
        "read_more_link": "",
        "language": "en",
        "title": "MySQL C++ with mysql-connector",
        "top_image": "https://riccardotramma.com/wp-content/uploads/2015/01/MySqlConnectorCpp-1.jpg",
        "meta_img": "https://riccardotramma.com/wp-content/uploads/2015/01/MySqlConnectorCpp-1.jpg",
        "images": [
            "https://riccardotramma.com/wp-content/themes/hueman/assets/front/img/header/default-header-280.jpg",
            "https://riccardotramma.com/wp-content/uploads/2015/01/MySqlConnectorCpp-1.jpg",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-C++-01.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-C++-02.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-C++-03.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-C++-04.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/Visual-Studio-2010-01.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/CMake-MySQL-Connector-011.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-C++-Visual-Studio-01.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-C++-Visual-Studio-02.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-C++-Visual-Studio-03.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-C++-Visual-Studio-04.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-C++-Visual-Studio-05.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-C++-Visual-Studio-06.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-01.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-02.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-03.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-04.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-05.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-06.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-07.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-08.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-09.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-10.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-11.png",
            "https://riccardotramma.aionentertainmentltd.com/wp-content/uploads/2014/09/MySQL-Connector-Code-12.png",
            "https://riccardotramma.com/wp-content/themes/hueman/assets/front/img/thumb-medium-empty.png",
            "https://riccardotramma.com/wp-content/themes/hueman/assets/front/img/thumb-medium-empty.png",
            "https://riccardotramma.com/wp-content/uploads/2015/01/boost-1.png",
            "https://secure.gravatar.com/avatar/?s=48&d=retro&r=g"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Riccardo Tramma"
        ],
        "publish_date": "2015-01-25T10:47:36+00:00",
        "summary": "",
        "meta_description": "This post is a tutorial that will explain hot to write a simple C++ code that can be considered the starting point for any other program you intend to write in C++ with the intention to use a MySQL…",
        "meta_lang": "en",
        "meta_favicon": "https://riccardotramma.com/wp-content/uploads/2018/09/cropped-avatar-32x32.png",
        "meta_site_name": "Riccardo Tramma",
        "canonical_link": "https://riccardotramma.com/2015/01/mysql-c-with-mysql-connector/",
        "text": "This post is a tutorial that will explain hot to write a simple C++ code that can be considered the starting point for any other program you intend to write in C++ with the intention to use a MySQL Database.\n\nIn order to connect to MySQL from C++ we will use some libraries specifically designed for this purpose.\n\nDespite the concept seems simple, there are a series of gotchas and configurations that can put off the task many people, increasing the amount of work needed and not necessarily forecasted.\n\nThis tutorial will reach the goal starting essentially from scratch, where the environment needs to be completely configured… even without Visual Studio!\n\nWhile writing this tutorial, I decided to split it in multiple sub-posts because of the amount of information I ended up collecting. Doing this will remove some of the noise around the main topic and will allow to follow the post and the specific sections even for people with different requirements that have already available some of the systems I am going to describe.\n\nAs a reference, these are the additional posts:\n\nCMake Installation and usage (Command Prompt Console and GUI)\n\nBoost Libraries Installation\n\nMySQL Service, Workspace, Users and Tables\n\nEnough said, let’s start the journey! See you at the end of this. Happy reading.\n\nTable of Contents\n\nmysql-connector (1.1.4) – Download\n\nFirst things first… let’s immediately download what we are really interested in, the C++ libraries (source) that will allow us to connect and interact with a MySQL database.\n\nOpen the browser to the MySQL website and navigate to the page with the information about the connector:\n\nhttp://dev.mysql.com/downloads/connector/cpp/\n\nSelect the “Source Code” option from the drop-down menu:\n\nDownload the generic Windows version:\n\nIn the following page select your preferred download option or just download it using the link at the bottom of the page:\n\nLet’s remember the warning reported on the website:\n\n[stextbox id=”warning” caption=”Warning”]One problem that can occur is when the tools you use to build your application are not compatible with the tools used to build the binary versions of MySQL Connector/C++. Ideally, you need to build your application with the same tools that were used to build the MySQL Connector/C++ binaries.\n\n[/stextbox]\n\nCreate a folder, for example “C:\\libs\\” and extract the archive in there.\n\nThe structure should look like this:\n\nIn order to build the source code for the connector libraries we need to download CMake.\n\nIt’s time to switch to the first sub-post if you need to perform this step and install CMake (CMake Installation and usage (Command Prompt Console and GUI)).\n\nJump to this post and see you here once you are ready to continue (I would suggest you to follow just the initial part of the tutorial, limited to installing it. The remainder will be useful later on and will probably not work on your system if you don’t have everything else already configured): CMake Installation and usage\n\nBack from CMake Installation\n\nI will assume that you have CMake installed on your system now.\n\nmysql-connector 1.1.4 – Build – First Potential Problem (Missing Visual Studio)\n\nIf we try to run the CMake command to generate the Visual Studio solution from the mysql-connector code we could potentially immediately receive an error.\n\nLet’s try this using the Command line:\n\nC:\\libs\\mysql-connector-c++-1.1.4>cmake -G “Visual Studio 10”\n\nIf you don’t have the C/C++ compiler then you will see this error:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\nCMake Warning (dev) in CMakeLists.txt:\n\nSyntax Warning in cmake code at\n\nC:/libs/mysql-connector-c++-1.1.4/CMakeLists.txt:61:24\n\nArgument not separated from preceding token by whitespace.\n\nThis warning is for project developers. Use -Wno-dev to suppress it.\n\nCMake Warning (dev) in CMakeLists.txt:\n\nSyntax Warning in cmake code at\n\nC:/libs/mysql-connector-c++-1.1.4/CMakeLists.txt:61:43\n\nArgument not separated from preceding token by whitespace.\n\nThis warning is for project developers. Use -Wno-dev to suppress it.\n\n-- The C compiler identification is unknown\n\n-- The CXX compiler identification is unknown\n\nCMake Error at CMakeLists.txt:26 (PROJECT):\n\nNo CMAKE_C_COMPILER could be found.\n\nCMake Error at CMakeLists.txt:26 (PROJECT):\n\nNo CMAKE_CXX_COMPILER could be found.\n\n-- Configuring incomplete, errors occurred!\n\nSee also \"C:/libs/mysql-connector-c++-1.1.4/CMakeFiles/CMakeOutput.log\".\n\nSee also \"C:/libs/mysql-connector-c++-1.1.4/CMakeFiles/CMakeError.log\".\n\nPay particular attention to the lines:\n\n1\n\nNo CMAKE_C_COMPILER could be found.\n\nIf that’s the case, what you need to do is installing Visual Studio.\n\nVisual Studio (C++ 2010 Express)\n\nLet’s download Visual Studio (Visual C++ 2010 Express is ok for us)\n\nGo to the website:\n\nand find the Install Now link:\n\nInstall it executing the installation file (vc_web.exe) downloaded.\n\nThen try again!\n\nmysql-connector (1.1.4) – Build – Second Potential Problem (Missing Boost Libraries)\n\nIf we try again now:\n\nC:\\libs\\mysql-connector-c++-1.1.4>cmake -G “Visual Studio 10”\n\nThis time it should go further and complain about the (potential) next problem:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\nCMake Warning (dev) in CMakeLists.txt:\n\nSyntax Warning in cmake code at\n\nC:/libs/mysql-connector-c++-1.1.4/CMakeLists.txt:61:24\n\nArgument not separated from preceding token by whitespace.\n\nThis warning is for project developers. Use -Wno-dev to suppress it.\n\nCMake Warning (dev) in CMakeLists.txt:\n\nSyntax Warning in cmake code at\n\nC:/libs/mysql-connector-c++-1.1.4/CMakeLists.txt:61:43\n\nArgument not separated from preceding token by whitespace.\n\nThis warning is for project developers. Use -Wno-dev to suppress it.\n\n-- The C compiler identification is MSVC 16.0.30319.1\n\n-- The CXX compiler identification is MSVC 16.0.30319.1\n\n-- Check for working C compiler using: Visual Studio 10 2010\n\n-- Check for working C compiler using: Visual Studio 10 2010 -- works\n\n-- Detecting C compiler ABI info\n\n-- Detecting C compiler ABI info - done\n\n-- Check for working CXX compiler using: Visual Studio 10 2010\n\n-- Check for working CXX compiler using: Visual Studio 10 2010 -- works\n\n-- Detecting CXX compiler ABI info\n\n-- Detecting CXX compiler ABI info - done\n\n-- Environment compile flags:\n\n-- Environment link flags:\n\n-- Could NOT find Boost\n\n-- Could NOT find Boost\n\nCMake Error at CMakeLists.txt:141 (MESSAGE):\n\nBoost or some of its libraries found. If not in standard place please set\n\n-DBOOST_ROOT:STRING=\n\n-- Configuring incomplete, errors occurred!\n\nSee also \"C:/libs/mysql-connector-c++-1.1.4/CMakeFiles/CMakeOutput.log\".\n\nSee also \"C:/libs/mysql-connector-c++-1.1.4/CMakeFiles/CMakeError.log\".\n\nThe main issue is now:\n\n1\n\n-- Could NOT find Boost\n\nThe problem now is that in order to build this code you need to have installed the BOOST libraries.\n\nIf that’s the problem you see as well, then you can happily jump to the next sub-post where is explained in detail how to install and configure boost libraries: Boost Libraries Installation\n\nSee you when you are ready to proceed!\n\nBack from Boost Libraries Installation\n\nYou should now have a system with CMake, Visual Studio and Boost Libraries installed and configured. Time to continue!\n\nmysql-connector (1.1.4) – Build – Third Potential Problem (MySQL not installed)\n\nGo back into the connector folder and execute again:\n\nC:\\libs\\mysql-connector-c++-1.1.4>cmake -G “Visual Studio 10”\n\nNOTE:\n\nIf you decided at any point to move the folder after executing cmake the first time you will potentially see an error:\n\n1\n\n2\n\nCMake Error: The current CMakeCache.txt directory C:/libs/mysql-connector-c++-1.1.4/CMakeCache.txt is different than the directory c:/mysqlc++/mysql-connector-c++-1.1.4 where CMakeCache.txt was created. This may result in binaries being created in the wrong place. If you are not sure, reedit the CMakeCache.txt\n\nCMake Error: The source \"C:/libs/mysql-connector-c++-1.1.4/CMakeLists.txt\" does not match the source \"C:/mysqlc++/mysql-connector-c++-1.1.4/CMakeLists.txt\" used to generate cache. Re-run cmake with adifferent source directory.\n\nTo quickly fix this, just remove the file “CMakeCache.txt” and run cmake again.\n\nIf you don’t have MySQL installed on your system, then you will probably see this error:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\nCMake Warning (dev) in CMakeLists.txt:\n\nSyntax Warning in cmake code at\n\nC:/libs/mysql-connector-c++-1.1.4/CMakeLists.txt:61:24\n\nArgument not separated from preceding token by whitespace.\n\nThis warning is for project developers. Use -Wno-dev to suppress it.\n\nCMake Warning (dev) in CMakeLists.txt:\n\nSyntax Warning in cmake code at\n\nC:/libs/mysql-connector-c++-1.1.4/CMakeLists.txt:61:43\n\nArgument not separated from preceding token by whitespace.\n\nThis warning is for project developers. Use -Wno-dev to suppress it.\n\n-- The C compiler identification is MSVC 16.0.30319.1\n\n-- The CXX compiler identification is MSVC 16.0.30319.1\n\n-- Check for working C compiler using: Visual Studio 10 2010\n\n-- Check for working C compiler using: Visual Studio 10 2010 -- works\n\n-- Detecting C compiler ABI info\n\n-- Detecting C compiler ABI info - done\n\n-- Check for working CXX compiler using: Visual Studio 10 2010\n\n-- Check for working CXX compiler using: Visual Studio 10 2010 -- works\n\n-- Detecting CXX compiler ABI info\n\n-- Detecting CXX compiler ABI info - done\n\n-- Environment compile flags:\n\n-- Environment link flags:\n\n-- Boost version: 1.56.0\n\n-- BOOST_INCLUDE_DIRS=C:/Boost/include/boost-1_56\n\n-- ENV{MYSQL_DIR} =\n\nCMake Error at FindMySQL.cmake:327 (MESSAGE):\n\nCannot find MySQL. Include dir: MYSQL_INCLUDE_DIR-NOTFOUND library dir:\n\ncxxflags:\n\nCall Stack (most recent call first):\n\nCMakeLists.txt:201 (INCLUDE)\n\n-- Configuring incomplete, errors occurred!\n\nSee also \"C:/libs/mysql-connector-c++-1.1.4/CMakeFiles/CMakeOutput.log\".\n\nThe main indicator for this problem is the line:\n\n1\n\n-- ENV{MYSQL_DIR} =\n\nIf that’s what you see as well… well, you know what’s coming. Yep, another sub-post: MySQL Service, Workspace, Users and Tables\n\nJump to this post and you can read for now just the initial part that covers the download and installation of MySQL.\n\nThe rest of that post will show how to create a database, user and table that we will here, but you can go back to that section later on.\n\nBack from MySQL installation\n\nIf everything went as planned until this point you should have CMake, Boost libraries,Visual Studio and MySQL installed and ready to rock.\n\nmysql-connector (1.1.4) – Build – Creating the Visual Studio Solution\n\nNow we can go back into our connector folder and try once again to recreate our Visual Studio Solution.\n\nYhou can follow this step in the CMake tutorial if you want (where it is explained how to obtain the same result using the command line or the GUI).\n\nThis is an extract of it, where I will show only the command line option.\n\nIf you run the same command again:\n\nC:\\libs\\mysql-connector-c++-1.1.4>cmake -G “Visual Studio 10”\n\nYou should finally succeed in this step, obtaining:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\nCMake Warning (dev) in CMakeLists.txt:\n\nSyntax Warning in cmake code at\n\nC:/libs/mysql-connector-c++-1.1.4/CMakeLists.txt:61:24\n\nArgument not separated from preceding token by whitespace.\n\nThis warning is for project developers. Use -Wno-dev to suppress it.\n\nCMake Warning (dev) in CMakeLists.txt:\n\nSyntax Warning in cmake code at\n\nC:/libs/mysql-connector-c++-1.1.4/CMakeLists.txt:61:43\n\nArgument not separated from preceding token by whitespace.\n\nThis warning is for project developers. Use -Wno-dev to suppress it.\n\n-- Environment compile flags:\n\n-- Environment link flags:\n\n-- Boost version: 1.56.0\n\n-- BOOST_INCLUDE_DIRS=C:/Boost/include/boost-1_56\n\n-- ENV{MYSQL_DIR} =\n\n-- MySQL Include dir: C:/Program Files/MySQL/MySQL Connector C 6.1.5/include\n\n-- MySQL Library : C:/Program Files/MySQL/MySQL Server 5.6/lib/mysqlclient.lib\n\n-- MySQL Library dir: C:/Program Files/MySQL/MySQL Server 5.6/lib\n\n-- MySQL CXXFLAGS:\n\n-- MySQL Link flags:\n\n-- MySQL Include dir: C:/Program Files/MySQL/MySQL Connector C 6.1.5/include\n\n-- MySQL Library dir: C:/Program Files/MySQL/MySQL Server 5.6/lib\n\n-- MySQL CXXFLAGS:\n\n-- MySQL Link flags:\n\n-- Installation path is: C:/Program Files/MySQL/ConnectorCPP (overwrite with -DCMAKE_INSTALL_PREFIX=/your/path)\n\n-- Looking for include file stdint.h\n\n-- Looking for include file stdint.h - found\n\n-- Looking for include file inttypes.h\n\n-- Looking for include file inttypes.h - not found\n\n-- Looking for sys/types.h\n\n-- Looking for sys/types.h - found\n\n-- Looking for stddef.h\n\n-- Looking for stddef.h - found\n\n-- Check size of int8_t\n\n-- Check size of int8_t - done\n\n-- Check size of uint8_t\n\n-- Check size of uint8_t - done\n\n-- Check size of int16_t\n\n-- Check size of int16_t - done\n\n-- Check size of uint16_t\n\n-- Check size of uint16_t - done\n\n-- Check size of int32_t\n\n-- Check size of int32_t - done\n\n-- Check size of uint32_t\n\n-- Check size of uint32_t - done\n\n-- Check size of int64_t\n\n-- Check size of int64_t - done\n\n-- Check size of uint64_t\n\n-- Check size of uint64_t - done\n\n-- Check size of __int8\n\n-- Check size of __int8 - done\n\n-- Check size of unsigned __int8\n\n-- Check size of unsigned __int8 - done\n\n-- Check size of __int16\n\n-- Check size of __int16 - done\n\n-- Check size of unsigned __int16\n\n-- Check size of unsigned __int16 - done\n\n-- Check size of __int32\n\n-- Check size of __int32 - done\n\n-- Check size of unsigned __int32\n\n-- Check size of unsigned __int32 - done\n\n-- Check size of __int64\n\n-- Check size of __int64 - done\n\n-- Check size of unsigned __int64\n\n-- Check size of unsigned __int64 - done\n\n-- Looking for strtold\n\n-- Looking for strtold - not found\n\n-- Looking for strtol\n\n-- Looking for strtol - found\n\n-- Looking for strtoll\n\n-- Looking for strtoll - not found\n\n-- Looking for strtoul\n\n-- Looking for strtoul - found\n\n-- Looking for strtoull\n\n-- Looking for strtoull - not found\n\n-- Looking for strtoimax\n\n-- Looking for strtoimax - not found\n\n-- Looking for strtoumax\n\n-- Looking for strtoumax - not found\n\n-- BOOST_INCLUDE_DIRS=C:/Boost/include/boost-1_56\n\n-- Using static libmysql binding\n\n-- DT_RPATH will not be set\n\n-- Configuring driver\n\n-- MySQL dynamic load test library: C:/Program Files/MySQL/MySQL Server 5.6/lib/libmysql.dll\n\n-- Configuring examples\n\n-- Configuring test cases\n\n-- Configuring tests framework lib\n\n-- Configuring C/J junit tests port\n\n-- MySQL dynamic load test library: C:/Program Files/MySQL/MySQL Server 5.6/lib/libmysql.dll\n\n-- Configuring unit tests\n\n-- Configuring unit tests - examples\n\n-- Configuring unit tests - connection\n\n-- Configuring unit tests - databasemetadata\n\n-- Configuring unit tests - resultsetmetadata\n\n-- Configuring unit tests - resultset\n\n-- Configuring unit tests - savepoint\n\n-- Configuring unit tests - preparedstatement\n\n-- Configuring unit tests - parametermetadata\n\n-- Configuring unit tests - art_resultset\n\n-- Configuring unit tests - statement\n\n-- Configuring unit tests - uri\n\n-- Configuring performance test - statement\n\n-- Configuring bugs test cases - unsorted\n\n-- Configuring unit tests - group template_bug\n\n-- Configuring done\n\nCMake Warning (dev) in driver/CMakeLists.txt:\n\nPolicy CMP0022 is not set: INTERFACE_LINK_LIBRARIES defines the link\n\ninterface. Run \"cmake --help-policy CMP0022\" for policy details. Use the\n\ncmake_policy command to set the policy and suppress this warning.\n\nTarget \"mysqlcppconn\" has an INTERFACE_LINK_LIBRARIES property which\n\ndiffers from its LINK_INTERFACE_LIBRARIES properties.\n\nINTERFACE_LINK_LIBRARIES:\n\nmysqlclient;ws2_32\n\nLINK_INTERFACE_LIBRARIES:\n\nThis warning is for project developers. Use -Wno-dev to suppress it.\n\n-- Generating done\n\n-- Build files have been written to: C:/libs/mysql-connector-c++-1.1.4\n\nNow, if everything went as planned, you should be able to see a solution file (and other files as well) into your connector’s folder:\n\nNow we can finally open the created solution (MYSQLCPPCONN.sln) with Visual Studio!\n\nSimply double-click on:\n\nMYSQLCPPCONN.sln\n\nBuild MySqlCppConn.sln – Debug\n\nIn Visual studio, set the configuration to DEBUG and try to Build.\n\nWhat should happen is that you will see a series of errors:\n\nERRORS:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\nmysqlclient.lib(net_serv.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(plugin_client.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(client_authentication.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(my_default.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(ssl.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(yassl_int.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(handshake_client.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(my_aes_yassl.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(crypto_wrapper.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(yassl_imp.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(handshake.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(cert_wrapper.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(asn.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(my_rnd.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(crypt_genhash_impl.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(my_sha1.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(integer.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(handshake.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(common.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(log_client.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(my_aes.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(dsa.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(dh.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(rsa.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nmysqlclient.lib(algebra.obj) : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in mysql_art_resultset.obj\n\nOpen the properties for the project “mysqlcppconn“. Right-click on it and select “Properties”:\n\nWe can do this using different techniques, but I want to use one (even if it is not my preferred one) just for a change :).\n\nMake sure to be in the configuration “Debug” and go in the section:\n\nCommon Properties -> Linker -> Input\n\nOpen the “Additional Dependencies” drop-down list and click on “<Edit…>”:\n\nSubstitute the entry:\n\nC:\\Program Files\\MySQL\\MySQL Server 5.6\\lib\\mysqlclient.lib\n\nwith:\n\nC:\\Program Files\\MySQL\\MySQL Server 5.6\\lib\\debug\\mysqlclient.lib\n\nIf you build now you could receive another error:\n\n1\n\nLINK : fatal error LNK1181: cannot open input file 'C:/Program'\n\nOpen the project properties for the project “mysqlcppconn-static“\n\nGo in the section:\n\nCommon Properties -> Librarian -> Command Line\n\nand change the additional options from:\n\nC:/Program Files/MySQL/MySQL Server 5.6/lib/mysqlclient.lib\n\nto:\n\n“C:/Program Files/MySQL/MySQL Server 5.6/lib/debug/mysqlclient.lib”\n\nincluding the quotes\n\nBuild again and everything should be ok now!\n\n1\n\n========== Rebuild All: 34 succeeded, 0 failed, 2 skipped ==========\n\nBuild MySqlCppConn.sln – Release\n\nFor the release build the only fix I had to do was only the “Additional Options” section in the Librarian -> Command Line\n\nsection for the “mysqlcppconn-static” project (in Release configuration).\n\nAdd the quotes to:\n\nC:/Program Files/MySQL/MySQL Server 5.6/lib/mysqlclient.lib\n\nAlso in this case you should receive a successful compilation:\n\n1\n\n========== Build: 4 succeeded, 0 failed, 30 up-to-date, 2 skipped ==========\n\nLibraries\n\nIf you open now the window explorer in the connector folder, in the sub-folder “driver”:\n\nC:\\libs\\mysql-connector-c++-1.1.4\\driver\n\nyou should see the two build folders “Debug” and “Release”:\n\nInside these you should find at least the three files:\n\nmysqlcppconn.dll\n\nmysqlcppconn.lib\n\nmysqlcppconn-static.lib\n\nWe are ready to use it finally!\n\nCreating a DB\n\nIt is finally time to create a database in MySQL that we will use in C++.\n\nYou can refer back to the post already highlighted previously (MySQL installation and Usage) and continue to follow it from where you left it until the end.\n\nIn that tutorial I explain how to create a sample DB with a sample user that will have access rights and a sample table that we will be able access from code.\n\nWhen that system is ready, is time to jump into the final step!\n\nCoding – Create a new Visual Studio Solution\n\nIn Visual Studio create a new project (I selected a simple Win32 Console Application)\n\nRight click on the source folder and add a new cpp file:\n\nLet’s give it a simple name (the very original “main.cpp” :P):\n\nYou should see the new file added:\n\nBefore writing any code, let’s configure our environment setting up the folder and libraries that we need to use/reference in order to successfully build our app.\n\nCoding – Configure the Environment\n\nOpen the properties window of the project and go to the settings page:\n\nConfiguration Properties -> VC++ Directories\n\nAnd edit the entry:\n\nInclude Directories\n\nMake sure you are in the “All Configurations” configuration:\n\nEdit it adding the lines:\n\nC:\\libs\\mysql-connector-c++-1.1.4\\cppconn\n\nC:\\Boost\\include\\boost-1_56\n\nEdit then the Library Directories property, adding the line:\n\nC:\\libs\\mysql-connector-c++-1.1.4\\driver\\$(Configuration)\\\n\nEdit then the property in:\n\nConfiguration Properties -> Linker -> Input -> Additional Dependencies\n\nadding the line:\n\nmysqlcppconn.lib\n\nOne last step you may need to do is copying the “libmysql.dll” and “copy “mysqlcppconn.lib” into your output folder.\n\nJust open the properties to:\n\nConfiguration Properties -> Build Events -> Post-Build Event\n\nThen edit “Command Line” and type in this (or the equivalent line that you need in order to copy the missing dll to the output folder):\n\ncopy “C:\\Program Files\\MySQL\\MySQL Connector C 6.1.5\\lib\\libmysql.dll” “$(OutDir)”\n\ncopy “C:\\libs\\mysql-connector-c++-1.1.4\\driver\\$(Configuration)\\mysqlcppconn.dll” “$(OutDir)”\n\nRemember to edit All Configurations:\n\nFinally it’s time to code!\n\nCoding – Code: Connecting to MySQL\n\nOpen the “main.cpp” and let’s put some code.\n\nThe first simple code will just test the library, connecting to the DB (our one) using the user that we previously set-up in MySQL Workbench.\n\nRemember to configure correctly:\n\nThe database address (and port)\n\nThe User and Password for your user\n\nThe Database name (that contains the “contacts” table)\n\nThat’s the simplest code with some error handling:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n// MySQL Connector/C++ specific headers\n\n#include <driver.h>\n\n#include <exception.h>\n\n#define DBHOST \"tcp://127.0.0.1:3307\"\n\n#define USER \"cppuser\"\n\n#define PASSWORD \"cpppassword\"\n\n#define DATABASE \"cpptest\"\n\nusingnamespacesql;\n\nvoidmain()\n\n{\n\nDriver*driver;\n\nConnection*con;\n\ndriver=get_driver_instance();\n\ntry\n\n{\n\n// create a database connection\n\ncon=driver->connect(DBHOST,USER,PASSWORD);\n\n}\n\ncatch(sql::SQLExceptione)\n\n{\n\nprintf(\"Error connecting to the DB!\\n\");\n\nexit(1);\n\n}\n\nprintf(\"Connection to the DBHOST established!\\n\");\n\n// clean up\n\ncon->close();\n\ndelete con;\n\n}\n\nIf your run this code and you didn’t set-up correctly one of the used parameters, then you will see the error text (without crashing). If that’s the case, check your parameters and verify that you will see the “Connection to the DB established!” string.\n\nCoding – Code: Connecting and using the DB\n\nFor the final part of this post we are going to see how to connect now to our DB and retrieve and print the data from our table!\n\nThe new lines are the ones that follow the connection established message and few extra includes.\n\nI will omit any exception handling to keep the code short and simple.\n\nThis is the final code:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n// MySQL Connector/C++ specific headers\n\n#include <driver.h>\n\n#include <connection.h>\n\n#include <exception.h>\n\n#include <statement.h>\n\n#include <resultset.h>\n\n#define DBHOST \"tcp://127.0.0.1:3307\"\n\n#define USER \"cppuser\"\n\n#define PASSWORD \"cpppassword\"\n\n#define DATABASE \"cpptest\"\n\nusingnamespacesql;\n\nvoidmain()\n\n{\n\nDriver*driver;\n\nConnection*con;\n\nStatement*stmt;\n\nResultSet*res;\n\ndriver=get_driver_instance();\n\ntry\n\n{\n\n// create a database connection\n\ncon=driver->connect(DBHOST,USER,PASSWORD);\n\n}\n\ncatch(sql::SQLExceptione)\n\n{\n\nprintf(\"Error connecting to the DB!\\n\");\n\nexit(1);\n\n}\n\nprintf(\"Connection to the DBHOST established!\\n\");\n\n// select appropriate database schema\n\ncon->setSchema(DATABASE);\n\n// create a statement object\n\nstmt=con->createStatement();\n\n// run a query which returns exactly one result set\n\nres=stmt->executeQuery(\"SELECT * FROM contacts\");\n\n// Print some informations about the table\n\nprintf(\"Retrieved %d rows\\n\",res->rowsCount());\n\n// retrieve the data from the result set and display on stdout\n\nwhile(res->next())\n\n{\n\nSQLString name=res->getString(\"name\");\n\nSQLString surname=res->getString(\"surname\");\n\nprintf(\"Row %d: %s %s\\n\",res->getRow(),name.c_str(),surname.c_str());\n\n}\n\n// clean up\n\ncon->close();\n\ndelete con;\n\n}\n\nIf you build and run the code, you should be finally happily able to see the rows that we entered in our table using MySQL Workbench!\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\nConnection to the DBHOST established!\n\nRetrieved 8 rows\n\nRow 1: Riccardo Tramma\n\nRow 2: Leonardo da Vinci\n\nRow 3: Galileo Galilei\n\nRow 4: Alessandro Volta\n\nRow 5: Enrico Fermi\n\nRow 6: Guglielmo Marconi\n\nRow 7: Antonio Meucci\n\nRow 8: Amedeo Avogadro\n\nThat’s all!\n\nOf course you can now play around with it inserting, editing, removing entries. For these functionalities and more advanced one I point you to the official website and in particular to the Developer Zone:\n\nPlease Link and comment if you found this interesting or useful.\n\nYou may also like..."
    }
}