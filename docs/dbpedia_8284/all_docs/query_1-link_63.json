{
    "id": "dbpedia_8284_1",
    "rank": 63,
    "data": {
        "url": "https://pynative.com/python-mysql-database-connection/",
        "read_more_link": "",
        "language": "en",
        "title": "Python MySQL Database Connection using MySQL Connector",
        "top_image": "https://pynative.com/wp-content/uploads/2019/02/python_mysql_connection.png",
        "meta_img": "https://pynative.com/wp-content/uploads/2019/02/python_mysql_connection.png",
        "images": [
            "https://pynative.com/wp-content/uploads/2018/11/mysql_database_connection_in_python.png",
            "https://pynative.com/wp-content/uploads/2024/02/vishal_hule_gravatar.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Vishal"
        ],
        "publish_date": "2018-07-01T15:47:03+00:00",
        "summary": "",
        "meta_description": "Connect the MySQL database in Python using the MySQL Connector module. Python MySQL tutorials to execute database operation from Python",
        "meta_lang": "en",
        "meta_favicon": "https://pynative.com/wp-content/uploads/2018/06/cropped-favicon-32x32.png",
        "meta_site_name": "PYnative",
        "canonical_link": "https://pynative.com/python-mysql-database-connection/",
        "text": "In this lesson, you will learn how to connect the MySQL database in Python using the ‘MySQL Connector Python‘ module. This Python MySQL tutorial demonstrates how to develop and integrate Python applications with a MySQL database server.\n\nIn Python, We can use the following modules to communicate with MySQL.\n\nMySQL Connector Python\n\nPyMySQL\n\nMySQLDB\n\nMySqlClient\n\nOurSQL\n\nNote: Above all interfaces or modules are adhere to Python Database API Specification v2.0 (PEP 249) that means the syntax, method, and way of access the database is the same in all.\n\nPEP 249 is designed to encourage and maintain similarity between the Python modules that are used to access databases. By doing this, above all modules are following rules defined in Python Database API Specification v2.0 (PEP 249).\n\nYou can choose any of the above modules as per your requirements. The way of accessing the MySQL database remains the same. I recommend you to use any of the following two modules:-\n\nMySQL Connector Python\n\nPyMySQL\n\nNote: This tutorial focuses on the MySQL Connector Python module. All examples are created using MySQL Connector Python.\n\nAdvantages and benefits of MySQL Connector Python: –\n\nMySQL Connector Python is written in pure Python, and it is self-sufficient to execute database queries through Python.\n\nIt is an official Oracle-supported driver to work with MySQL and Python.\n\nIt is Python 3 compatible, actively maintained.\n\nHow to connect MySQL database in Python\n\nLet’s see how to connect the MySQL database in Python using the ‘MySQL Connector Python’ module.\n\nArguments required to connect\n\nYou need to know the following detail of the MySQL server to perform the connection from Python.\n\nRun the below query on the MySQL console if you have not created any database in MySQL. Otherwise, you can skip the below query.\n\nCreate Database in MySQL\n\nCreate database Electronics;Code language: Python (python)\n\nExample to connect to MySQL Database in Python\n\nOutput.\n\nConnected to MySQL Server version 5.7.19 You're connected to database: ('electronics',) MySQL connection is closed\n\nPoints to remember\n\nCatch exceptions that may occur during this process by importing the Error class from the MySQL connector module using a from mysql.connector import Error statement.\n\nError class is useful to debug when we failed to connect to MySQL. For example, ACCESS DENIED ERROR when the username or password is wrong.\n\nTheconnect() method can throw a Database error exception if one of the required parameters is wrong. For example, if you provide a database name that is not present in MySQL.\n\nThe is_connected() is the method of the MySQLConnection class through which we can verify is our Python application connected to MySQL.\n\nAt last, we are closing the MySQL database connection using a close() method of MySQLConnection class.\n\nCreate MySQL table from Python\n\nNow you know how to connect to a MySQL server from Python, In this section, we will learn how to create a table in MySQL from Python. Let’s create table ‘Laptop’ under the ‘Electronics’ database.\n\nOutput:\n\nLaptop Table created successfully MySQL connection is closed\n\nPython MySQL CRUD Operation\n\nAlso, learn how to execute various MySQL operations from Python by referring to the following articles.\n\nClick on each tutorial to study operations in detail.\n\nInsert rows into MySQL table from Python: Insert a single and multiple rows into the MySQL table. Also, learn how to use Python variables in the parameterized query to insert dynamic data into a table.\n\nSelect rows from MySQL table using Python: Execute a SQL SELECT query from a Python application to fetch rows from MySQL table. Also, learn how to process SELECT query results, Fetch all rows or single rows from the table, and count total rows of a table.\n\nUpdate rows of MySQL table from Python: Update a single row, multiple rows, a single column, and various columns. Additionally, learn how to use python variables in the parameterized query to update table data.\n\nDelete table rows from Python: Delete a single row, multiple rows, a single column, and various columns. Also, learn to Delete all Rows, Delete tables, and an entire database from MySQL using python.\n\nExecute MySQL stored procedures from Python and learn how to pass IN and OUT parameters to the MySQL stored procedure.\n\nPython MySQL Parameterized Query and Prepared Statement: Learn to use Parameterized Queries or Prepared Statement to use Python variables in the SQL query to pass dynamic data to MySQL table.\n\nPython MySQL Commit and Rollback to Manage Transactions: Manage MySQL database transactions from Python to maintain the ACID property of MySQL transactions using the commit() and rollback() methods.\n\nPython Database Connection Pooling With MySQL: Learn to create and use a connection pool to increase the performance of your Python MySQL applications.\n\nPython MySQL BLOB Insert and Retrieve digital data: Learn to insert or fetch any digital information such as a file, image, video, or song as blob data into MySQL table from Python.\n\nPython MySQL Connection arguments list\n\nWe already discussed the four mandatory arguments required to connect the MySQL Server.\n\nLet see what other connection arguments we can use to communicate with the MySQL server from Python. Below is the list of all other connection arguments and their meaning.\n\nport: The TCP/IP port of the MySQL server. This value must be an integer. We can specify the different port number if the MySQL server is listening to a different port. The default value for this port argument is 3306.\n\nuse_unicode: Specify whether to use Unicode or not. The default value is True.\n\ncharset: MySQL character set to use, character set variables relate to a client’s interaction with the server. There are almost 30 to 40 charset MySQL server supports. The default value of the charset argument is “utf8″.\n\nauto-commit: Set it to true if you want to auto-commit transactions. If you wish to manage transactions in MySQL from Python, you need to set this value true or false. The default value is False, i.e., the changes are not committed to the database. You need to explicitly call a commit method to persist your changes in the database.\n\nget_warnings: To fetch warning, this is helpful to know the connection is established but with warnings. The default value is False.\n\nraise_on_warnings: Set it when you want to raise an exception on warnings. The Default value is False.\n\nconnection_timeout (connect_timeout*) : Timeout for the TCP and Unix socket connections. The connection terminates after this timeout expired.\n\nbuffered: If true, the cursor objects fetch the results immediately after executing queries. The default value is False.\n\nraw: If true, MySQL results are returned as-is rather than converting into Python types. The default value is False. You can set it to true if you want a query result in MySQL type.\n\nforce_ipv6: When setting to True, uses IPv6 when an address resolves to both IPv4 and IPv6. By default, IPv4 is used in such cases. The default value for this argument is false.\n\npool_name: It is the Connection pool name that you are creating or using.\n\npool_size: Connection pool size that you want to create. The default value is 5.\n\npool_reset_session: Reset session variables when the connection is returned to the pool. The default is True.\n\nuse_pure: Specify whether to use pure Python or C Extension. If use_pure=False, then a pure Python module is used; otherwise, it connects MySQL using C extension. Moreover, if C Extension is not available, MySQL Connector Python automatically falls back to the pure Python implementation.\n\nunix_socket: The location of the Unix socket file. These enable communication between two processes.\n\nauth_plugin: Authentication plugin to use, Added in 1.2.1.\n\ncollation: MySQL collation to use. You can use the collation that you set while installing MySQL Server. The default value is utf8_generalW_chiich.\n\nsql_mode: Set the sql_mode session variable at connection time.\n\nUse the Dictionary to keep MySQL Connection arguments\n\nFurthermore, let see how to use a dictionary to store all of these connection arguments.\n\nIf you have lots of connection arguments, it’s best to keep them in a dictionary and use the ** operator. for example, you know you require a minimum of four arguments (i.e., username, password, hostname, database name) to connect MySQL.\n\nIf you have lots of connection arguments, it’s best to keep them in a dictionary and use the ** operator. In exceptional cases, we need more than four arguments in the connect method to connect the MySQL database. Let’s understand this. For example, below are three more connection arguments we can use in the connect() method.\n\nconnection_timeout – Timeout for the TCP and Unix socket connections\n\nauto_commit – Whether to auto-commit transactions. The default is false\n\npool_size – Connection pool size if you want to use connection pooling.\n\nYou can use many other connection arguments as per your need, add them all in a dictionary, and pass a dictionary to connect() method. Let’s demonstrate it in the below example.\n\nChange MySQL Connection Timeout from Python\n\nSometimes we need to change the connection timeout value if we read or insert extensive data to the MySQL server. Connection terminates if the request takes more time than this value.\n\nUse a connection_timeout argument of MySQL connector Python to manage the timeout issues by increasing the timeout value.\n\nThe connection_timeout is the timeout value in second for the TCP and Unix socket connections. This time denotes the number of seconds the MySQL server waits to fulfill the current request.\n\nYou can also set the following Parameters of the MySQL server by executing SQL query from Python to handle the connection timeout issue. Change the following parameters’ value only when the connection_timeout argument alone can’t control the timeout issue.\n\ninteractive_timeout: The number of seconds the server should wait for activity on an interactive connection before closing it.\n\nwait_timeout – Number of seconds the server should wait for activity on a connection before closing it.\n\nExample\n\nAs you can see, I have set all connection timeout values to 180 seconds, i.e., 3 min in the above program.\n\nConnect to MySQL Using Connector Python C Extension\n\nPython connector module has a C Extension interface to connect the MySQL database. The use_pure connection argument determines whether to connect to MySQL using a pure Python interface or a C Extension.\n\nThe default value of use_pure is False means it uses the pure Python implementation to connect that we already discussed. The below example demonstrates how to connect using a C extension.\n\nNext Steps:\n\nTo practice what you learned in this article, Please solve a Python Database Exercise project to Practice and master the Python Database operations.\n\nI have created a Hospital Information System exercise using Python and MySQL. This Exercise has six questions. I have provided the required tables so you can proceed directly to solve the problems of this Exercise.\n\nThat’s it, Folks. Let me know your comments in the section below."
    }
}