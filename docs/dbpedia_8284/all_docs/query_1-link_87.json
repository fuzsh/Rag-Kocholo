{
    "id": "dbpedia_8284_1",
    "rank": 87,
    "data": {
        "url": "https://duckdb.org/docs/extensions/mysql.html",
        "read_more_link": "",
        "language": "en",
        "title": "MySQL Extension",
        "top_image": "https://duckdb.org/images/sharingduckdb.jpg",
        "meta_img": "https://duckdb.org/images/sharingduckdb.jpg",
        "images": [
            "https://duckdb.org/images/logo-dl/DuckDB_Logo-horizontal.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "GitHub User"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "The mysql extension allows DuckDB to directly read and write data from/to a running MySQL instance. The data can be queried directly from the underlying MySQL database. Data can be loaded from MySQL tables into DuckDB tables, or vice versa. Installing and Loading To install the mysql extension, run: INSTALL mysql; The extension is loaded automatically upon first use. If you prefer to load it manually, run: LOAD mysql; Reading Data from MySQL To make a MySQL database accessible to DuckDB use the ATTACH command with the MYSQL or the MYSQL_SCANNER type: ATTACH 'host=localhost user=root port=0 database=mysql' AS mysqldb (TYPE…",
        "meta_lang": "en",
        "meta_favicon": "/images/favicon/apple-touch-icon.png",
        "meta_site_name": "DuckDB",
        "canonical_link": "https://duckdb.org/docs/extensions/mysql.html",
        "text": "The mysql extension allows DuckDB to directly read and write data from/to a running MySQL instance. The data can be queried directly from the underlying MySQL database. Data can be loaded from MySQL tables into DuckDB tables, or vice versa.\n\nInstalling and Loading\n\nTo install the mysql extension, run:\n\nThe extension is loaded automatically upon first use. If you prefer to load it manually, run:\n\nReading Data from MySQL\n\nTo make a MySQL database accessible to DuckDB use the ATTACH command with the MYSQL or the MYSQL_SCANNER type:\n\nConfiguration\n\nThe connection string determines the parameters for how to connect to MySQL as a set of key=value pairs. Any options not provided are replaced by their default values, as per the table below. Connection information can also be specified with environment variables. If no option is provided explicitly, the MySQL extension tries to read it from an environment variable.\n\nSetting Default Environment variable database NULL MYSQL_DATABASE host localhost MYSQL_HOST password MYSQL_PWD port 0 MYSQL_TCP_PORT socket NULL MYSQL_UNIX_PORT user ⟨current user⟩ MYSQL_USER\n\nReading MySQL Tables\n\nThe tables in the MySQL database can be read as if they were normal DuckDB tables, but the underlying data is read directly from MySQL at query time.\n\nname signed_integers\n\nt s m i b -128 -32768 -8388608 -2147483648 -9223372036854775808 127 32767 8388607 2147483647 9223372036854775807 NULL NULL NULL NULL NULL\n\nIt might be desirable to create a copy of the MySQL databases in DuckDB to prevent the system from re-reading the tables from MySQL continuously, particularly for large tables.\n\nData can be copied over from MySQL to DuckDB using standard SQL, for example:\n\nWriting Data to MySQL\n\nIn addition to reading data from MySQL, create tables, ingest data into MySQL and make other modifications to a MySQL database using standard SQL queries.\n\nThis allows you to use DuckDB to, for example, export data that is stored in a MySQL database to Parquet, or read data from a Parquet file into MySQL.\n\nBelow is a brief example of how to create a new table in MySQL and load data into it.\n\nMany operations on MySQL tables are supported. All these operations directly modify the MySQL database, and the result of subsequent operations can then be read using MySQL. Note that if modifications are not desired, ATTACH can be run with the READ_ONLY property which prevents making modifications to the underlying database. For example:\n\nSupported Operations\n\nBelow is a list of supported operations.\n\nCREATE TABLE\n\nINSERT INTO\n\nSELECT\n\nid name 42 DuckDB\n\nCOPY\n\nYou may also create a full copy of the database using the COPY FROM DATABASE statement:\n\nDELETE\n\nALTER TABLE\n\nDROP TABLE\n\nCREATE VIEW\n\nCREATE SCHEMA and DROP SCHEMA\n\ni 42\n\nTransactions\n\nThis returns:\n\ni 42\n\nThis returns an empty table.\n\nThe DDL statements are not transactional in MySQL.\n\nRunning SQL Queries in MySQL\n\nThe mysql_query Table Function\n\nThe mysql_query table function allows you to run arbitrary read queries within an attached database. mysql_query takes the name of the attached MySQL database to execute the query in, as well as the SQL query to execute. The result of the query is returned. Single-quote strings are escaped by repeating the single quote twice.\n\nFor example:\n\nWarning This function is only available on DuckDB v0.10.1+, using the latest MySQL extension. To upgrade your extension, run FORCE INSTALL mysql;.\n\nThe mysql_execute Function\n\nThe mysql_execute function allows running arbitrary queries within MySQL, including statements that update the schema and content of the database.\n\nWarning This function is only available on DuckDB v0.10.1+, using the latest MySQL extension. To upgrade your extension, run FORCE INSTALL mysql;.\n\nSettings\n\nName Description Default mysql_bit1_as_boolean Whether or not to convert BIT(1) columns to BOOLEAN true mysql_debug_show_queries DEBUG SETTING: print all queries sent to MySQL to stdout false mysql_experimental_filter_pushdown Whether or not to use filter pushdown (currently experimental) false mysql_tinyint1_as_boolean Whether or not to convert TINYINT(1) columns to BOOLEAN true\n\nSchema Cache"
    }
}