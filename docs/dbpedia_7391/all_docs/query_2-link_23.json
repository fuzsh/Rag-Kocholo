{
    "id": "dbpedia_7391_2",
    "rank": 23,
    "data": {
        "url": "https://community.wolfram.com/groups/-/m/t/1381748",
        "read_more_link": "",
        "language": "en",
        "title": "Online Technical Discussion Groupsâ€”Wolfram Community",
        "top_image": "http://community.wolfram.com/share.png",
        "meta_img": "http://community.wolfram.com/share.png",
        "images": [
            "https://community.wolfram.com/community-theme/images/community-header-new.png",
            "https://community.wolfram.com/community-theme/images/spacer.png",
            "https://community.wolfram.com/community-theme/images/common/checked.png",
            "https://community.wolfram.com/community-theme/images/common/checked.png",
            "https://community.wolfram.com/community-theme/images/community-header-new.png",
            "https://community.wolfram.com/community-theme/images/search-icon.png",
            "https://community.wolfram.com/image/user_male_portrait?img_id=1372849&t=1724984659643",
            "http://community.wolfram.com//c/portal/getImageAttachment?filename=keys.png&userId=1371942",
            "http://community.wolfram.com//c/portal/getImageAttachment?filename=encrypt.png&userId=1371942",
            "http://community.wolfram.com//c/portal/getImageAttachment?filename=decrypt.png&userId=1371942",
            "http://community.wolfram.com//c/portal/getImageAttachment?filename=simulator.png&userId=1371942",
            "https://community.wolfram.com/community-theme/images/attachment-paperclip.png",
            "https://community.wolfram.com/image/user_male_portrait?img_id=1372536&t=1724984659745",
            "https://community.wolfram.com/group-abstract-portlet/icon.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            "computer science",
            "data science",
            "mathematics",
            "interface construction",
            "wolfram language",
            "wolfram cloud",
            "wolfram summer camp",
            "cryptography"
        ],
        "tags": null,
        "authors": [
            "Tanay Reddy",
            "Brian Zhang"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Wolfram Community forum discussion about [WSC18] An Implementation of the Merkle-Hellman Knapsack Cryptosystem. Stay on top of important topics and build connections by joining Wolfram Community groups relevant to your interests.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://community.wolfram.com/groups/-/m/t/1381748",
        "text": "Introduction\n\nThe search for an effective cryptosystem has always been a prevalent question, given the value of privacy in our world today. Given this issue, many solutions have been created, to varying degrees of success. One of the earliest such asymmetric cryptosystems is the Merkle-Hellman knapsack algorithm, initially created by Ralph Merkle and Martin Hellman in 1978. Although this has in fact been broken only 6 years after its conception, it regardless serves as a crucial component of the history of cryptography.\n\nKey Generation\n\nThe public and private keys of the Merkle-Hellman knapsack algorithm are created using three main values: w, q, and r.\n\nsetW[] := Module[{list = {}}, For[i = 0, i < 8, i++, AppendTo[list, Total[list] + RandomInteger[99] + 1]]; list ] setQ[w_] := RandomInteger[{Total[w] + 2, 20000}] setR[q_] := RandomChoice[Pick[Range[q], CoprimeQ[q, Range[q]] ]]\n\nw is set to be a super increasing sequence of length 8: it has one element for each of the 8 bits in the binary encoding of a character. In the algorithm used above to create w, each element is greater than the sum of all the previous elements, with a difference of a random integer between 1 and 99. This allows for the quick creation of w, while also fulfilling the variable's necessary conditions.\n\nq is set to be a random prime greater than the total of the elements of w. The number 20,000 as the ceiling of q has been chosen to balance between randomness and runtime.\n\nr is set to be a random number less than q that is also relatively prime to q. It is chosen as a random element of set of numbers that adhere to the non-random conditions of r.\n\nWith these values selected, the public and private keys can be produced.\n\nMHMakeKeys[] := Module[{w = setW[], q, r}, {q = setQ[w]; r = setR[q]; listToHex[Mod[r w, q]], listToHex[{w, q, r}]} ]\n\nTo make the public key, r is multiplied by every element of w. Every element is then simplified modulo q, and the resulting list is the public key. To adhere to cryptography standards, this list is lastly converted to hex.\n\nThe private key, on the other hand, is simply w, q, and r placed into a list. This list is then converted to hex, for the same reason as the public key.\n\nEncryption\n\nTo encrypt a message using the Merkle-Hellman knapsack algorithm, only the public key is needed.\n\nMHEncrypt[message_String, public_String] := listToHex[Table[Total[cur hexToList[public]], {cur, toBinary[message]}]]\n\nFirst, the public key is converted back to a list. For every character within the provided message, the following process is done:\n\nThe character is converted to an 8-bit binary list.\n\nThis list is then multiplied by the public key. Specifically, the first elements of each list are multiplied, the second elements of each list are multiplied, etc. This works because both the public key and binary character list are 8 bits in length.\n\nThe elements of the resulting list are then added together.\n\nThis means that each character in the message is ultimately converted into a number, and by extension, the message is converted into a list of numbers. This list of numbers is then converted to hex, yielding the ciphertext.\n\nDecryption\n\nTo decrypt a message, on the other hand, the private key is required.\n\nknapsack[private[[1]], Mod[cipher ModularInverse[private[[3]], private[[2]]], private[[2]]] MHDecrypt[cipher_String, private_String] := StringJoin[Table[FromCharacterCode[FromDigits[decrypt[cur, privateToList[private]], 2]], {cur, hexToList[cipher]} ]]\n\nThe ciphertext is first converted from hex back to a list of numbers, and the following process is applied to and reverses the encryption on each character of the original message.\n\nThe number is multiplied by the modular inverse of r modulo q to yield a number s (Note: s is implicit, rather than explicitly included in the above code).\n\nThe knapsack problem is computed on s and w. This yields a subset of w in which the sum of its elements is s.\n\nFor every element of w, it is checked whether that element is in the previously computed subset. If it is, a 1 is returned, otherwise, a 0 is returned. Since w is of length 8, an 8-bit binary number is ultimately produced.\n\nThis binary number can afterwards be simply converted into a character.\n\nEmail / Web Support\n\nIn order to simplify the usage of this project for others, I have created a collection of web pages for a friendly user experience.\n\nCloudDeploy[FormPage[{}, Column[MHKeyDisplay[]] &, PageTheme -> \"Red\", AppearanceRules -> <|\"SubmitLabel\" -> \"Generate New Keys\", \"Title\" -> \"Merkel Hellman Key Generation\", \"Description\" -> \"An implementation of the generation of public and private keys \\ in the Merkel Hellman knapsack cryptosystem.\"|>], \"MHMakeKeys\", Permissions -> \"Public\"];\n\nThis website allows for the creation of both a public and corresponding private key through only a single button press.\n\nCloudDeploy[ FormPage[{\"email\" -> \"String\", \"message\" -> \"String\", \"public\" -> \"String\"}, SendEncrypted[#email, #message, #public] &, PageTheme -> \"Red\", AppearanceRules -> <|\"Title\" -> \"Merkel Hellman Encryption\", \"Description\" -> \"An implementation of encryption in the Merkel Hellman knapsack \\ cryptosystem.\"|>], \"MHEncryption\", Permissions -> \"Public\"];\n\nThis website takes an email address, a message, and a public key, and sends an email to the given address with the encrypted version of the message. (See below: SendEncrypted)\n\nCloudDeploy[ FormPage[{\"cipher\" -> \"String\", \"private\" -> \"String\"}, MHDecrypt[#cipher, #private] &, PageTheme -> \"Red\", AppearanceRules -> <|\"Title\" -> \"Merkel Hellman Decryption\", \"Description\" -> \"An implementation of decryption in the Merkel Hellman knapsack \\ cryptosystem.\"|>], \"MHDecryption\", Permissions -> \"Public\"];\n\nThis website takes an encrypted message and its corresponding private key as inputs, returning the original message.\n\nCloudDeploy[ FormPage[{\"function\" -> {\"Generate Keys\", \"Encrypt\", \"Decrypt\"}}, If[#function == \"Encrypt\", Hyperlink[\"Encrypt (click here)\", \"https://www.wolframcloud.com/objects/tanaykreddy/MHEncryption\"], If[#function == \"Decrypt\", Hyperlink[\"Decrypt (click here)\", \"https://www.wolframcloud.com/objects/tanaykreddy/MHDecryption\"]\\ , Hyperlink[\"Generate Keys (click here)\", \"https://www.wolframcloud.com/objects/tanaykreddy/MHMakeKeys\"]]]\\ &, PageTheme -> \"Red\", AppearanceRules -> <|\"Title\" -> \"Merkel Hellman Simulator\", \"Description\" -> \"An implementation of the Merkel Hellman knapsack cryptosystem.\"|>], \"MHSimulator\", Permissions -> \"Public\"]\n\nLastly, this website links the key generation, encryption, and decryption websites together by providing links for each one of them.\n\nAs an application for this cipher, I also created a function which sends an encrypted message to another individual via email.\n\nSendEncrypted[email_String, message_String, public_String] := With[{}, SendMail[\"To\" -> email, \"Subject\" -> \"Encrypted Message\", \"Body\" -> {Hyperlink[ \"https://www.wolframcloud.com/objects/tanaykreddy/MHDecryption\"], \"\\n\", ToString[MHEncrypt[message, public]]}]; \"Message encrypted and sent!\" ]\n\nThis function sends an email to a specified user which includes not only the encrypted version of a message, but also a link to the website where the ciphertext can be decrypted. As aforementioned, this function is moreover included in the encryption website.\n\nFinal Product\n\nAnd the fruits of my labor are below, embedded into the following website:\n\nMerkle Hellman Simulator\n\nTry it Yourself!\n\nGo to the Decryption Microsite and try decrypting the following cipher:\n\n000025c70000052f00003fc90000269a00003ed900003ae900004c8900002af6000057300000052f00003a7d0000434d00002af60000672300005c7c0000052f000051690000705f000043b90000052f00003a7d0000705f0000052f0000606c000051690000052f0000606c00003ed90000672300003a7d0000705f0000368d00003aa50000052f0000306e00002af60000368d00004c8900004c8900002af60000052f0000216b0000705f0000368d00003ed900003ae90000434d0000672300002af600000e6b\n\nand its corresponding private key:\n\n000000230000002b0000008b000000f6000001ed000003d3000007a500000f3a000027d6000017d3"
    }
}