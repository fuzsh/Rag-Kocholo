{
    "id": "dbpedia_7391_2",
    "rank": 94,
    "data": {
        "url": "https://skerritt.blog/diffie-hellman-merkle/",
        "read_more_link": "",
        "language": "en",
        "title": "How to Share a Secret (Diffie-Hellman-Merkle)",
        "top_image": "https://images.unsplash.com/photo-1671780208057-50b5c72cd7b8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8YWxsfDI0fHx8fHx8Mnx8MTY3MTg3NjIwNQ&ixlib=rb-4.0.3&q=80&w=2000",
        "meta_img": "https://images.unsplash.com/photo-1671780208057-50b5c72cd7b8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8YWxsfDI0fHx8fHx8Mnx8MTY3MTg3NjIwNQ&ixlib=rb-4.0.3&q=80&w=2000",
        "images": [
            "https://neverhaveiever.skerritt.blog/noscript.gif",
            "https://skerritt.blog/content/images/size/w100/2023/02/me.jpeg",
            "https://images.unsplash.com/photo-1671780208057-50b5c72cd7b8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8YWxsfDI0fHx8fHx8Mnx8MTY3MTg3NjIwNQ&ixlib=rb-4.0.3&q=80&w=300 300w,                            https://images.unsplash.com/photo-1671780208057-50b5c72cd7b8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8YWxsfDI0fHx8fHx8Mnx8MTY3MTg3NjIwNQ&ixlib=rb-4.0.3&q=80&w=600 600w,                            https://images.unsplash.com/photo-1671780208057-50b5c72cd7b8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8YWxsfDI0fHx8fHx8Mnx8MTY3MTg3NjIwNQ&ixlib=rb-4.0.3&q=80&w=1000 1000w,                            https://images.unsplash.com/photo-1671780208057-50b5c72cd7b8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8YWxsfDI0fHx8fHx8Mnx8MTY3MTg3NjIwNQ&ixlib=rb-4.0.3&q=80&w=2000 2000w",
            "https://skerritt.blog/content/images/2023/06/image-51.png",
            "https://skerritt.blog/content/images/2023/06/image-52.png",
            "https://skerritt.blog/content/images/2023/06/image-53.png",
            "https://skerritt.blog/content/images/2023/06/image-54.png",
            "https://skerritt.blog/content/images/2023/06/image-55.png",
            "https://skerritt.blog/content/images/2023/06/image-56.png",
            "https://skerritt.blog/content/images/2023/06/image-57.png",
            "https://skerritt.blog/content/images/2023/06/image-58.png",
            "https://skerritt.blog/content/images/2023/06/image-59.png",
            "https://images.unsplash.com/photo-1712417827761-7a68ff4a90f3?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wwfDF8YWxsfDE3fHx8fHx8Mnx8MTcxMjY3NTE5N3w&ixlib=rb-4.0.3&q=80&w=300 300w,                    https://images.unsplash.com/photo-1712417827761-7a68ff4a90f3?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wwfDF8YWxsfDE3fHx8fHx8Mnx8MTcxMjY3NTE5N3w&ixlib=rb-4.0.3&q=80&w=600 600w,                    https://images.unsplash.com/photo-1712417827761-7a68ff4a90f3?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wwfDF8YWxsfDE3fHx8fHx8Mnx8MTcxMjY3NTE5N3w&ixlib=rb-4.0.3&q=80&w=1000 1000w,                    https://images.unsplash.com/photo-1712417827761-7a68ff4a90f3?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wwfDF8YWxsfDE3fHx8fHx8Mnx8MTcxMjY3NTE5N3w&ixlib=rb-4.0.3&q=80&w=2000 2000w",
            "https://images.unsplash.com/photo-1714182370418-a22ee27e11ea?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wwfDF8YWxsfDd8fHx8fHwyfHwxNzE0NTgyODQ1fA&ixlib=rb-4.0.3&q=80&w=300 300w,                    https://images.unsplash.com/photo-1714182370418-a22ee27e11ea?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wwfDF8YWxsfDd8fHx8fHwyfHwxNzE0NTgyODQ1fA&ixlib=rb-4.0.3&q=80&w=600 600w,                    https://images.unsplash.com/photo-1714182370418-a22ee27e11ea?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wwfDF8YWxsfDd8fHx8fHwyfHwxNzE0NTgyODQ1fA&ixlib=rb-4.0.3&q=80&w=1000 1000w,                    https://images.unsplash.com/photo-1714182370418-a22ee27e11ea?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wwfDF8YWxsfDd8fHx8fHwyfHwxNzE0NTgyODQ1fA&ixlib=rb-4.0.3&q=80&w=2000 2000w",
            "https://images.unsplash.com/photo-1682687220795-796d3f6f7000?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wxfDF8YWxsfDF8fHx8fHwyfHwxNzAyMDI5NzE5fA&ixlib=rb-4.0.3&q=80&w=300 300w,                    https://images.unsplash.com/photo-1682687220795-796d3f6f7000?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wxfDF8YWxsfDF8fHx8fHwyfHwxNzAyMDI5NzE5fA&ixlib=rb-4.0.3&q=80&w=600 600w,                    https://images.unsplash.com/photo-1682687220795-796d3f6f7000?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wxfDF8YWxsfDF8fHx8fHwyfHwxNzAyMDI5NzE5fA&ixlib=rb-4.0.3&q=80&w=1000 1000w,                    https://images.unsplash.com/photo-1682687220795-796d3f6f7000?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3wxMTc3M3wxfDF8YWxsfDF8fHx8fHwyfHwxNzAyMDI5NzE5fA&ixlib=rb-4.0.3&q=80&w=2000 2000w"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Autumn Skerritt"
        ],
        "publish_date": "2023-06-18T10:39:00+00:00",
        "summary": "",
        "meta_description": "Diffie-Hellman-Merkle is a way to share a secret key with someone (or something) without actually sending them the key. Before we look into how we share keys let‚Äôs first look into what keys are and why we would want to invent a method to share keys without giving the",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "Skerritt.blog",
        "canonical_link": "https://skerritt.blog/diffie-hellman-merkle/",
        "text": "Diffie-Hellman-Merkle is a way to share a secret key with someone (or something) without actually sending them the key. Before we look into how we share keys let‚Äôs first look into what keys are and why we would want to invent a method to share keys without giving the other person the key.\n\nYour front door is usually locked by a key. This key unlocks & locks your front door. You have one key which you use to unlock and lock things.\n\nOnly people with the key or a copy of the key can unlock the door. Now, imagine you‚Äôre going to be on holiday Friday, Saturday, Sunday in Bali. You want to invite your friend around to look after your cat üò∫ while you‚Äôre on the beautiful beaches üèñÔ∏è.\n\nYour only friend is unfortunately on holiday Wednesday, Thursday and Friday. They get back right as you leave for holiday. You can‚Äôt be there to physically give them the key, but hiding the key under a rock outside your door seems insecure. Anyone could lift up that rock and find the key, but you just want your friend to have the key.\n\nThis is where Diffie-Hellman comes in. Well, with Diffie-Hellman you‚Äôre not exchanging physical keys but rather digital keys. Let‚Äôs explore some basic cryptography to understand why digital key exchange sucks just as much as real life key exchange.\n\nJulius Caesar used a cipher to send messages that no one else could read other than the intended recipient. Mainly because no one could read back in 100 BC, and those that could wouldn‚Äôt understand a random string of letters. That‚Äôs the whole point of cryptography. To create ways to communicate without third parties understanding the message. This cipher is Caesar*‚Äòs Cipher*. Given an alphabet and a key (the key is an integer between 1 and 25), shift all of the alphabet letters by key.\n\nWith a shift of 3, as seen in the image above, A becomes D, B becomes E and so on until it wraps around with X = A. The original message is called the *plaintext *and the encrypted message is called the ciphertext.\n\nThe easiest way to perform Caesar‚Äôs Cipher is to turn all of the letters into numbers, a = 1, b = 2, c = 3 and so on.\n\nTo encrypt, E, you calculate this for every letter (where s is the shift):\n\n$$ E_{s}(letter) = (letter + shift)$$\n\nTo decrypt Caesar‚Äôs cipher, D, you calculate this for every letter:\n\n$$D_{s}(letter) = (letter - shift)$$\n\nSomething important to note is that this version of the cipher doesn‚Äôt support wraparound (for brevity).\n\nAs you can tell, it‚Äôs not very secure. With 25 total shifts you just have to shift the text 25 times until you find the decrypted code, this is called a brute force attack. You take the encrypted text and shift it all 25 times until you find the decrypted text. But let‚Äôs imagine for a second that this was a hard cipher - that brute force isn‚Äôt feasible.\n\nThe shift is the key to Caesar‚Äôs cipher. But the problem still persists, how do you tell your friend you‚Äôre using a shift of 9? Any and all forms of communication can be listened in on. It doesn‚Äôt matter if you‚Äôre writing a letter or going to a hidden forest in Switzerland 30 miles from the nearest town. If you communicate the key, it can be listened in on.\n\nHow do you tell your friend you‚Äôre using a shift of 9, for example? You have to communicate it to them somehow. Any and all forms of communication can be listened in on - whether that‚Äôs writing a letter or going to a hidden forest in Switzerland 30 miles from the nearest town and telling your friend.\n\nThe problem becomes even more apparent when you realise that communicating parties over the internet usually have no prior knowledge about each other and are thousands of miles apart. This is where the magic of Diffie-Hellman-Merkle key exchange comes in.\n\nDiffie-Hellman-Merkle\n\nDiffie-Hellman is a way to securely exchange keys in public. It was conceptualised by Ralph Merkle, and named After Whitfield Diffie and Martin Hellman. I have chosen to include Merkle‚Äôs name as the title because he put in just as much work as Diffie-Hellman and his name never appears when this algorithm is talked about.\n\nU.S. Patent 4,200,770, from 1977, is now expired and describes the now-public-domain algorithm. It credits Hellman, Diffie, and Merkle as inventors.\n\nLet‚Äôs go through how this algorithm works.\n\nPick two numbers, G and N.\n\nFor this algorithm, we will also walk through the colour mixing method for explaining how it works.\n\nAlice and Bob publicly agree to use a modulus p = 23 and g = 5 (which is a primitive root modulo 23, explained later). Modulus is just the remainder of the division. Note: this example comes from Wikipedia.\n\nIt‚Äôs hard to describe the painting method in text, so if you want to know about this method I suggest watching this video:\n\nWe‚Äôll colour G yellow. We have 2 copies of G (yellow) as seen above.\n\nWhen Alice and Bob agree on these numbers, Eve knows they are using these numbers.\n\n2. Alice needs to calculate a private key.\n\nShe does this by picking a secret number (a). She computes Ga mod p and sends that result to Bob.\n\nAlice chooses a secret, random integer a = 4.\n\nAlice computes A = 54 mod 23 = 4 and sends the number 4 to Bob.\n\nShe colours this private key reddish-brown.\n\nEve doesn‚Äôt know Alice‚Äôs secret number is 4, only that the result of this equation is 4. It‚Äôs not feasible for Eve to calculate what Alice‚Äôs secret number is from the resultant of this equation.\n\n3. Bob makes his own private key. Its colour is dark green.\n\nHe calculates this by picking a secret number (b) and computes gb mod p. He then sends the result to Alice. Bob creates a random private key, for this example we‚Äôll use 3.\n\nThen Bob calculates b = 53 mod 23 = 10 and sends 10 to Alice.\n\n4. Now Bob takes the number Alice sent him and computes ba mod p.\n\nIn the colour analogy, this is taking Alice‚Äôs paint colour and adding it to Bob‚Äôs paint colour.\n\nBob computes s = 43 mod 23 = 18.\n\nBob doesn‚Äôt send this to Alice.\n\n5. Alice computes ab mod p.\n\nIn the paint analogy, this is Alice adding Bob‚Äôs paint (that Bob sent her) to her painting.\n\nAlice calculates s = 104 mod 23 = 18\n\nThe magic is that Alice and Bob now have the same number or the same paint colour.\n\nLet‚Äôs discuss in detail the mathematics behind this cool algorithm.\n\nExplanation of maths\n\nDiffie-Hellman-Merkle works because of a cool modulus exponent principle. First, let‚Äôs explain what modulus is before we try to understand this principle.\n\nModular Arithmetic\n\nImagine a finite range of numbers, for example, 1 to 12. These numbers are arranged in a circle, much like a clock (modular arithmetic is sometimes called clock arithmetic because of this).\n\nCount 13 around this clock. You get to 12 and then you need to count 1 more - so you go back to 1. Modular arithmetic is still defined as the remainder of division, however, it can also be defined (and is more commonly defined) as a clock.\n\nFunctions using modular arithmetic tend to perform erratically, which in turn sometimes makes them one-way functions. Let‚Äôs see this with an example by taking a regular function and seeing how it works when it becomes a modular arithmetic function.\n\n$$3^x$$\n\nWhen we insert 2 into this function, we get 32 = 6. Insert 3 and we get 33 = 9.\n\nThis function is easy to reverse. If we‚Äôre given 9, we can tell that the function had an input of 3, because 33 = 9.\n\nHowever, with modular arithmetic added, it doesn‚Äôt behave sensibly.\n\nImagine we had this formula:\n\n$$3^{x} mod 7$$\n\nHow would you find out what x is? You can‚Äôt put the mod on the other side, because there isn‚Äôt really an inverse of modular arithmetic. What about guessing? Let‚Äôs input 5:\n\n$$3^{5} mod 7$$\n\nOkay, that was too big. You might want to go lower, maybe 4 or 3 but actually this is the wrong direction. When x is 6, it is equal to 1.\n\nIn normal arithmetic, we can test numbers and get a feel for whether we are getting warmer or colder, but this isn‚Äôt the case with modular arithmetic.\n\nOften the easiest way to reverse modular arithmetic is to compile a table for all values of x until the right answer is found. Although this may work for smaller numbers, it is computationally infeasible to do for much larger numbers. This is often why modular arithmetic is known as a one-way function.\n\nIf I gave you a number such as 5787 and told you to find the function for it, it would be infeasible. In fact, if I gave you the ability to input any number into the function it would still be hard. It took me a mere few seconds to make this function, but it‚Äôll take you hours or maybe even days to work out what x is.\n\nDiffie-Hellman-Merkle is a one-way function. While it is relatively easy to carry out this function, it is computationally infeasible to do the reverse of the function and find out what the keys are. Although, it is possible to reverse an RSA encryption if you know some numbers such as N.\n\nPrimitive root\n\nThe primitive root of a prime number, p, is a number, a, such that all numbers:\n\n$$a \\; mod \\; p, a^2 mod p, a^3 \\; mod \\; p, a^4 \\; mod \\; p, ...$$\n\nare different. There is a formula for counting what the indices are, but I think it‚Äôs far more intuitive to acknowledge ‚Äúthe second one is to the power of 2, the third one is to the power of 3‚Äù and so on.\n\nLet's see an example where $p = 7$. Let's set $a_1 = 2$ and $a_2 = 3$.\n\n$$2^0 = 1 ( mod \\ 7) = 1$$\n\n$$2^1 = 2 ( mod \\ 7) = 2$$\n\n$$2^2 = 4 ( mod \\ 7) = 4$$\n\n$$2^3 = 8 ( mod \\ 7) = 1$$\n\nUh oh! 20 is the same as 23. This means that 2 is not a primitive root of 7. Let‚Äôs try again with 3.\n\n$$3^0 = 1 ( mod \\ 7) = 1$$\n\n$$3^1 = 3 (mod \\ 7) = 3$$\n\n$$3^2 = 9 (mod \\ 7) = 2$$\n\n$$3^3 = 27 (mod \\ 7) = 6$$\n\n$$3^4 = 81 ( mod \\ 7) = 4$$\n\n$$3^5 = 243 ( mod \\ 7) = 5$$\n\n$$3^6 = 1 (mod \\ 7) = 1$$\n\nNow let‚Äôs try a = 3.\n\n$$3^0 = 1$$\n\n$$3^1 = 3$$\n\n$$3^2 = 2$$\n\n$$3^3 = 6$$\n\n$$3^4 = 4$$\n\n$$3^5 = 5$$\n\n$$3^6 = 1$$\n\nNow we‚Äôve got a cycle in these powers.\n\n36 = 1, and 30 = 1. This is because we are using modulus it repeats into this cycle, so we can stop now. Unlike before where we reached 23 and it cycled, it's okay if it cycles here because for any prime number, p, and any number, a, such that \\(a \\ne 0 \\ mod \\ p\\) and \\(a \\ne 1 \\; mod \\; p\\) the consecutive powers of \\(a\\) may cover no more than p - 1 values modulo p. That is, we go from \\(1, ..., p - 1\\). When p is 7, the consecutive powers cover up to 6.\n\nDiscrete logarithms\n\n$$a^b = c \\; mod \\; n$$\n\nSuch an equation means some numbers you can write it differently as:\n\n$$log_a c = b \\; mod \\; n$$\n\nLogarithms are the inverse of exponents, we‚Äôve just inversed the sum here.\n\nNow it‚Äôs a well-defined function, we can say in discrete terms that \\(log_3 5 = 5 \\ (mod \\ 7)\\) (looking at the table above).\n\nif you use a non-primitive root number it becomes easier, as we have a smaller number of outcomes (because it repeats earlier), as seen below.\n\n$$2^0 = 1 (mod \\ 7) = 1$$\n\n$$2^1 = 2 ( mod \\ 7) = 2$$\n\n$$2^2 = 4 ( mod \\ 7) = 4$$\n\n$$2^3 = 8 ( mod \\ 7) = 1$$\n\nBy using a primitive root, we get a much larger outcome, making it harder.\n\n$$3^0 = 1 ( mod \\ 7) = 1$$\n\n$$3^1 = 3 (mod \\ 7) = 3$$\n\n$$3^2 = 9 ( mod \\ 7) = 2$$\n\n$$3^3 = 27 ( mod \\ 7) = 6$$\n\n$$3^4 = 81 ( mod \\ 7) = 4$$\n\n$$3^5 = 243 ( mod \\ 7) = 5$$\n\n$$3^7 = 1 ( mod \\ 7) = 1$$\n\nIt is relatively easy to calculate exponentials modulo a prime, that is a, l, p calculate ai mod p.\n\nExponentiation is a cheap operation. you can do it even for very large numbers while logarithm is a much more difficult function to calculate for large numbers.\n\nTo calculate exponentiation, you give number 2 and you respond to me what the answer is. that‚Äôs exponentiation, going from left to right.\n\n$$3^0 = 1$$\n\n$$3^1 = 3$$\n\n$$3^2 = 2$$\n\n$$3^3 = 6$$\n\n$$3^4 = 4$$\n\n$$3^5 = 5$$\n\nLogarithm is how to go back, from right to left. Logarithms are much harder than exponentiation.\n\nMaths implemented\n\nLet‚Äôs go back to seeing how Diffie-Hellman worked, but this time with a lot more knowledge of how mathematics works.\n\nWe have 2 people, Alice and Bob. Each of them has to agree in advance on some prime number q (publicly known number) and its primitive root a (publicly known).\n\n1. Alice selects a random integer \\(x_a < q\\) and keeps it in secret\n\n2. B selects a random integer \\(x_b < q\\) and keeps it in secret\n\n3. Alice calculates the function left to right (exponentiation)\n\n$$3^0 = 2$$\n\n$$3^1 = 3$$\n\n$$3^2 = 2$$\n\n$$3^3 = 6$$\n\n$$3^4 = 4$$\n\n$$3^5 = 5$$\n\nand they choose one of the exponents, chosen randomly and kept in secret. Now Alice does \\(y_a = a^{x a} mod q\\) and sends it to Bob.\n\nThis example isn‚Äôt very impressive, and sometimes 35 = 5 but for much larger numbers most things change everything, this is almost RSA encryption (the idea is the same, but it‚Äôs not quite the same as this is key exchange, not encryption).\n\nBob then does the same as Alice. Both Alice and Bob are now capable of calculating the shared key.\n\nAlice calculates \\(k = (y_b)^{x_a} \\; mod \\; q\\)\n\nBob calculates \\(k = (y_a)^{x_b} \\; mod \\; q\\)\n\nNow they have the same numbers, k is the common secret key.\n\n$$(\\alpha ^ {x_b})^{x_a} = (\\alpha ^ {x_a})^{x_b}$$\n\nThis equation above is what makes it all work. The formulae are the same, but different. You get Alice to do one side of the formula, Bob does another side and they end up with the same number.\n\nThis really is the equation that puts it all together. Most of this blog post led up to this equation.\n\na and b are secret, and without these numbers, there is no easy way to repeat these computations because in to do it you need to know the secrets.\n\nThe above formula shows that the two methods are exactly equal. If you do the left equation, you get the same result as the right equation.\n\nConclusion\n\nDiffie-Hellman-Merkle is a fascinating way of sharing a secret over an unsecured communications medium, by not sharing it at all over that medium."
    }
}