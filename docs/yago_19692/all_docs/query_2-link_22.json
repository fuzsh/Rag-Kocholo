{
    "id": "yago_19692_2",
    "rank": 22,
    "data": {
        "url": "https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes",
        "read_more_link": "",
        "language": "en",
        "title": "Learn LaTeX in 30 minutes",
        "top_image": "https://cdn.overleaf.com/img/ol-brand/overleaf_og_logo.png",
        "meta_img": "https://cdn.overleaf.com/img/ol-brand/overleaf_og_logo.png",
        "images": [
            "https://images.ctfassets.net/nrgyaltdicpt/5oBbZABsWEnHZpwhfvV2PD/95ba7d5496616b4f10dffe6fb90f578a/LL30Fig1-plain.svg",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/7/77/LL30autocompile.png",
            "https://images.ctfassets.net/nrgyaltdicpt/3WzMd0bx2zlj3zLTKS8SxT/dc2b7c16adbc96bdd750b6d2c8b4227e/LL30Fig2r-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/6vo15r0tLCByTpcvn1w2E8/8f14edc7ece1f10ce4ba2c76e1e58a56/LL30Fig3r-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/1K0A8RXXOomakJBAr2usmp/62d0e8b5275092dd0b1b4a59c745b632/LL30Fig4r-plain.svg",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/a/a8/InsertFigureButton.png",
            "https://images.ctfassets.net/nrgyaltdicpt/4p5toat08FUgehv4yuNwXS/efc9e75e4342c9caeec94f26627fa337/LL30Fig5v2-plain.svg",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/1/17/ImagesInAFolder.png",
            "https://images.ctfassets.net/nrgyaltdicpt/4DkAWWkQqZP6QHU2EErogQ/9aa2371f2cde0f3f8bf22aa1c0b91789/LL30Fig6r-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/1lDj29Mg9ZuLNHXwZrTJew/cd7d950c65fd05b251c4aa55746f4eb7/LL30Fig7-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/2vkfa7RiAIJxv5wIZbg9UK/530c384f159d091a587de279d13fefec/LL30Fig8-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/77oK8pfew1B1VvxiBtALag/15714f2da4e469bbb8cf70a0d3733e5d/LL30Fig9-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/46VPfEGxYJ3di18TLzaLo9/ed67df07532c52b6543fd2bae7cb7c04/LL30Fig10r-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/6n1FPYFzmzCHPpWoEoYQZM/79b33f1096be06326bff7d2e1976c67c/LL30Fig11-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/5xfm4NybWckHL5ndpdnBRq/bc0b5e27044820ea5cdd11648a68f543/LL30Fig12r-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/hT85gkewCDlxCHeNU5slE/9256c129b25bec7a93dcfe9e44b0654a/LL30Fig13r-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/4cPu8x8ZxuDVF6efcZ03yi/91aa6aa84719613b0e25c725b70aa0b8/LL30Fig14-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/5DdSH06hFli8k4lR0dxw4m/a55cddf9aa10b64302ae7b72ba0c6447/LL30Fig15r-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/1A1T7YsurQdM058OwmLqd8/7f6e962c31356bafa702bab9062f6061/LL30Fig16-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/5K46QavbKv9vF4RI1GbUf2/f22d4f8a06d00251166f86d2c891321e/LL30Fig17-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/5uWYGUhK1XJJJaWz5R1EmX/3ee88bf6b2eaf8d0644b57fa8064800b/LL30Fig18-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/1Cy9FcRnDVDRUPQdCgaKq6/c21e5f7d9a53514756c6e1f2996e51e0/LL30Fig19-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/1f5w74UIaTCkpApaPdVeWf/580a87c2413ddc9d6bdef3bf462689fc/LL30Fig20-plain.svg",
            "https://images.ctfassets.net/nrgyaltdicpt/MxY592Q6EGsDKMA2mZw0t/fffa41a0a0d30770526f73aff72a7be1/LL30Fig21r-plain.svg",
            "https://sharelatex-wiki-cdn-671420.c.cdn77.org/learn-scripts/images/6/60/LL30packagefail.png"
        ],
        "movies": [
            "https://videos.ctfassets.net/nrgyaltdicpt/6yo2PA5aMV3OEZl5NtZKWu/54395f569b830b8183b5e0058d5bc0cc/LL30recompile.mp4",
            "https://videos.ctfassets.net/nrgyaltdicpt/2n6iw0AUELNtABCuva0oV5/cf27bff3a6099da94362d64645e69dfe/LL30download.mp4"
        ],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "An online LaTeX editor that’s easy to use. No installation, real-time collaboration, version control, hundreds of LaTeX templates, and more.",
        "meta_lang": "en",
        "meta_favicon": "/favicon.ico",
        "meta_site_name": "",
        "canonical_link": "https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes",
        "text": "This introductory tutorial does not assume any prior experience of LaTeX but, hopefully, by the time you are finished, you will not only have written your first LaTeX document but also acquired sufficient knowledge and confidence to take the next steps toward LaTeX proficiency.\n\nWhat is LaTeX?\n\nLaTeX (pronounced “LAY-tek” or “LAH-tek”) is a tool for typesetting professional-looking documents. However, LaTeX’s mode of operation is quite different to many other document-production applications you may have used, such as Microsoft Word or LibreOffice Writer: those “WYSIWYG” tools provide users with an interactive page into which they type and edit their text and apply various forms of styling. LaTeX works very differently: instead, your document is a plain text file interspersed with LaTeX commands used to express the desired (typeset) results. To produce a visible, typeset document, your LaTeX file is processed by a piece of software called a TeX engine which uses the commands embedded in your text file to guide and control the typesetting process, converting the LaTeX commands and document text into a professionally typeset PDF file. This means you only need to focus on the content of your document and the computer, via LaTeX commands and the TeX engine, will take care of the visual appearance (formatting).\n\nWhy learn LaTeX?\n\nVarious arguments can be proposed for, or against, learning to use LaTeX instead of other document-authoring applications; but, ultimately, it is a personal choice based on preferences, affinities, and documentation requirements.\n\nArguments in favour of LaTeX include:\n\nsupport for typesetting extremely complex mathematics, tables and technical content for the physical sciences;\n\nfacilities for footnotes, cross-referencing and management of bibliographies;\n\nease of producing complicated, or tedious, document elements such as indexes, glossaries, table of contents, lists of figures;\n\nbeing highly customizable for bespoke document production due to its intrinsic programmability and extensibility through thousands of free add-on packages.\n\nOverall, LaTeX provides users with a great deal of control over the production of documents which are typeset to extremely high standards. Of course, there are types of documents or publications where LaTeX doesn’t shine, including many “free form” page designs typically found in magazine-type publications.\n\nOne important benefit of LaTeX is the separation of document content from document style: once you have written the content of your document, its appearance can be changed with ease. Similarly, you can create a LaTeX file which defines the layout/style of a particular document type and that file can be used as a template to standardise authorship/production of additional documents of that type; for example, this allows scientific publishers to create article templates, in LaTeX, which authors use to write papers for submission to journals. Overleaf has a gallery containing thousands of templates, covering an enormous range of document types—everything from scientific articles, reports and books to CVs and presentations. Because these templates define the layout and style of the document, authors need only to open them in Overleaf—creating a new project—and commence writing to add their content.\n\nWriting your first piece of LaTeX\n\nThe first step is to create a new LaTeX project. You can do this on your own computer by creating a new .tex file; alternatively, you can start a new project in Overleaf.\n\nLet’s start with the simplest working example, which can be opened directly in Overleaf:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nYou can see that LaTeX has automatically indented the first line of the paragraph, taking care of that formatting for you. Let’s have a closer look at what each part of our code does.\n\nThe first line of code, \\documentclass{article}, declares the document type known as its class, which controls the overall appearance of the document. Different types of documents require different classes; i.e., a CV/resume will require a different class than a scientific paper which might use the standard LaTeX article class. Other types of documents you may be working on may require different classes such as book or report. To get some idea of the many LaTeX class types available, visit the relevant page on CTAN (Comprehensive TeX Archive Network).\n\nHaving set the document class, our content, known as the body of the document, is written between the \\begin{document} and \\end{document} tags. After opening the example above, you can make changes to the text and, when finished, view the resulting typeset PDF by recompiling the document. To do this in Overleaf, simply hit Recompile, as demonstrated in this brief video clip:\n\nAny Overleaf project can be configured to recompile automatically each time it is edited: click the small arrow next to the Recompile button and set Auto Compile to On, as shown in the following screengrab:\n\nHaving seen how to add content to our document, the next step is to give it a title. To do this, we must talk briefly about the preamble.\n\nThe preamble of a document\n\nThe screengrab above shows Overleaf storing a LaTeX document as a file called main.tex: the .tex file extension is, by convention, used when naming files containing your document’s LaTeX code.\n\nThe previous example showed how document content was entered after the \\begin{document} command; however, everything in your .tex file appearing before that point is called the preamble, which acts as the document’s “setup” section. Within the preamble you define the document class (type) together with specifics such as languages to be used when writing the document; loading packages you would like to use (more on this later), and it is where you’d apply other types of configuration.\n\nA minimal document preamble might look like this:\n\nwhere \\documentclass[12pt, letterpaper]{article} defines the overall class (type) of document. Additional parameters, which must be separated by commas, are included in square brackets ([...]) and used to configure this instance of the article class; i.e., settings we wish to use for this particular article-class-based document.\n\nIn this example, the two parameters do the following:\n\n12pt sets the font size\n\nletterpaper sets the paper size\n\nOf course other font sizes, 9pt, 11pt, 12pt, can be used, but if none is specified, the default size is 10pt. As for the paper size, other possible values are a4paper and legalpaper. For further information see the article about page size and margins.\n\nThe preamble line\n\nis an example of loading an external package (here, graphicx) to extend LaTeX’s capabilities, enabling it to import external graphics files. LaTeX packages are discussed in the section Finding and using LaTeX packages.\n\nAdding a title, author and date to our document requires three more lines in the preamble (not the main body of the document). Those lines are:\n\n\\title{My first LaTeX document}: the document title\n\n\\author{Hubert Farnsworth}: here you write the name of the author(s) and, optionally, the \\thanks command within the curly braces:\n\n\\thanks{Funded by the Overleaf team.}: can be added after the name of the author, inside the braces of the author command. It will add a superscript and a footnote with the text inside the braces. Useful if you need to thank an institution in your article.\n\n\\date{August 2022}: you can enter the date manually or use the command \\today to typeset the current date every time the document is compiled\n\nWith these lines added, your preamble should look something like this:\n\nTo typeset the title, author and date use the \\maketitle command within the body of the document:\n\nThe preamble and body can now be combined to produce a complete document which can be opened in Overleaf:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nLaTeX is a form of “program code”, but one which specializes in document typesetting; consequently, as with code written in any other programming language, it can be very useful to include comments within your document. A LaTeX comment is a section of text that will not be typeset or affect the document in any way—often used to add “to do” notes; include explanatory notes; provide in-line explanations of tricky macros or comment-out lines/sections of LaTeX code when debugging.\n\nTo make a comment in LaTeX, simply write a % symbol at the beginning of the line, as shown in the following code which uses the example above:\n\nOpen this example in Overleaf.\n\nThis example produces output that is identical to the previous LaTeX code which did not contain the comment.\n\nBold, italics and underlining\n\nNext, we will now look at some text formatting commands:\n\nBold: bold text in LaTeX is typeset using the \\textbf{...} command.\n\nItalics: italicised text is produced using the \\textit{...} command.\n\nUnderline: to underline text use the \\underline{...} command.\n\nThe next example demonstrates these commands:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nAnother very useful command is \\emph{argument}, whose effect on its argument depends on the context. Inside normal text, the emphasized text is italicized, but this behaviour is reversed if used inside an italicized text—see the next example:\n\nOpen this \\emph example in Overleaf.\n\nThis example produces the following output:\n\nNote: some packages, such as Beamer, change the behaviour of the \\emph command.\n\nAdding images\n\nIn this section we will look at how to add images to a LaTeX document. Overleaf supports three ways to insert images:\n\nUse the Insert Figure button( ), located on the editor toolbar, to insert an image into Visual Editor or Code Editor.\n\nCopy and paste an image into Visual Editor or Code Editor.\n\nUse Code Editor to write LaTeX code that inserts a graphic.\n\nOptions 1 and 2 automatically generate the LaTeX code required to insert images, but here we introduce option 3—note that you will need to upload those images to your Overleaf project. The following example demonstrates how to include a picture:\n\nOpen this image example in Overleaf.\n\nThis example produces the following output:\n\nImporting graphics into a LaTeX document needs an add-on package which provides the commands and features required to include external graphics files. The above example loads the graphicx package which, among many other commands, provides \\includegraphics{...} to import graphics and \\graphicspath{...} to advise LaTeX where the graphics are located.\n\nTo use the graphicx package, include the following line in your Overleaf document preamble:\n\nIn our example the command \\graphicspath{{images/}} informs LaTeX that images are kept in a folder named images, which is contained in the current directory:\n\nThe \\includegraphics{universe} command does the actual work of inserting the image in the document. Here, universe is the name of the image file but without its extension.\n\nNote:\n\nAlthough the full file name, including its extension, is allowed in the \\includegraphics command, it’s considered best practice to omit the file extension because it will prompt LaTeX to search for all the supported formats.\n\nGenerally, the graphic’s file name should not contain white spaces or multiple dots; it is also recommended to use lowercase letters for the file extension when uploading image files to Overleaf.\n\nMore information on LaTeX packages can be found at the end of this tutorial in the section Finding and using LaTeX packages.\n\nCaptions, labels and references\n\nImages can be captioned, labelled and referenced by means of the figure environment, as shown below:\n\nOpen this image example in Overleaf.\n\nThis example produces the following output:\n\nThere are several noteworthy commands in the example:\n\n\\includegraphics[width=0.75\\textwidth]{mesh}: This form of \\includegraphics instructs LaTeX to set the figure’s width to 75% of the text width—whose value is stored in the \\textwidth command.\n\n\\caption{A nice plot.}: As its name suggests, this command sets the figure caption which can be placed above or below the figure. If you create a list of figures this caption will be used in that list.\n\n\\label{fig:mesh1}: To reference this image within your document you give it a label using the \\label command. The label is used to generate a number for the image and, combined with the next command, will allow you to reference it.\n\n\\ref{fig:mesh1}: This code will be substituted by the number corresponding to the referenced figure.\n\nImages incorporated in a LaTeX document should be placed inside a figure environment, or similar, so that LaTeX can automatically position the image at a suitable location in your document.\n\nFurther guidance is contained in the following Overleaf help articles:\n\nPositioning of Figures\n\nInserting Images\n\nCreating lists in LaTeX\n\nYou can create different types of list using environments, which are used to encapsulate the LaTeX code required to implement a specific typesetting feature. An environment starts with \\begin{environment-name} and ends with \\end{environment-name} where environment-name might be figure, tabular or one of the list types: itemize for unordered lists or enumerate for ordered lists.\n\nUnordered lists\n\nUnordered lists are produced by the itemize environment. Each list entry must be preceded by the \\item command, as shown below:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nYou can also open this larger Overleaf project which demonstrates various types of LaTeX list.\n\nOrdered lists\n\nOrdered lists use the same syntax as unordered lists but are created using the enumerate environment:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nAs with unordered lists, each entry must be preceded by the \\item command which, here, automatically generates the numeric ordered-list label value, starting at 1.\n\nFor further information you can open this larger Overleaf project which demonstrates various types of LaTeX list or visit our dedicated help article on LaTeX lists, which provides many more examples and shows how to create customized lists.\n\nAdding math to LaTeX\n\nOne of the main advantages of LaTeX is the ease with which mathematical expressions can be written. LaTeX provides two writing modes for typesetting mathematics:\n\ninline math mode used for writing formulas that are part of a paragraph\n\ndisplay math mode used to write expressions that are not part of a text or paragraph and are typeset on separate lines\n\nInline math mode\n\nLet’s see an example of inline math mode:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nTo typeset inline-mode math you can use one of these delimiter pairs: \\( ... \\), $ ... $ or \\begin{math} ... \\end{math}, as demonstrated in the following example:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nDisplay math mode\n\nEquations typeset in display mode can be numbered or unnumbered, as in the following example:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nTo typeset display-mode math you can use one of these delimiter pairs: \\[ ... \\], \\begin{displaymath} ... \\end{displaymath} or \\begin{equation} ... \\end{equation}. Historically, typesetting display-mode math required use of $$ characters delimiters, as in $$ ... display math here ...$$, but this method is no longer recommended: use LaTeX’s delimiters \\[ ... \\] instead.\n\nMore complete examples\n\nThe following examples demonstrate a range of mathematical content typeset using LaTeX.\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nThe next example uses the equation* environment which is provided by the amsmath package, so we need to add the following line to our document preamble:\n\nFor further information on using amsmath see our help article.\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nThe possibilities with math in LaTeX are endless so be sure to visit our help pages for advice and examples on specific topics:\n\nMathematical expressions\n\nSubscripts and superscripts\n\nBrackets and Parentheses\n\nFractions and Binomials\n\nAligning Equations\n\nOperators\n\nSpacing in math mode\n\nIntegrals, sums and limits\n\nDisplay style in math mode\n\nList of Greek letters and math symbols\n\nMathematical fonts\n\nBasic document structure\n\nNext, we explore abstracts and how to partition a LaTeX document into different chapters, sections and paragraphs.\n\nAbstracts\n\nScientific articles usually provide an abstract which is a brief overview/summary of their core topics, or arguments. The next example demonstrates typesetting an abstract using LaTeX’s abstract environment:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nParagraphs and new lines\n\nWith the abstract in place, we can begin writing our first paragraph. The next example demonstrates:\n\nhow a new paragraph is created by pressing the \"enter\" key twice, ending the current line and inserting a subsequent blank line;\n\nhow to start a new line without starting a new paragraph by inserting a manual line break using the \\\\ command, which is a double backslash; alternatively, use the \\newline command.\n\nThe third paragraph in this example demonstrates use of the commands \\\\ and \\newline:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nNote how LaTeX automatically indents paragraphs—except immediately after document headings such as section and subsection—as we will see.\n\nNew users are advised that multiple \\\\ or \\newlines should not used to “simulate” paragraphs with larger spacing between them because this can interfere with LaTeX’s typesetting algorithms. The recommended method is to continue using blank lines for creating new paragraphs, without any \\\\, and load the parskip package by adding \\usepackage{parskip} to the preamble.\n\nFurther information on paragraphs can be found in the following articles:\n\nParagraphs and new lines\n\nHow to change paragraph spacing in LaTeX\n\nLaTeX Error: There's no line here to end provides additional advice and guidance on using \\\\.\n\nChapters and sections\n\nLonger documents, irrespective of authoring software, are usually partitioned into parts, chapters, sections, subsections and so forth. LaTeX also provides document-structuring commands but the available commands, and their implementations (what they do), can depend on the document class being used. By way of example, documents created using the book class can be split into parts, chapters, sections, subsections and so forth but the letter class does not provide (support) any commands to do that.\n\nThis next example demonstrates commands used to structure a document based on the book class:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nThe names of sectioning commands are mostly self-explanatory; for example, \\chapter{First Chapter} creates a new chapter titled First Chapter, \\section{Introduction} produces a section titled Introduction, and so forth. Sections can be further divided into \\subsection{...} and even \\subsubsection{...}. The numbering of sections, subsections etc. is automatic but can be disabled by using the so-called starred version of the appropriate command which has an asterisk (*) at the end, such as \\section*{...} and \\subsection*{...}.\n\nCollectively, LaTeX document classes provide the following sectioning commands, with specific classes each supporting a relevant subset:\n\n\\part{part}\n\n\\chapter{chapter}\n\n\\section{section}\n\n\\subsection{subsection}\n\n\\subsubsection{subsubsection}\n\n\\paragraph{paragraph}\n\n\\subparagraph{subparagraph}\n\nIn particular, the \\part and \\chapter commands are only available in the report and book document classes.\n\nVisit the Overleaf article article about sections and chapters for further information about document-structure commands.\n\nCreating tables\n\nThe following examples show how to create tables in LaTeX, including the addition of lines (rules) and captions.\n\nCreating a basic table in LaTeX\n\nWe start with an example showing how to typeset a basic table:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nThe tabular environment is the default LaTeX method to create tables. You must specify a parameter to this environment, in this case {c c c} which advises LaTeX that there will be three columns and the text inside each one must be centred. You can also use r to right-align the text and l to left-align it. The alignment symbol & is used to demarcate individual table cells within a table row. To end a table row use the new line command \\\\. Our table is contained within a center environment to make it centred within the text width of the page.\n\nAdding borders\n\nThe tabular environment supports horizontal and vertical lines (rules) as part of the table:\n\nto add horizontal rules, above and below rows, use the \\hline command\n\nto add vertical rules, between columns, use the vertical line parameter |\n\nIn this example the argument is {|c|c|c|} which declares three (centred) columns each separated by a vertical line (rule); in addition, we use \\hline to place a horizontal rule above the first row and below the final row:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nHere is a further example:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nTip!\n\nCreating tables in LaTeX can be time-consuming so you may want to use the TablesGenerator.com online tool to export LaTeX code for tabulars.\n\nCaptions, labels and references\n\nYou can caption and reference tables in much the same way as images. The only difference is that instead of the figure environment, you use the table environment.\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nAdding a Table of Contents\n\nCreating a table of contents is straightforward because the command \\tableofcontents does almost all the work for you:\n\nOpen this example in Overleaf.\n\nThis example produces the following output:\n\nSections, subsections and chapters are automatically included in the table of contents. To manually add entries, such as an unnumbered section, use the command \\addcontentsline as shown in the example.\n\nDownloading your finished document\n\nThe following brief video clip shows how to download your project’s source code or the typeset PDF file:\n\nMore information can be found in the Overleaf help article Exporting your work from Overleaf.\n\nFinding and using LaTeX packages\n\nLaTeX not only delivers significant typesetting capabilities but also provides a framework for extensibility through the use of add-on packages. Rather than attempting to provide commands and features that “try to do everything”, LaTeX is designed to be extensible, allowing users to load external bodies of code (packages) that provide more specialist typesetting capabilities or extend LaTeX’s built-in features—such as typesetting tables. As observed in the section Adding images, the graphicx package extends LaTeX by providing commands to import graphics files and was loaded (in the preamble) by writing\n\nLoading packages\n\nAs noted above, packages are loaded in the document preamble via the \\usepackage command but because (many) LaTeX packages provide a set of options, which can be used to configure their behaviour, the \\usepackage command often looks like this:\n\nThe square brackets “[...]” inform LaTeX which set of options should be applied when it loads somepackage. Within the set of options requested by the user, individual options, or settings, are typically separated by a comma; for example, the geometry package provides many options to configure page layout in LaTeX, so a typical use of geometry might look like this:\n\nThe geometry package is one example of a package written and contributed by members of the global LaTeX community and made available, for free, to anyone who wants to use it.\n\nIf a LaTeX package does not provide any options, or the user wants to use the default values of a package’s options, it would be loaded like this:\n\nWhen you write \\usepackage[...]{somepackage} LaTeX looks for a corresponding file called somepackage.sty, which it needs to load and process—to make the package commands available and execute any other code provided by that package. If LaTeX cannot find somepackage.sty it will terminate with an error, as demonstrated in the following Overleaf example:\n\nOpen this error-generating example on Overleaf\n\nThis example produces the following output:\n\nFinding information about packages: CTAN\n\nPackages are distributed through the Comprehensive TeX Archive Network, usually referred to as CTAN, which, at the time of writing, hosts 6287 packages from 2881 contributors. CTAN describes itself as\n\n... a set of Internet sites around the world that offer TEX-related material for download.\n\nYou can browse CTAN to look for useful packages; for example:\n\nby topic\n\nalphabetically (useful if you know the package name)\n\nYou can also use the search facility (at the top of the page).\n\nPackages available on Overleaf: Introducing TeX Live\n\nOnce per year a (large) subset of packages hosted on CTAN, plus LaTeX-related fonts and other software, is collated and distributed as a system called TeX Live, which can be used to install your own (local) LaTeX setup. In fact, Overleaf’s servers also use TeX Live and are updated when a new version of TeX Live is released. Overleaf’s TeX Live updates are not immediate but take place a few months post-release, giving us time to perform compatibility tests of the new TeX Live version with the thousands of templates contained in our gallery. For example, here is our TeX Live 2022 upgrade announcement.\n\nAlthough TeX Live contains a (large) subset of CTAN packages it is possible to find an interesting package, such as igo for typesetting Go diagrams, which is hosted on CTAN but not included in (distributed by) TeX Live and thus unavailable on Overleaf. Some packages hosted on CTAN are not part of TeX Live due to a variety of reasons: perhaps a package is obsolete, has licensing problems, is extremely new (recently uploaded) or has platform dependencies, such as working on Windows but not Linux.\n\nNew packages, and updates to existing ones, are uploaded to CTAN all year round but updates to TeX Live are distributed annually; consequently, packages contained in the current version of TeX Live will not be as up-to-date as those hosted on CTAN. Because Overleaf’s servers use TeX Live it is possible that packages installed on our servers—i.e., ones available to our users—might not be the very latest versions available on CTAN but, generally, this is unlikely to be problematic."
    }
}