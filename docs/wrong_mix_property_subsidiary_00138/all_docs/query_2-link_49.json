{
    "id": "wrong_mix_property_subsidiary_00138_2",
    "rank": 49,
    "data": {
        "url": "https://www.jcp.org/en/jsr/detail%3Fid%3D210",
        "read_more_link": "",
        "language": "en",
        "title": "The Java Community Process(SM) Program",
        "top_image": "",
        "meta_img": "",
        "images": [
            "https://www.jcp.org/images/spacer.gif",
            "https://www.jcp.org/images/button_go.gif",
            "https://www.jcp.org/images/spacer.gif",
            "https://www.jcp.org/images/hr_dots1.gif",
            "https://www.jcp.org/images/hd_find-jsrs.gif",
            "https://www.jcp.org/images/button_go.gif",
            "https://www.jcp.org/images/spacer.gif",
            "https://www.jcp.org/images/hd_my-jcp.gif",
            "https://www.jcp.org/images/global/spacer.gif",
            "https://www.jcp.org/images/hr_dots1.gif",
            "https://www.jcp.org/images/global/spacer.gif",
            "https://www.jcp.org/images/hd_jcp-info.gif",
            "https://www.jcp.org/images/spacer.gif",
            "https://www.jcp.org/images/ad_banner2.gif",
            "https://www.jcp.org/images/common/trans.gif",
            "https://www.jcp.org/images/common/trans.gif",
            "https://www.jcp.org/images/global/bar_green.gif",
            "https://www.jcp.org/images/global/bar_green.gif",
            "https://www.jcp.org/images/global/spacer.gif",
            "https://www.jcp.org/images/spacer.gif",
            "https://www.jcp.org/images/common/logo_oracle_footer.gif",
            "https://www.jcp.org/images/spacer.gif"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": null,
        "text": "JSRs: Java Specification Requests\n\nJSR 210: OSS Service Quality Management API\n\nStage Access Start Finish Withdrawn 23 May, 2012 Proposed Final Draft Download page 21 Dec, 2007 Public Review Ballot View results 16 Jan, 2007 22 Jan, 2007 Public Review Download page 19 Dec, 2006 22 Jan, 2007 Early Draft Review Download page 25 Aug, 2004 24 Sep, 2004 Expert Group Formation 01 Apr, 2003 19 Mar, 2004 JSR Review Ballot View results 18 Mar, 2003 31 Mar, 2003\n\nStatus: Withdrawn\n\nReason: The API has been completed and contributed to TMF and there is no reason to continue with the JSR.\n\nJCP version in use: 2.6\n\nJava Specification Participation Agreement version in use: 2.0\n\nDescription:\n\nProvide an API via the OSS through Java initiative that allows telecom management applications to be developed and integrated with Java-enabled Service Quality Management Systems.\n\nPlease direct comments on this JSR to the Spec Lead(s)\n\nSpecification Leads Thierry Supplisson IBM Expert Group ADC Agarwal, Niraj Hewlett-Packard IBM Instituto de Telecomunicacoes Mahindra British Telecom Ltd. Motorola Nokia Corporation Sun Microsystems, Inc. Watchmark Corporation\n\nThis JSR has been Withdrawn\n\nReason: The API has been completed and contributed to TMF and there is no reason to continue with the JSR.\n\nThe following information has been updated from the original proposal.\n\n2006.06.16:\n\nSpecification Lead: Thierry Supplisson\n\nE-Mail Address: thierry.supplisson @vallent.com\n\nTelephone Number: +353 21 730 6079\n\nFax Number: +353 21 730 6024\n\nOriginal Java Specification Request (JSR)\n\nIdentification | Request | Contributions\n\nSection 1. Identification\n\nSubmitting Member: Watchmark Corporation\n\nName of Contact Person: Eric Dillon\n\nE-Mail Address: eric.dillon @watchmark.com\n\nTelephone Number: +1 425 564 8038\n\nFax Number: +1 425 564 8001\n\nSpecification Lead: Francois Gauthier\n\nE-Mail Address: francois.gauthier @watchmark.com\n\nTelephone Number: +1 425 564 8113\n\nFax Number: +1 425 564 8001\n\nInitial Expert Group Membership:\n\nWatchmark Corporation\n\nNokia Corporation\n\nMotorola\n\nSupporting this JSR:\n\nMetaSolv Software, Inc.\n\nTelcordia Technologies, Inc.\n\nNokia Corporation\n\nMotorola\n\nSection 2: Request\n\n2.1 Please describe the proposed Specification:\n\nWithin an Operation Support System (OSS), a Service Quality Management (SQM) application is responsible for monitoring the overall delivered quality of a service, at the service level as experienced by a customer.\n\nA number of Service Quality Management products are available on the market but they are all used through different sets of APIs necessitating custom integration into an OSS. The goal of this JSR is to define a standardized API based on J2EE, that will permit rapid deployment and integration of SQM products.\n\nFrom a high level, Service Quality Management is achieved through comparison of service related Quality Indicators based on network-related data as well as on non-network-related data, against Service Quality Objectives. When the objective is not met anymore (threshold is crossed, e.g.), the SQM application reports a violation so that the Service Quality can be compared against Service Level Agreements (SLA) between the customers and the service provider.\n\nThe proposed SQM API is intended to implement the interface between an SQM application and an SLA application. To that extend the following functional requirements shall be met by the SQM API:\n\n- allowing clients to create, update, delete and query quality objects (Quality Indicators and aggregated performance/usage data)\n\n- allowing clients to create, update, delete and query objective objects (Service Objectives)\n\n- allowing clients to subscribe for notifications on objective violation events (Service Objectives being compromised, e.g.)\n\n- allowing clients to subscribe for notifications on availability of new quality data.\n\nThis API will leverage the OSS/J defined design guidelines 1.1 (available with JSR 144).\n\nNote: The expert group will focus on the design of an API targeting Quality Management at the Service level. It shall also assess the relevance of this same API for a Process Quality Management scope.\n\n2.2 What is the target Java platform? (i.e., desktop, server, personal, embedded, card, etc.)\n\nJava 2 Platform, Enterprise Edition\n\n2.3 What need of the Java community will be addressed by the proposed specification?\n\nA number of software developers in the telecommunication industry are already using EJB components for their next-generation OSS software. Without some standardization conventions for these components, the industry runs the risk of proliferating similar components with slightly different APIs. Hence, standardizing these component APIs through a Java community process is an attractive proposition.\n\n2.4 Why isn't this need met by existing specifications?\n\nCurrently, no existing Java platform specification provides a standard API for OSS Service Quality Management (SQM) components. Existing SQM APIs are generally vendor-proprietary.\n\n2.5 Please give a short description of the underlying technology or technologies:\n\nThe OSS Service Quality Management API will be defined on top of J2EE. The most important J2EE APIs for this JCP will be the following:\n\n- EJB (Enterprise JavaBeans):\n\nTo facilitate the integration of OSS components, the expert group will define standard EJB interfaces.\n\n- JMS (Java Message Service):\n\nBesides the ability to execute synchronous (EJB) methods calls, there is also a need to send asynchronous messages. For this, JMS will be used.\n\n- JNDI (Java Naming and Directory Interface):\n\nThe specification will include standards for JNDI names.\n\n- XML:\n\nThe definitions for orders and services will make use of XML.\n\n2.6 Is there a proposed package name for the API Specification? (i.e., javapi.something, org.something, etc.)\n\nThe API will have one or several packages and the prefix for all packages is \"javax.oss\". The remaining part of the package name will be defined according to a logical name for different parts of the API. The following are some of the proposed names:\n\njavax.oss\n\njavax.oss.sqm\n\nThe prefix \"javax.oss\" will be used in all OSS JSRs, including those recently submitted. Package names of all OSS JSRs will be coordinated by the OSS/J Common Team and/or Architecture Board to avoid ambiguous or conflicting package names.\n\n2.7 Does the proposed specification have any dependencies on specific operating systems, CPUs, or I/O devices that you know of?\n\nThe specification has no dependency on operating systems, CPUs, or I/O devices.\n\n2.8 Are there any security issues that cannot be addressed by the current security model?\n\nNone anticipated.\n\n2.9 Are there any internationalization or localization issues?\n\nNone anticipated.\n\n2.10 Are there any existing specifications that might be rendered obsolete, deprecated, or in need of revision as a result of this work?\n\nNone anticipated.\n\n2.11 Please describe the anticipated schedule for the development of this specification.\n\nThe expected schedule for this specification is about 12 months and the major milestones in the project are listed below:\n\nSpec Community Draft: July 2003\n\nSpec Public Draft: Septembre 2003\n\nSpec Proposed Final Draft: 4Q2003\n\nSpec Final Release: 1Q2004\n\nThese dates are subject to change.\n\n2.12 Please describe the anticipated working model for the Expert Group working on developing this specification.\n\nOnce this JSR is approved, and the expert group is formed, a baseline specification will be created by a process of analyzing and comparing existing proprietary APIs, and this will be developed iteratively by the Expert Group using email and telephone conferencing as the primary mechanisms.\n\n2.13 Please describe how the RI and TCK will de delivered, i.e. as part of a profile or platform edition, or stand-alone, or both. Include version information for the profile or platform in your answer.\n\nThe RI and TCK will be delivered according to the OSS Through Java Initiative guidelines.\n\n2.14 Please state the rationale if previous versions are available stand-alone and you are now proposing in 2.13 to only deliver RI and TCK as part of a profile or platform edition (See sections 1.1.5 and 1.1.6 of the JCP 2 document).\n\nN/A\n\n2.15 Please provide a description of the business terms for the Specification, RI and TCK that will apply when this JSR is final.\n\nThe Specification, RI and TCK will be available for download from the OSS through Java Initiative website following the same model as existing OSS/J APIs\n\nSection 3: Contributions\n\n3.1 Please list any existing documents, specifications, or implementations that describe the technology. Please include links to the documents if they are publicly available.\n\n- The 3GPP (http://www.3gpp.org/) is developing standards for 3G telecommunication networks. These recommendations can be retrieved from 3GPP web site. 3GPP Standards relevant to the OSS SQM API are\n\nTS 32.101\n\nTS 32.102\n\nTS 32.111-x\n\nTS 32.401/402/403\n\nWork within 3GPP is done in an open fashion; there are a number of versions of each specification available. The current 3GPP release set is release 5. The 3GPP SA5 documents can be accessed here.\n\n- The TeleManagement Forum (http://www.tmforum.org) has developed standards for Telecom Management. These recommendations can be retrieved from TMF web site. The TeleManagement Forum has done substantial work in the area of service quality management. Relevant TMF specifications/documents are\n\n- Service Quality Management Business Agreement - TMF506 v1.5\n\n- Service Quality Management for IMT 2000 Catalyst Interface Implementation Specification - TMF803 v2.1\n\n- Wireless Services Measurements Handbook - GB923 v1.5\n\n- Service Level Agreement Management Handbook - GB917 v1.5\n\n- The ITU-T (http://www.itu.int) has developed standards Telecom Management. The M-Series recommendation have some relevant information. These recommendations can be bought from ITU-T web site.\n\n3.2 Explanation of how these items might be used as a starting point for the work.\n\nThe design of the SQM API will follow this already existing work In an effort to produce industry standard for inter-operability. When possible, existing standard and format should be considered and leveraged into the SQM API."
    }
}