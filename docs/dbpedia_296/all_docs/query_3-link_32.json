{
    "id": "dbpedia_296_3",
    "rank": 32,
    "data": {
        "url": "https://www.linkedin.com/posts/genesis-egypt_gamedev-unity-continuouslearning-activity-7146547398125817856-ahl_",
        "read_more_link": "",
        "language": "en",
        "title": "Genesis Creations S.A.E on LinkedIn: #gamedev #unity #continuouslearning #employeeappreciation",
        "top_image": "https://media.licdn.com/dms/image/D4D22AQHWN127XlAuJw/feedshare-shrink_2048_1536/0/1703864911950?e=2147483647&v=beta&t=mVjYdM7jxwPwBVtBUbgxsPf-B4av5i1MkVtzQ7yLAhM",
        "meta_img": "https://media.licdn.com/dms/image/D4D22AQHWN127XlAuJw/feedshare-shrink_2048_1536/0/1703864911950?e=2147483647&v=beta&t=mVjYdM7jxwPwBVtBUbgxsPf-B4av5i1MkVtzQ7yLAhM",
        "images": [
            "https://media.licdn.com/dms/image/v2/D4D3DAQH_NVtpzoYmvg/image-scale_191_1128/image-scale_191_1128/0/1712611747792/genesis_egypt_cover?e=2147483647&v=beta&t=sisLEyG2HPDwSjpFswImukmu1-iGjmbGC4ESPU_Ei-Q"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Genesis Creations S.A.E"
        ],
        "publish_date": "2023-12-29T17:07:56.113000+00:00",
        "summary": "",
        "meta_description": "üåü Big shoutout to Ziad K. Elshereif  for their dedication to learning and growth! üöÄüéÆ\n\nAt Genesis Creations S.A.E, we admire proactive learning. Ziad‚Äôs‚Ä¶",
        "meta_lang": "en",
        "meta_favicon": "https://static.licdn.com/aero-v1/sc/h/al2o9zrvru7aqj8e1x2rzsrca",
        "meta_site_name": "",
        "canonical_link": "https://www.linkedin.com/posts/genesis-egypt_gamedev-unity-continuouslearning-activity-7146547398125817856-ahl_",
        "text": "Just wrapped up \"Game Development Patterns with Unity 2021\" by David Baron, and what a game-changer! As a game developer at Genesis Creations S.A.E, I've faced my fair share of coding challenges, often wrestling with architectural solutions that led to a few questionable design decisions. That's when I realized the power of design patterns in shaping robust solutions. Seeking guidance, I explored various resources on design patterns. However, many took a generalized approach, leaving me uncertain about their application within game development‚Äîuntil I stumbled upon this gem of a book. \"Game Development Patterns with Unity 2021\" not only provided clarity but seamlessly connected the dots between design patterns and the intricate world of game development. It transformed my approach to coding by illustrating how to implement design patterns in games, completely altering my coding style. Now, organizing my code to be adaptable feels like an adventure, not a chore! This read opened my eyes to a plethora of new game design ideas using different patterns. It's a resource I'd recommend to any game dev eager to elevate their codebase! #GameDev #Unity #DesignPatterns\n\nHello, Unity commUnity!üëãüèª Today we're going to talk about MVC and MVP patterns. In Unity game development üéÆ, choosing the right architectural pattern is crucial. Today, we'll compare two very similar ones: Model-View-Controller (MVC) and Model-View-Presenter (MVP). Let's compare these patterns to understand their differences and determine the best choice for your Unity projects. Let's take a look at the components of these patterns: ‚ú≥Ô∏è Model: Data for display. ‚ú≥Ô∏è View: User interface. The only MonoBehaviour in this trio. ‚ú≥Ô∏è Controller/Presenter: Responsible for all business logic and responds to user input. ‚ú® The main difference between these two patterns lies in their connections. In the case of applying the MVC pattern, you will have more connections. In MVP, only the Presenter has a connection with the Model and View, taking all the responsibility. In MVC, besides the Controller having references to the Model and View, the View also has a reference to the Model. What does such a seemingly insignificant difference give us at first glance‚ùì ‚ú® MVP reduces coupling by having the Presenter act as a mediator between the Model and the View, simplifying testing and enhancing separation of concerns. In MVC, while the Controller handles user input and updates the Model and View, the View directly accesses the Model, potentially leading to tighter coupling and more complex relationships. ‚ú® In MVP, changes to the Model don't directly affect the View, promoting better isolation and testability. On the other hand, in MVC, changes to the Model can directly impact the View, which might lead to unexpected behaviors and maintenance challenges. In conclusion, MVP typically offers better decoupling and testability, making it suitable for larger projects or when clarity in responsibilities is paramount. MVC can be simpler to implement and understand, making it a good choice for smaller projects or when rapid development is needed. Thus, depending on the project's scale, complexity, and requirements, you can choose between MVC and MVP to achieve an optimal architectural design for your Unity game development. Sometimes, both of them can be encountered in projects. #unity #gamedev #architecture #mvc #mvp\n\nWhile No Code is mainly used for creating software and applications, some tools allow you to make games. Video games are one of the biggest entertainment industries today, so as with software development, No-Code makes it much easier. Why Choose No-Code Game Engines? ‚Üí Lower barrier to entry: No coding skills required. ‚Üí Faster prototyping: Quickly test and iterate your game ideas. ‚Üí Cost-effective: Many tools are free or inexpensive. ‚Üí Accessible to all: Supports creators of all backgrounds. Some Examples of Popular No-Code Game Engines: ‚Üí Godot: Free and open-source with extensive features. ‚Üí Construct 3: Ideal for 2D games with visual scripting. ‚Üí GDevelop: Supports both 2D and 3D game creation. ‚Üí Unreal Engine Blueprints: Powerful visual scripting within Unreal Engine. ‚Üí Game Maker: User-friendly and great for beginners. ‚Üí PICO-8: Perfect for retro-style games. ‚Üí GameGuru Max: Comprehensive tools for 3D game development. Whether you're a beginner or a seasoned professional, these tools can help you bring your game ideas to life without writing a single line of code. Will you try to create a game with these No-Code game engines? #GameDevelopment #NoCode #GameEngines\n\nLooking to Jumpstart Your Game Development? Why Buying Unity Source Codes Can Be a Game-Changer! üéÆüöÄ In the fast-paced world of game development, starting from scratch is often daunting and time-consuming. Here‚Äôs why purchasing Unity game source codes could be your best move: üëâ Faster Development: Leveraging existing codes can significantly reduce your game's time to market. üëâ Learning Opportunity: Analyzing and modifying advanced code is a phenomenal way to enhance your coding skills. üëâ Cost Efficiency: Invest in assets, not just development. Save resources by adapting pre-built frameworks to your needs. I remember when I first started in game development, purchasing a Unity source code for a side project not only saved me weeks of initial development but also improved my understanding of robust coding practices. This head start was instrumental in launching my own custom features sooner than planned. Curious to explore some top-tier source codes? Check out üåê https://gameosophy.net/ for a variety of options! üì£ **Engage & Share:** What‚Äôs your take on buying vs. building game codes? Ever had an experience with source codes boosting your project? Drop your insights below! üëá #Unity3D #GameDevelopment #IndieDev #UnityAssets #GameDesign #DevCommunity #Coding #GameDev #Programming #TechTalks\n\nMy opinion on Godot 4 as a game engine has shifted from \"seems interesting\" to \"would recommend.\" For small-scale projects, it has what you need. If you want to go deeper, this is the book that got me up to speed on its concepts and architecture. I recommend it as well, especially for experienced developers. Plus! I can't overstate the value of source code access. I've personally detonated Unity's physics engine in a production environment, to the point where the only answer was a source code fix... source code I didn't have access to! Implementing a jury-rigged solution cost the company tens of thousands of dollars in design, development, testing, and iteration time. With Godot, I could have actually, you know, fixed it. #books #gamedevelopment #godot #unity\n\nAt times, it may seem like not much is happening, but don't be fooled. What you're watching represents three to four days of dedicated work, spanning various topics and features. You might find it hard to believe, but my coding was nearly flawless, except for one persistent Unity error that eluded me for two days. The challenge revolved around a seemingly minor detail: getting that counter to move smoothly downward. This experience underscores the importance of patience in game development. Progress may seem incremental, but I'm steadily moving forward. #unity3d #unity2d #unitydeveloper #gamedevelopment #Csharp\n\nüïπÔ∏è Calling all Unity game developers! üöÄ Are you on the hunt for top-notch open-source projects on GitHub to enhance your game development skills? Look no further! Here are some fantastic repositories to explore: Unity Technologies - Official Repository: Start with Unity's own GitHub account, which hosts various Unity-related projects and samples. DOTween: A fast, efficient, and powerful animation and tweening engine for Unity. Procedural Cave Generation: Explore procedural level generation with this fascinating cave generation project. Ultimate Game Music Collection: A collection of high-quality, royalty-free music and sound effects for your games. Unity-Technologies/ml-agents: Get into machine learning for Unity with this repository for reinforcement learning and AI. Dungeon Architect: Dive into procedural dungeon generation with this Unity project. ShaderGraph Experiments: Learn shader development with these Shader Graph experiments and examples. 2DGameKit: A complete project to help you create 2D games in Unity, complete with assets and code. Unity-Technologies/Guiding-Lights: Discover how to create stunning visual effects with this repository. GDevelop: Not Unity, but an open-source game development platform you can explore for 2D game creation. These open-source projects offer valuable resources, code samples, and insights that can significantly boost your game development journey. Give them a try and level up your Unity skills! #Unity #GameDevelopment #OpenSource #GitHub #IndieDev #GameDev #UnityProjects\n\nüöÄ Excited to share Part 1/3 of my first game development journey using Unity and Visual Studio! üéÆ Today, I started creating a basic \"flap\" game featuring my character, Chika. The initial framework is now complete, and I'm thrilled to see how this project evolves over the next few days. Technical Approach: üîß Game Engine: Unity for its robust 2D game development capabilities. üíª IDE:Visual Studio for coding and debugging. üé® Character Creation:Designed Chika using Unity's sprite editor. üïπÔ∏è Game Mechanics: Implemented basic movement and collision detection for Chika. üìú Scripting: Used C# to handle game logic and interactions. Highlights of Day 1: 1. Set up the Unity project and configured the basic settings. 2. Created and imported Chika‚Äôs sprite into Unity. 3. Developed the initial game mechanics to allow Chika to flap and navigate the game environment. 4. Ensured smooth collision detection to make the game challenging yet fun. #What's #Next? üîú Over the next few days, I'll be working on: - Adding more interactive elements and obstacles. - Implementing scoring and game-over logic. - Enhancing the game's visual and sound effects. - Testing and refining the game for a seamless player experience. Game development has always been a dream of mine, and this project is a significant step towards making it a reality. üí™ I'm learning a lot and having fun along the way. Stay tuned for more updates and the final reveal in a few days! #GameDevelopment #Unity #VisualStudio #IndieGameDev #FirstGame #Coding #Programming #Tech #GamingCommunity #GameDesign #Developers #Chika #FlapGame #LearningJourney #TechInnovation #SoftwareDevelopment #STEM #ProudMoment\n\nExcited to share my first 2D game project: Slip Box! üéÆ Slip Box is an addictive and challenging game where you control a small, agile box navigating through a series of obstacles. The objective? Avoid the obstacles for as long as possible! The game tests your reflexes and coordination as you maneuver through an ever-changing landscape of hazards. Genre: 2D Arcade Here's a breakdown of the tools and technologies I used to bring Slip Box to life: üõ†Ô∏è Unity: Leveraged the powerful Unity game development engine to create the core 2D gameplay mechanics, including collision detection and responsive controls. üíª C#: Utilized C# as the primary programming language for scripting game logic, handling player movement, obstacle generation, and overall game state management. üì± Accelerometer: Integrated the device's accelerometer to detect tilt, providing intuitive tilt-based controls for a seamless and immersive gameplay experience. üé® Animations: Incorporated smooth and dynamic animations to enhance the visual appeal and provide feedback for player actions. üîä Sound Effects: Added engaging sound effects to create an immersive audio experience, making the game more interactive and enjoyable. üîß Unity Editor: Used the Unity Editor as an integrated development environment to design levels, import assets, and test the game thoroughly. Slip Box has been an incredible learning experience, and I‚Äôm thrilled to share it with you all. This project helped me hone my skills in game development, from conceptualization to execution, and I‚Äôm eager to apply these skills to future projects."
    }
}