{
    "id": "dbpedia_3214_3",
    "rank": 89,
    "data": {
        "url": "https://dokumen.pub/inside-the-video-game-industry-1nbsped-0415828287-978-0415828284.html",
        "read_more_link": "",
        "language": "en",
        "title": "Inside the Video Game Industry [1&nbsp;ed.] 0415828287, 978",
        "top_image": "https://dokumen.pub/img/inside-the-video-game-industry-1nbsped-0415828287-978-0415828284.jpg",
        "meta_img": "https://dokumen.pub/img/inside-the-video-game-industry-1nbsped-0415828287-978-0415828284.jpg",
        "images": [
            "https://dokumen.pub/dokumenpub/assets/img/dokumenpub_logo.png",
            "https://dokumen.pub/img/200x200/the-chinese-video-game-industry-3031415035-9783031415036.jpg",
            "https://dokumen.pub/img/200x200/a-precarious-game-the-illusion-of-dream-jobs-in-the-video-game-industry-9781501746543.jpg",
            "https://dokumen.pub/img/200x200/video-game-careers-demystified.jpg",
            "https://dokumen.pub/img/200x200/the-medium-of-the-video-game-9780292745131.jpg",
            "https://dokumen.pub/img/200x200/press-reset-ruin-and-recovery-in-the-video-game-industry-2020054028-9781538735497-9781538735480.jpg",
            "https://dokumen.pub/img/200x200/the-japanese-adult-video-industry-9780415703789-9780203762493.jpg",
            "https://dokumen.pub/img/200x200/the-chinese-video-game-industry-palgrave-games-in-context-3031415035-9783031415036.jpg",
            "https://dokumen.pub/img/200x200/aesthetic-theory-and-the-video-game-9780719077180.jpg",
            "https://dokumen.pub/img/200x200/how-to-play-a-video-game-9781877551314.jpg",
            "https://dokumen.pub/img/200x200/go-play-inside-what-video-games-can-teach-us-about-the-game-of-life-9781991205353-9781991205360-9781991205377.jpg",
            "https://dokumen.pub/img/200x200/inside-the-video-game-industry-1nbsped-0415828287-978-0415828284.jpg",
            "https://dokumen.pub/dokumenpub/assets/img/dokumenpub_logo.png"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "...",
        "meta_lang": "en",
        "meta_favicon": "https://dokumen.pub/dokumenpub/assets/img/apple-icon-57x57.png",
        "meta_site_name": "dokumen.pub",
        "canonical_link": "https://dokumen.pub/inside-the-video-game-industry-1nbsped-0415828287-978-0415828284.html",
        "text": "Citation preview\n\nInside the Video Game Industry\n\nInside the Video Game Industry oﬀers a provocative look into one of today’s most dynamic and creative businesses. Through in-depth structured interviews, industry professionals discuss their roles, providing invaluable insight into game programming, art, animation, design, production, quality assurance, audio, and business professions. From hiring and ﬁring conventions, attitudes about gender disparity, goals for work–life balance, and a span of legal, psychological, and communal intellectual property protection mechanisms, the book’s combination of accessible industry talk and incisive thematic overviews is ideal for anyone interested in games as a global industry, a site of cultural study, or a prospective career path. Designed for researchers, educators, and students, this book provides a critical perspective on an often opaque business and its highly mobile workforce. Additional teaching materials, including activities and study questions, can be found at https://www.routledge.com/.\n\nInside the Video Game Industry GameDevelopersTalkAbout theBusinessofPlay\n\nJudd Ethan Ruggill, Ken S. McAllister, Randy Nichols, and Ryan Kaufman\n\nFirst published  by Routledge  Third Avenue, New York, NY  and by Routledge  Park Square, Milton Park, Abingdon, Oxon OX RN Routledge is an imprint of the Taylor & Francis Group, an Informa business ©  Taylor & Francis The right of Judd Ethan Ruggill, Ken S. McAllister, Randy Nichols, and Ryan Kaufman to be identiﬁed as authors of this work has been asserted by them in accordance with sections  and  of the Copyright, Designs and Patents Act . All rights reserved. No part of this book may be reprinted or reproduced or utilised in any form or by any electronic, mechanical, or other means, now known or hereafter invented, including photocopying and recording, or in any information storage or retrieval system, without permission in writing from the publishers. Trademark notice: Product or corporate names may be trademarks or registered trademarks, and are used only for identiﬁcation and explanation without intent to infringe. Library of Congress Cataloging in Publication Data Names: Ruggill, Judd Ethan, editor. | McAllister, Ken S., – editor. | Nichols, Randall K., editor. | Kaufman, Ryan, editor. Title: Inside the video game industry : game developers talk about the business of play / edited by Judd Ethan Ruggill, Ken S. McAllister, Randy Nichols, and Ryan Kaufman. Description: New York : Routledge is an imprint of the Taylor & Francis Group, an Informa Business, [] | Includes index. Identiﬁers: LCCN  | ISBN  (hardback) | ISBN  (pbk.) | ISBN  (ebk) Subjects: LCSH: Video games industry. | Video games—Design. | Video games— Marketing. Classiﬁcation: LCC HD.E I  | DDC ./—dc LC record available at https://lccn.loc.gov/ ISBN: ---- (hbk) ISBN: ---- (pbk) ISBN: ---- (ebk) Typeset in Warnock Pro by Apex CoVantage, LLC\n\nContents Acknowledgments Author Bios vii\n\nIntroduction\n\nvi\n\n1\n\nProgramming Art\n\n12\n\n72\n\nDesign\n\n130\n\nProducing\n\n173\n\nQuality Assurance Audio\n\n255\n\nBusiness\n\n292\n\nConclusion Index\n\n213\n\n368\n\n\n\nv\n\nAcknowledgments We are very grateful to the following people and groups for their interest in, assistance with, and/or support of this project: Suellen Adams, Toni Alexander, Derek Bambauer, Matthew Beale, Megan Boeshart, Maury Brown, Mike Bruck, Bill Carroll, Bryan Carter, Kate Chaterdon, Tobias Conradi, Steven Conway, José Cortez, Zuleima Cota, Adam Crowley, Michael DeAnda, Jennifer deWinter, Jason Dewland, Gwen Downey, Javier Duran, Lyn Duran, Alain-Philippe Durand, Richard Edmiston, James Fleury, Sarah Elizabeth Fredericks, Jeremy Frumkin, Cynthia Gaﬀney, Ron and Elizabeth Gard, Angelia Giannone, Jason Gill, Harrison Gish, Daniel Griﬃn, Diane Gruber, Alexander Halavais, Chris Hanson, Bryan Hartzheim, Kati Heljakka, Gina Hernandez, Justine Hernandez, Zachary Hill, Nina Huntemann, Antonnet Johnson, Kim Jones, Jeﬀrey Kassing, Douglas Kelley, Barbara Kienzle, Carly Kocurek, Aynne Kokus, Kyounghee Kwon, Owen Leach, Jamie Lee, Adela Licona, Jonathan Madog, Megan McKittrick, Lindsey Mean, Marijel Maggie Melo, Kevin Moberly, Ryan Moeller, Mia Moran, Majia Nadesan, Jennifer Nichols, Jude Nicholson, Rolf Nohr, Dean O’Donnell, David O’Grady, Marc Ouellette, Jessica Paxton, Matt Payne, Anushka Peres, Ramsey Eric Ramsey, Roberto Reyes, Reneé Helen Reynolds, Quentin Rezin, Dave Rick, Theo Rohle, Lorenia Romero, Jane Ruggill, Robert Ruggill, Marjorie Sanders, Chris Schlerf, Ron Scott, Charles Watkins Scruggs III, Alice Srubas, Rachel Srubas, Deborah Spargur, Jason Thompson, Sam Tobin, Celeste Leigh Helen Trimble, Marlene Tromp, the ﬁne folks at the University of Arizona James E. Rogers College of Law Intellectual Property and Entrepreneurship Clinic, Stephanie Vie, Jeremiah Webb, Bonnie Wentzel, Erica Wetter, Mary Wildner-Bassett, Karen Williams, Greg Wise, Women in Games—Boston, and Josh Zimmerman.\n\nvi\n\nAuthorBios Judd Ethan Ruggill is an Associate Professor of Computational Media at the University of Arizona and co-founder and co-director of the Learning Games Initiative. He researches computer game technologies, play, and cultures, and is the co-author of Tempest: Geometries of Play and Gaming Matters: Art, Science, Magic, and the Computer Game Medium. Ken S. McAllister is a Professor of Rhetoric and Associate Dean of Research and Program Innovation for the College of Humanities at the University of Arizona. A co-founder and co-director of the Learning Games Initiative, McAllister is the author or co-author of numerous books and articles on topics ranging from game preservation to critical technology studies. Randy Nichols is an Assistant Professor in the School of Interdisciplinary Arts and Sciences at the University of Washington Tacoma. His research has focused on understanding the political economy of the video game industry and its intersections with other cultural industries. Ryan Kaufman began his career at LucasArts Entertainment, and for ten years worked as a tester, designer, and content supervisor on games such as Full Throttle, Star Wars: Rogue Squadron N, and Star Wars: Republic Commando. He is currently Director of Design at Telltale Games, contributing to titles including The Walking Dead, The Wolf Among Us, and Game of Thrones.\n\nvii\n\nIntroduction\n\nWhen it comes to its inner workings, the normally voluble video game industry is remarkably silent. Like in a hot dog factory, the ﬁnished product is everything, while the creative process leading to that product is nothing— or at least nothing to be shared openly with the public. As a result, there is precious little information available to those interested in the business and labor of electronic play. This is not to say, however, that there is a paucity of information about getting a job in game development. On the contrary, seemingly dozens of books are produced each year that purport to proﬀer insider secrets and commonsense career advice about how to break into the industry, whether one is a programmer, musician, artist, or designer. Almost all of these guides include short interviews, extended pull quotes, or short anecdotes by well-known professionals, and they all directly or indirectly characterize the nature of making games for a living. Such books rarely, however, convey much information about the actual dayto-day work of game development, and they say almost nothing at all about how that work is secured, funded, organized, outsourced, iterated, and ultimately either shipped or shut down. Rather, they tend to explain how to gain employment, not what it is like to stay employed. As a result, potential workers—and people who study games and the creative and corporate environments from which they emerge—have an exceptionally narrow view of\n\n\n\n\n\nIntroduction\n\nthis world, with glimpses of its inner workings only when stories such as “EA Spouse” or “Gamergate” hit the mainstream press. The view is obscured further still by the fact that the game industry is supremely competitive. Even the largest companies may have slender proﬁt margins, making intellectual property protection and its attendant selfimposed silences more doctrine than custom. Readers of this book will almost certainly come to wonder about the necessity of such secrecy. To us, it remains an open question; not only is the game market rapidly expanding globally—meaning that the zero-sum assumption driving much of this proﬁt competition is suspect—but there are also signiﬁcant marketplaces where a hyper-competitive stance is discouraged. Among these more open peers, game developers tend to be quite free in the ways they share corporate resources and information. They compare notes on how quality of life and team structure diﬀer from company to company, and they exchange ideas and production techniques in ways that would almost certainly trouble their respective public relations and legal department counterparts working in more litigious countries. What is particularly curious—perhaps even concerning—is that such information exchange is actually vitally important everywhere. The game industry is one in which job migrations are commonplace, whether due to greener pastures, personal needs, or professional necessity. Factors such as these routinely trump even the most terrifying pre-hire and severance contracts, creating a kind of dark network in which dialogue about changes in the industry emerges according to an unwritten code that guides insiders’ career decisions not through published books but through barroom conversations and private messages. In addition to discussions about career options, game developers are also justiﬁably proud of what they do, so discussing their latest breakthrough with industry colleagues is understood to be a mutually beneﬁcial activity, an opportunity for inspiration to fuel innovation. Such conversations happen casually most of the time, but there are also occasions for more formal collaborations and revelations, through presentations and postmortems at industry events such as the Penny Arcade Exposition (PAX) and the Game Developers Conference (GDC), as well as in trade-oriented websites like Gamasutra. Thus, access to intelligence about the game industry unfolds along a continuum, from the most public of social media exposés to the most covert late-night rendezvous. One consequence of this protectionism, at least in the markets where workplace secrecy approaches the acuteness of national security, is that the game\n\nIntroduction\n\n\n\nindustry’s immense public relations apparatuses must work hard to ﬁll the resulting silence with shameless and excessive PR and point-of-sale promotion. Eﬀorts like these eﬀectively crowd out the possibility of candid insights into how the industry actually operates. It is also frustrating that the spirit of sharing so often valued by individuals in the game industry is commonly bracketed oﬀ from curious outsiders. A common anecdotal notion within the industry holds that this attitude stems from game development’s roots in hacker culture, where insider bragging and sharing is encouraged, but outsider involvement is highly suspect and to be avoided. In our experience, most developers think deeply about what they do and how they do it, even though it can be diﬃcult to observe this intellectual, critical, and creative work when one peers through the cracks between the fence boards surrounding the general game development project. This book aims to pry at least a few of these fence boards loose so as to allow a wider view of how the game industry works on a daily basis for a relatively wide range of personnel. In general, we seek to clarify for our colleagues and ourselves the contemporary experience of game work. Our speciﬁc goal is to illuminate the industrial labor of the proverbial factory ﬂoor, and in the process relate some of the notable ways in which game workers conceptualize their jobs. Accordingly, we have gone straight to the source: this book contains eighteen critical interviews with professionals from across the industrial spectrum and with a wide variety of experience. All of the major game development disciplines are represented (programming, art, design, producing, quality assurance, audio, and business), as are the major market segments (individual contractor, independent studio, midsize studio, AAA studio) and geographies (North America, Europe, Australia). One notable exception to our investigations was Japanese studios, which, as we indicate below, proved uniquely diﬃcult to coordinate with. In terms of gender diversity, the interviewees roughly reﬂect the industry’s demographics (Weststar and Legault), though we would have preferred a more proactive balance had we been able to arrange it. The interviews are broad in scope but narrow in focus, concentrating on labor issues and how they elucidate industrial economics, corporate/company structures, gender topographies, hiring and ﬁring practices, marketing strategies, workplace practices, and other integral but often mystiﬁed mechanisms of game development. Each interview is preceded by a biographical sketch of the interviewee, and the interviews are grouped according to development discipline. Each discipline\n\n\n\nIntroduction\n\nis introduced with an explication of the job type, contains at minimum two interviews—generally one from a staﬀer and one from the game industry’s equivalent of an executive from that type—and concludes with a discussion of the interviews and what they mean for understanding industrial game production. Disciplines with notable subdisciplines (e.g., animation tends to fall under the broader umbrella of art) or with deep leadership structures (e.g., programming) contain additional interviews to attend to that breadth. Importantly, this book is intended for readers interested in the critical study of video games. It is not designed to entertain game aﬁcionados or instruct students on how to navigate the job market successfully—by far the two most common rationales for giving game industry insiders a venue for their professional reﬂections and observations. That said, we would hope that both groups will ﬁnd elements of interest and import in these interviews and analyses. We expressly downplay—and even reject, to a certain extent—the apprenticeship and fan approaches to labor that the game industry promotes. We did not produce this book to celebrate the industry but to explore it, and we believe that even potential new employees within the industry may well beneﬁt from becoming more familiar with what their professional future might look like. We also want to emphasize that this is not an ethnography, at least not in any comprehensive sense. To be sure, there are a number of features reminiscent of ethnographic research here: interviews, emic (i.e., insider) descriptions of local practices, historical investigation, critical cultural analysis, and a set of co-created workplace narratives that emerged through our iterative interview process. We even had direct access to an industrial worksite through our co-author Ryan Kaufman, a longtime game developer. Despite these similarities, however, Inside the Video Game Industry is what might be more fairly called a proto-ethnography. Assembled here are relatively detailed stories of life in the game industry oﬀered by the people who live them, as well as a series of critical and interpretive reﬂections on those stories and their multivalent interconnections. What we do not provide is a detailed interpretation of the “webs of signiﬁcance” (as Cliﬀord Geertz would say) that these stories present, and which would be a hallmark of a fully formed ethnographic study. What we hope is that the work in this book will present some points of traction for readers who may be considering an ethnographic study of the game industry but are perhaps uncertain about where to begin or what signiﬁcant industrial issues might be best investigated through the use of such a research method.\n\nIntroduction\n\n\n\nIn light of these limitations, we make no pretense toward plenitude with this volume. In fact, two outstanding lacunae are publication and distribution. Publishers and distributors—who are sometimes one and the same entity (e.g., Valve Corporation)—are arguably the most important agents in the game industry, controlling as they do the means of production (i.e., money) and distribution. And yet, publishers and distributors are not typically considered game developers, at least not to industry information outlets such as Gamasutra, which accords neither group a distinctive category in its annual salary survey (“Transitions”). While there is excellent academic research on game production and distribution generally, it orbits primarily at the macro level, detailing an entrenched and highly concentrated market structure consisting of hardware production, software development, software publication, and retail sales (De Prato et al.; Kerr; McCrea; Nichols; Peréz Fernández; Portnow et al.; Sandqvist; Šisler; Williams; Zackariasson and Wilson). Just as with programming, art, design, producing, quality assurance, audio, and business—all covered in the present volume—the labor of game publication and distribution demands a close examination, but they are beyond scope of this book. Another important clariﬁcation about this project is that it is not free from industrial inﬂuence. On the contrary, the interviews were sanctioned and vetted by the interviewees and their corporate higher-ups (and/or legal representatives) prior to publication. Such approval was necessary for both the interviews and their attribution; without it, even the most willing and loquacious of developers would have been diﬃcult (if not impossible) to engage, and in fact we had a number of potential interviewees who were unable to participate in the project for precisely this reason. We also had interviewees and/or their companies pull interviews during the review stage for reasons (that seem to us) alternately reasonable and ridiculous. The truth of the matter is that the game industry and many of its laborers are simply too careful with their ideas and reputations to chance unwanted exposure, even when that exposure is for public beneﬁt and guided by university professors who are legally and ethically bound by copious, detailed, and inviolable institutional review board requirements. For the industry, however, the risks are too high, the margins too slim, and the future too uncertain to gamble. To an extent, we understand this concern, in spite of our personal interest in and professional obligation to the acts of discovery and knowledge production. And because we very much wanted attributable data, we accepted the recommendations of our industrial advisors and developed a data collection strategy that integrated a measure of corporate control over the\n\n\n\nIntroduction\n\ncontent of our primary material while preserving full autonomy over the critical and editorial elements of the project. In our estimation, such primary data, though stamped with their respective corporate imprimaturs, ultimately feel more credible than anonymized or pseudonymized information, if only because in the context of video games one can actually play the games the interviewees worked on instead of just imagining what they might be like or gazing at them through the prescribed lens of a company’s marketing machine. With attributed interviews, readers can peer into the game medium itself and see the tool marks of speciﬁc makers—makers who readers have come to know through these extended critical interviews. Attribution, in other words, allows for a more intimate understanding of the human face of game production, a face often obscured by industrial practice and predilection. Attribution is also important for trust. If the game industry is to open up to researchers in ways other media industries have—and we hope that it will, to the beneﬁt of scholars and developers both—it needs to be able to trust its interlocutors. Allowing the industry to have input on its image seemed to us a reasonable accommodation in the service of facilitating that trust. This is not to say that we abdicated our scholarly responsibilities and became corporate shills during the course of this project; one need only read the interviews and our analyses to see that our critical priorities are wholly intact and well in the foreground. Rather, we felt that corporate review was a price we were willing to pay for access and attribution. Along this same line, it is important to remember that this book is the product of an academic/industry partnership. While three of us are university professors (Ruggill, McAllister, and Nichols), the fourth (Kaufman) is a game developer. He has worked in the industry since the mid-s and is now Director of Design for one of the most critically and commercially acclaimed game companies in North America, Telltale Games. Consequently, this book is a hybrid of academic and industry epistemologies, interests, communications, and concerns. It occupies neither sphere completely nor comfortably, a quality we see as a strength. Indeed, we are excited about the possibilities of future academic/industry knowledge making of this kind and the insights it might bring, and we view this book as a small but important ﬁrst step (for us) in that direction. Before concluding, a few words about our process of data collection are in order. The interviews contained in this book are semi-structured and draw\n\nIntroduction\n\n\n\nfrom both written and oral interactions. Based on our research and on interviews we had conducted previously (Nichols; McAllister and Ruggill; Ruggill and McAllister), we expected certain motifs to pepper the interactions: staﬃng structures, collaboration, unionization, ownership dynamics, project workﬂow, outsourcing, career trajectories, and recruitment and retention. Therefore, while we approached each interview as unique and organic, allowing the conversation to evolve according to the interests and orientation of the interviewees, there were certain questions we asked of everyone based on our expectations and on our desire to establish a distinctive and shared foundation to our inquiries and the book in general. The stock questions we asked were: . What are the most signiﬁcant internal and external challenges you face in your job? . What sorts of workplace changes would you implement if given the opportunity? . How is the work you do in the game industry diﬀerent from the work you have done elsewhere? . Are there model companies or ways of working (both within and outside of the game industry) that you look to for inspiration? . What are the dominant challenges facing the industry over the next decade? . How would you describe the management structure and workﬂow in your company? . How does the workﬂow diﬀer when working on diﬀerent types of games (e.g., diﬀerent genres, AAA versus casual games, etc.)? . What are some of your notable quality of life issues and career progression issues (if any)? Not every interview includes answers to these questions. In some instances, the interviewees elected not to answer them; in others, the answers were redacted by the interviewee (or the interviewee’s corporate/legal counsel) due to non-disclosure issues or public relations optics. In still other\n\n\n\nIntroduction\n\ninstances, we exercised our editorial authority to expurgate indelicate responses for the sake of the interviewee’s job security, career opportunities, and public image. After all, this book is not meant to be a whistle-blowing tell-all about corporate intrigue, horrible bosses, and insuﬀerable coworkers— though such topics did crop up. Rather, it is intended to be an inside look into an industry that from the outside looks nubilous. On the subject of redaction, it is important to understand that all of the interviews are heavily redacted in one way or another, occasionally due to content but always due to length. There just was not enough space to include everything, even if we had wanted to and the press would have allowed it. With that in mind, we have endeavored to preserve the ﬂavor of the interviews as much as possible in our editing, even when that meant including sometimes less-than-juicy material. Our goal was to preserve the argot and authenticity—with all of the freight these terms carry—with which the developers spoke. Also, given the care with which we orchestrated the interviews ahead of time, we were surprised to discover that the process of securing ﬁnal approval to publish the interviews sometimes proved more than a little challenging. One company, for instance, invoked a standing policy whereby the company name is not to be used by employees in interviews. However, this same company also has a policy requiring employees to self-identify as such when doing any kind of public relations, creating a confusing brand identity paradox and obliging us to work with the interviewee and company to suss out exactly what would constitute compliance (both, as it turned out, were to be enforced). There were other curious interactions surrounding the “need for appropriate messaging,” as one interviewee described it, including several interviews that were so heavily redacted upon review as to be completely unusable. In these instances we were reminded of Captain John Yossarian’s censoring of military letters in Joseph Heller’s Catch-, where only the salutations were left unexpurgated. In less drastic cases, our back-and-forth exchanges took more than a year to ﬁnally gain corporate approval to publish. We can only caution researchers interested in pursuing similar kinds of industrial relationships that patience, a sense of humor, and a decent command of the law as it pertains to defamation are helpful. Additionally, the challenge of ﬁnding interviewees willing to go on record was not always only complicated because of brand management and employment concerns; sometimes it was also due to the general industrial\n\nIntroduction\n\n\n\nworkload that virtually everyone making video games experiences. Many of the developers we approached were interested in participating but were too busy, with some apologetically dropping out in the midst of the interview process because of project deadlines, changes in employer, or other workplace issues. Even the interviewees who were able to make it through to the end of the process often required creative and patient scheduling on our part. Game developers, we discovered, are busy regardless of the country or size of the studio in which they work. As we noted earlier, the challenge of the game industry’s many languages and cultures also shaped this book, most notably in the conspicuous absence of interviews with Japanese game developers. This was not for lack of trying on our part. Unlike our colleagues Aki Nakamura (Ritsumeikan University) and Bryan Hikari Hartzheim (Reitaku University), for example, whose institutional aﬃliations and knowledge of the Japanese language and customs have given them considerable access to that country’s game industry, we were unable to move any Japanese developers or their companies through the entire interview process. The eﬀects of these various challenges can be seen most clearly in the resultant interviews considered as a set. Not every position or studio is represented, clearly, though there is considerable diversity and coverage in the collective work history of the interviewees. Game developers are itinerant and their professional relationships incestuous, largely by industrial mandate. As almost every biography in this collection chronicles, to work in games means to move, sometimes leaving colleagues in one company to (re)join others at a diﬀerent one. Again, however, this book is not meant to provide a detailed accounting of the industry, nor a comprehensive critical analysis of its inner workings. To do either would require volumes, and even to try would be, to some degree, disingenuous. The game industry is neither monolithic nor standardized; its positions, practices, and practitioners vary widely depending on studio size, corporate vision, personal ambition, target market, business strategy, geography, management style, and more. To suggest otherwise would be to give the lie to a surprising truth: the game industry is in many ways quite diverse (and in other ways, not so much). There are, however, certain themes that cut across this diversity, and are capturable only in a collection such as this one. The issues of workload, quality of life, aging, and the importance of interdisciplinary communication, for example—themes that appear in virtually all of the interviews, and that together depict an industry that is both invigorating and enervating—all\n\n\n\nIntroduction\n\nemerge particularly strongly here, no matter how established the company or how long in the tooth the employee. Rather than comprehensive, then, this book is suggestive, an aerial snapshot of the industry’s workforce and its labor relations. It is intended to enable developers’ voices to be heard, not in the paradoxical isolation of a barely read personal blog, nor slicked back with frictionless Madison Avenue pomade, nor (we hope) inscrutably entombed in the discourse of academic researchers. Instead, we mean to hand the microphone to a wider variety of industry experts than is ordinarily assembled, to hear their voices, and to attend to the remarkable candor and insight that their talk reveals about the work they do every day.\n\nWORKSCITED De Prato, Giuditta, Sven Lindmark, and Jean-Paul Simon. “The Evolving European Video Game Software Ecosystem.” The Video Game Industry: Formation, Present State, and Future. Ed. Peter Zackariasson and Timothy L. Wilson. New York: Routledge, . –. Print. Fernández, Agustín Pérez. “Snapshot : Video Game Development in Argentina.” Gaming Globally: Production, Play, and Place. Ed. Nina B. Huntemann and Ben Aslinger. New York: Palgrave Macmillan, . –. Print. Geertz, Cliﬀord. The Interpretation of Cultures. New York: Basic Books, . Print. Heller, Joseph. Catch-. New York: Alfred A. Knopf, . Print. Kerr, Aphra. The Business and Culture of Video Games: Gamework/Gameplay. London: Sage, . Print. ———. “The UK and Irish Game Industries.” The Video Game Industry: Formation, Present State, and Future. Ed. Peter Zackariasson and Timothy L. Wilson. New York: Routledge, . –. Print. McAllister, Ken S., and Judd Ethan Ruggill. “On the Practice of Contemporary Computer Game Development: An Interview with Ryan Kaufman.” Journal of Media Practice . (): –. Print. McCrea, Christian. “Snapshot : Australian Video Games: The Collapse and Reconstruction of an Industry.” Gaming Globally: Production, Play, and Place. Ed. Nina B. Huntemann and Ben Aslinger. New York: Palgrave Macmillan, . –. Print.\n\nIntroduction\n\n\n\nNichols, Randy. “Ancillary Markets—Video Games: Promises and Challenges of an Emerging Industry.” The Contemporary Hollywood Film Industry. Ed. Paul McDonald and Janet Wasko. Malden: Blackwell, . –. Print. ———. “Who Plays, Who Pays? Mapping Video Game Production and Consumption Globally.” Gaming Globally: Production, Play, and Place. Ed. Nina B. Huntemann and Ben Aslinger. New York: Palgrave Macmillan, . –. Print. ———. The Video Game Business. London: British Film Institute, . Print. Portnow, James, Arthur Protasio, and Kate Donaldson. “Snapshot : Brazil: Tomorrow’s Market.” Gaming Globally: Production, Play, and Place. Ed. Nina B. Huntemann and Ben Aslinger. New York: Palgrave Macmillan, . –. Print. Ruggill, Judd Ethan, and Ken S. McAllister. “Testing, Testing, One, Two, Three: Quality Assurance and Game Development.” Journal of Gaming and Virtual Worlds . (): –. Print. Sandqvist, Ulf. “The Development of the Swedish Game Industry: A True Success Story?” The Video Game Industry: Formation, Present State, and Future. Ed. Peter Zackariasson and Timothy L. Wilson. New York: Routledge, . –. Print. Šisler, Vit. “Video Game Development in the Middle East: Iran, the Arab World, and Beyond.” Gaming Globally: Production, Play, and Place. Ed. Nina B. Huntemann and Ben Aslinger. New York: Palgrave Macmillan, . –. Print. “Transitions: Gamasutra Salary Survey .” Gamasutra: The Art & Business of Making Games. UBM Tech.  Jul. . Web.  Oct. . Weststar, Johanna, and Marie-Josée Legault. “Developer Satisfaction Survey : Summary Report.” International Game Developers Association,  Sept. . Web.  Feb. . Williams, Dmitri. “Structure and Competition in the U.S. Home Video Game Industry.” JMM—The International Journal on Media Management . (): –. Print. Zackariasson, Peter, and Timothy L. Wilson. “Marketing of Video Games.” The Video Game Industry: Formation, Present State, and Future. Ed. Peter Zackariasson and Timothy L. Wilson. New York: Routledge, . –. Print.\n\nProgramming\n\nINTRODUCTION Programmers—also known as engineers, or more colloquially, coders— develop and modify the software environments, apparatuses, and technical assets that enable games to be built, compiled, executed, and played. This work may occur within a commercially available game development suite (e.g., Unreal Engine ; Unity D), a proprietary development environment, or a combination of the two, and can involve scripting as well as programming. Additionally, programmers are tasked with optimizing the software’s process performance—including the development of patches and hotﬁxes—as well as additional post-release content. Programming personnel typically occupy one of three primary position classes—programmer, lead, and technical director—with the lead and technical director serving in a broad supervisory or administrative capacity that usually involves interfacing with other development disciplines and the public. Depending on the game type or studio size, programmers may take on specialty roles, focusing on engine, tools, artiﬁcial intelligence (AI), or network development, for example. As a result of specialization, programmers often work closely with one or more other development disciplines. A graphics engineer, for example, may \n\nProgramming\n\n\n\nwork with the art department to create new visual eﬀects, simulating camera lens ﬂare or optimizing the number of characters or particles on screen at a given time. Similarly, AI programmers may collaborate with game designers to create speciﬁc non-player character behaviors and movement patterns in order to greater challenge players. Because programming typically requires a high level of technical proﬁciency, programmers have often earned at least an undergraduate degree in computer science/engineering prior to entering the programming discipline. Like other software engineers, programmers tend to use common programming languages such as Java or C++ in their work, though they sometimes adapt these languages to the needs of a particular game or software application. As a given piece of game code can be used for many purposes, from displaying graphics on-screen to simulating artiﬁcial intelligence in creatures and enemies (all of which must be integrated and work well with many other pieces of code), using a common codebase is highly desirable among programmers, especially those working in large teams. According to the  Gamasutra Salary Survey, programmers earn an average annual salary of $, in the aggregate (“Transitions” ). Programmers with fewer than three years of experience earn an average of $, annually, while programmers with six or more years of experience earn an average of $, per year (Ibid.). By comparison, lead programmers and technical directors with six or more years of experience earn an average of $, and $, annually, respectively (Ibid.). Additionally, US-based programmers earn approximately % more on average than their Canadian counterparts, and % more on average than European programmers (Ibid.). Finally, male programming personnel average $, per year, while female employees average $, annually (Ibid.).\n\nJohn Sietsma Programmer John Sietsma is a programmer and educator. He is currently on the faculty of the Academy of Interactive Entertainment, and previously worked for Many Monkeys Development, Chocolate Liberation Front, League of Geeks, Dekko Experiences, Big Ant Studios, Transmission Games, Arterial Software, – Software, Spinifex Computing, and Victoria University in a variety of capacities, including as lead programmer, senior\n\n\n\nProgramming\n\nprogrammer, programmer, technical director, games developer and designer, and creative developer. He has also worked as a freelance developer. He holds a master of technology degree in intelligent systems from the Royal Melbourne Institute of Technology and a Certiﬁcate IV in Training and Assessment from Selmar Education Institute. His shipped titles include Armello, Wollongong University Kinect Experience, Oscura: Lost Light, Oscura: Second Shadow, Table Top Speed, Dekko Monkey, ACO Virtual Orchestra, Jewel Collector, Rugby League Live, Heroes Over Europe, and Ashes Cricket . ***** How did you come to work in the game industry? I was a professional software developer for seven years before I joined the game industry. At one point during that time, I was working on a search engine that had some intelligent features and I was also playing a lot of games. That combination got me thinking about non-player characters and how they behave, which in turn made me want to study that stuﬀ further. So, I enrolled in a graduate program to study intelligent systems, and my research focused on modeling emotions in non-player characters. I then got a job as a tools programmer in a game studio and soon became lead of the internal technology team. After that, I moved into making augmented reality games. During this period of my career, I worked independently for companies that weren’t primarily games companies but tech and ventureoriented organizations. After that, I got involved in starting a game studio, and now I’m a game programming teacher. Is AI still of interest to you? Believe it or not, I’ve never done any AI in games, even though that was the reason I entered the industry. I suppose the psychological aspect of AI remains interesting to me, but the technical stuﬀ has dropped away. As I’ve progressed through my career, I’ve become more interested in game design, and this was particularly so when I was doing augmented reality work. That sort of work is really about how people experience a new technology. What aﬀordances are there? What experiences can people get that are unique to this particular combination? I still keep up on stuﬀ related to the psychology of game playing, and I read regularly about how to design for the diﬀerent emotional states players go through during play.\n\nProgramming\n\n\n\nHow do you apply this knowledge to your development process? I apply it all the way through development, but especially at the beginning because that’s the danger place in terms of purely functional design. You actually see this a lot in indie games, where the design revolves around a particular mechanic or functionality. I think programmers often naturally fall into the engineering role, where they think, “I’m going to make this game, I’m going to take this mechanic and put this twist on it, and that’s what’s going to make the game really great.” I try to focus more on the player experience really early on and adopt it as an essential decision-making tool. I ask, “What am I feeling here? What’s the goal?” and I use my answers as a reference for design decisions. If the game is about a sense of wonder and surprise, for example, then I’ll use that sense as a reference when I’m thinking about the mechanics, aesthetics, and what I’m going to add to the game. Doing this enables me to fact-check the design against the player experience or emotional state I’m shooting for. What are the principal job tasks of a lead programmer? Communication with the other departments is a big one. There’s also some task scheduling typically, but the job is mostly about having a knowledge of everything that’s being built, managing the team of programmers that’s doing the building, and providing technical design advice. Another way of thinking about the job is that it involves a lot of talking to people when they’re building diﬀerent systems, making sure those systems are being built in a good way, and ensuring that the builders are getting lots of feedback. Additionally, being a lead programmer means managing team spirit, and making sure people are pulling together. It also means writing code yourself. If there are any gaps in the development process, you ﬁll them. You take on jobs that others haven’t gotten to, and you write systems. The great thing about game development is that you have all these disciplines working together, and it’s really enjoyable to be a part of the group. But you have to be careful to make sure that you’re communicating well and understanding what other departments need. Being the lead programmer means thinking beyond programming and staying connected to all the work being done in the other development areas. That’s true for all the disciplines in game development, and part of what makes development so challenging and rewarding.\n\n\n\nProgramming\n\nWhat are some of the workplace similarities and diﬀerences in the companies you have worked for? When I worked for Dekko, the augmented reality start-up, development was very much focused on getting funding. Everything we did was short term by necessity. You had goals to attain over the span of a few weeks that were vital, which were then replaced by a new set of vital short-term goals after the ﬁrst ones were achieved. This is diﬀerent from typical game development, where you have just the one major goal of seeing a game completed at the end. There are short-term goals in typical game development too, of course. There might be a festival coming up or a publisher coming in and a certain feature needs to be ready. But those goals are in the context of a much longer development cycle, which is the main focus. With Dekko— and really any start-up—our focus and eﬀorts were much shorter. We might need a thirty-second grab to show investors, or a brief demo to get into the news somehow. Everything was much smaller scale, including the timelines. The augmented reality technology and experience in general was also new when I was at Dekko. As a result, there was a lot more cycling around ideas, a lot more rebuilding things and re-doing parts of a given game over and over again based on testing or just trying out new ideas as we were feeling our way around. That kind of work is also diﬀerent from more conventional game development because the process really involves looking for something you can put into an investor’s hands that they’ll immediately understand and can have a great experience with even if they aren’t interested in games. The target market for the products with Dekko was the investor, not the consumer, which makes you think about the processes and goals of game design and development diﬀerently. When you’re making a game for an investor who has no games experience, you want something that may not necessarily be challenge- or progressbased like a more conventional game. That’s because you need to be able to put the person at the start of the experience and have them immediately enter a very small loop that’s instantly enjoyable. This is especially important with a new technology or an inexperienced audience. If someone isn’t used to games or how to control them—particularly with something new like augmented reality, where most of the mental battle is getting used to how things work—then the game itself has to be a very light experience. It needs to not be frustrating at all, because you don’t want someone to pick up the game and immediately die or fail to fulﬁll its challenge. So a lot of game building for an investor involves going for other senses such as\n\nProgramming\n\n\n\nwonder, excitement, or perhaps even an entirely diﬀerent emotional register than you’d ﬁnd in traditional games, which tend to focus on challenge and mastery. As far as conventional game development, I’ve worked at two large studios: Transmission Games and Big Ant Studios. Both were about – people. Transmission was interesting because it was my ﬁrst large studio, and we went through a big structural change while I was there. When I started, there was an engine team and an art team, and the engine team would spend months making something and then throw it over the wall to the art team. Often, what we made would be wrong, and so the company structure was reconﬁgured into strike teams. These strike teams worked really well. Depending on the game, there’d be a cinematography team or a terrain team, and each would have a producer, designer, artist, and programmer. It’d be a mix of people, and they’d concentrate on a particular aspect of development. This removed a lot of the communication barriers that had plagued the company previously. Programmers were less prone to making stuﬀ that they thought was fun or might be needed at some time in the future and instead were able to focus on solving speciﬁc problems to get a game feature done. It’s important to mention that neither Transmission nor Big Ant were highly structured at that time. In fact, they seemed chaotic compared to the ordinary IT programming world I’d been in. It was interesting coming from outside the game industry, because there was a lot more process around what we did there than what you typically ﬁnd in games. In non-game-oriented software development, there are lots of procedures related to schedules, risk management, how to code, how a feature gets implemented and checked oﬀ, and so forth. It makes a huge diﬀerence in terms of delivery. Take the game Heroes Over Europe, for example. It was scheduled to be in development for a year to a year and a half, but it ended up going for over four years. Software schedule overruns are common in any industry, however I think that with Heroes Over Europe it was a symptom of the lack of process. The ﬁnished product in those large game studios was always six months away, or two months away; it was never ready. I don’t think they’d learned to use the techniques developed in the enterprise software world that allow leaders to sit down and really schedule something to make sure it’ll be delivered on time. There was a lot of work that was thrown away too, a lot of stuﬀ that didn’t quite work. For example, the PlayStation  has a diﬀerent architecture than the PlayStation , and so we needed a new job system for Heroes Over\n\n\n\nProgramming\n\nEurope. We spent three or four months writing that system only to ﬁnd out that it wasn’t suitable and didn’t ﬁt in with the rest of how the game worked. There was a lack of communication or lack of checking beforehand, which resulted in a big chunk of work being thrown in the garbage. Likewise, I worked on a city generation tool meant to recreate some of the great European cities during World War II. The idea was to be able to generate Berlin or London as a fully destructible environment. We worked on that tool for about six months, and when we showed it to the artists they said, “That’s not the look we’re going for. The inside of the blocks is all wrong. We’re just going to do it by hand.” Again, work wasted and the timeline extended. It was these kinds of things that fueled the transition to strike teams. Instead of having the engine team just make stuﬀ—which might not have been vetted by people outside the team—strike teams made it much easier to show programming work immediately to artists, designers, and producers to see if it was on the right track. Before the restructuring, programmers ended up wasting a lot of time and then artists didn’t necessarily have the tools they wanted to do their work. How was it possible for the development of Heroes Over Europe to continue over such a long a period and with so many ﬁts and starts? I think there was probably a bit of a gambler’s fallacy going on. In fact, our publisher actually went bankrupt during that time. It must have always seemed to the publisher that the ﬁnished game was only six months away, and they weren’t prepared to throw away the huge investment they’d already made if the game was so close to completion. But the completion date kept stretching and stretching, and we were working on other games at the same time, some of which were in pre-production but never went into full production. At that time in game development, maybe % of the technical work was engine-related or systems-related as opposed to gameplay-related. That’s a big diﬀerence from what you might see today, especially on an indie team, where almost all of the work has to do with building and reﬁning gameplay. Back then, some of the internal technology we needed to create as part of the development process was to build systems designed to enable a fast turnaround. The goal was to make it so that if an artist was working on a\n\nProgramming\n\n\n\nmodel, she could make a change in the model and have the least amount of friction getting it seen in the game environment. That meant being able to process the asset, convert it, and transfer it—to rebuild the game, transfer it to the target console, and then see it on the screen. We actually spent a lot of our development time just on facilitating this kind of workﬂow. Some systems we worked on were performance-related. The games needed to be able to render particles or do some sort of calculation, and there was the whole technical challenge of how to do that eﬃciently. And in the case of the PlayStation , the challenge was how to spread that work across multiple processing cores where before it had just been done on one. So there was a lot of eﬀort spent on performance-related stuﬀ, which, as you can imagine, also took a lot of time. How is the work you have done in the game industry diﬀerent from the work you have done elsewhere? First of all, the game industry pays less. I took a major pay cut when I moved to games, and I continue to get paid far less than I would working as a software developer elsewhere. Also, there’s less career growth in the game industry. Because there aren’t a lot of large studios here in Australia, there aren’t many career options beyond starting your own studio. On the other hand, the game industry is more creative than other parts of the software industry. I get to work with people with really diverse skill sets, and we often go outside the technical brief. The game industry also has a strong internal culture. People making games tend to come from a distinct subculture, which can make the environment more community oriented and fun than other parts of the software industry. The thing about games is that it’s a creative industry, and so they do the pay scale diﬀerently. There are a lot more people who’d like to get into games and there’s much more competition for game jobs, which aﬀects salaries. It’s a supply and demand thing. Again, I took a hit when I moved into games; I think that’s the nature of the industry. I took a pay cut of about a third— maybe a little more—when I did my ﬁrst games job, and that relative diﬀerence has remained throughout the course of my career in games. It’s deﬁnitely a little tough to accept the fact that you’re getting underpaid, but I also think you need to do things you ﬁnd interesting. I’ve certainly\n\n\n\nProgramming\n\nenjoyed my time making games, and there’s an important quality of life question to address if you’re doing work you don’t really ﬁnd interesting, even if it pays well. What are the fundamental skills required in game programming? There’s the learning of a programming language or languages, obviously, and there’s a mind shift that happens when you do that. There are things that click into place where you understand something according to a programming way of thought. Once you have a language down, you need to be able to think on a larger scale, so again there are design patterns and ways of organizing things. Using a given programming language to do something can involve a lot of complicated problem solving, and with games it’s good to know about how various systems like the rendering engine work. It’s also good to know about game trees, spatial partitioning, and other gamespeciﬁc techniques, even if you’re using a game engine. It’s really helpful to know what goes on under the hood. Then there’s all the teamwork and softer skills that are important for programmers to learn. Things like good communication skills, asking the right questions, and an ability to work eﬀectively with people in other disciplines all make for a better programmer. What does the game programming workﬂow typically look like? The ﬁrst stage is pre-production. We prototype unknown or risky gameplay areas, write documents that give the central vision of the game design and make important technical decisions, and evaluate the scope and budget of the project. Pre-production is essentially focused on reducing risks. If you’re unsure about your gameplay, then you spend your pre-production time making sure you know your gameplay is right. By the time you go into production, your unknowns should be reduced so you can then really just start cranking things out and making adjustments on the ﬂy as timelines shift. And if you’re a lead programmer, it’s your job to communicate what it all means. If someone says, “We want to change this to that,” you have to say, “Well, that means X in terms of time or Y in terms of risk.” As a programmer, regardless of rank, you have to give feedback so that people can make informed decisions. The next stage is production. Here you break down game design into tasks. You regularly check your progress against your goals, and use tasks completed to estimate forward progress and risks. Ideally, you’re also able to change the scope or budget as you come to better understand the project.\n\nProgramming\n\n\n\nThe production stage can be more or less iterative depending on budget and time pressures. I like to track progress closely so that I can accurately estimate what we can get done in the future. I emphasize knowing the risks and rate of progress as early as possible so that good business and design decisions can be made in response. It’s perfectly valid to spend more time perfecting a mechanic or starting again with something new, but I want that to be a decision that’s consciously made rather than something that just happens. The last stage is post-production, which includes delivery, support, and so forth. With augmented reality and other new technological arenas, the work is pretty much all pre-production. You’re just looking for ideas. You’re looking for hooks and ways you can do things in a studio. With more conventional development, programming pretty much all happens during production. The design is settled fairly early on and so a lot of the work left to do is just getting the jobs done. You make a lot of lists in terms of the ﬁnal goal and try to ﬁgure out how to break things down, measure progress, and that kind of stuﬀ. I suppose my take on project management is always that most software engineering projects are going to be late by some degree, and trying to make sure that doesn’t happen isn’t always within your control. So, the role of the lead programmer is to identify problems with the timeline as early as possible and to make the best decisions going forward. When I worked for Chocolate Liberation Front, we had a ﬁxed budget. There was no more money for things beyond what was in the bank, so if we were late, we didn’t get paid. That meant that every week we measured. We looked at what we did the last week, we looked at our complete progress through the game, and then I made decisions: “Okay, we’re running late on levels. Let’s cut the levels and we’ll get some extra help.” How does the workﬂow diﬀer when working on diﬀerent types of games (e.g., diﬀerent genres, AAA versus casual games, etc.)? New genres and technologies require more pre-production to validate ideas. When I worked in augmented reality, for example, most of my time was devoted to solving interaction issues or iterating game mechanics. With the freelance work that I do now, the budget tends to be ﬁxed and the mechanics better known. Most of these projects are all about production, that is, getting tasks done and managing risk and scope.\n\n\n\nProgramming\n\nWhat is interdisciplinary communication like from the programming side? I personally haven’t had any drama between the disciplines, but I’ve noticed that there are big diﬀerences between the disciplines’ outlook, character, and how they approach work. That can often be a point of contention, and it’s not unusual to hear snide comments and to have eye rolling between the disciplines. The disciplines do tend to segregate, and I don’t know whether that’s a programming culture thing, an art culture thing, or just because they often sit separately. The programmer’s job is to go and ask questions, to ﬁnd out what’s going on. Programmers often do things because they enjoy programming; they see a system they want to build and get excited about it. They then build it but it winds up not being useful to the given project. For me, I really try to connect with people and ﬁnd out what needs to be built, and I do this by going and asking questions. Regular communication is really important. The thing is, programmers don’t always naturally go and talk to people about what they need. A generalization is that programmers tend to be introverted. In my experience, the strike team model works really well because when you actually get people to sit next to each other, there’s more natural and productive communication. What are the most signiﬁcant internal challenges you face in your job? I’ve worked at a few companies that have been in ﬁnancial trouble. This has meant a lot of stress and long hours trying to meet deadlines, which has had negative impacts on me and my family. Most game companies have younger employees who don’t have children, and the corporate culture often equates life sacriﬁces with dedication and passion. After a number of years of overtime, I started to put limits around the amount of overtime I’d do, and this caused issues with my employers and coworkers. Needless to say, I ﬁnd the academic side of things to have a much better family environment. There’s another challenge related to age, too. We made a lot of Armello without any funding, and therefore the company had a revenue share model . . . which I found very diﬃcult. I came into the games world quite late, and a revenue share model works best for young people, who have a greater percentage of disposable income. I have three children, and so a remuneration model based on sweat equity for a later payoﬀ is tough. After two and a half years of putting my own money and time into the project and then trying\n\nProgramming\n\n\n\nto work around the needs of my family, it was just too much. Keep in mind, too, that the development time on that project was close to ﬁve years. So, that’s a big ask when you’re doing it without getting paid, when it’s all sweat equity. Obviously, I had another job at the time, and so I’d often work four days a week at that job and then spend a day working on Armello or just do things on the weekends and nights, ﬁtting them in whichever way I could. I was able to do the work, but at the expense of my personal life. What are the external challenges you face in your job? The big one is a lack of development opportunities in Australia. There are few big companies still around, and there are few small companies with the money to hire experienced developers. The big challenge of being an individual game developer is that it’s diﬃcult to be self-sustaining. There are a lot of games being released, but that actually makes it hard to make a fulltime living on the independent side—there’s just a lot of competition. Which companies or ways of working (both within and outside of the game industry) do you look to for inspiration? As far as ways of working go, I use an Agile methodology in my development work. I’ve found that it helps me get accurate estimates on things and allows me to work with low production risk. In terms of companies that inspire me, I like Valve’s way of working, although I’m wary of informal power structures replacing formal ones. I like the worker-centered ethos and the creativity that comes out of what they do. They have a ﬂat management structure, and you work on what you ﬁnd interesting. In my experience, people often get stale or burned out when there’s no room outside of their speciﬁc role to explore. It’s nice to have a studio environment with fuzzier boundaries between disciplines and what you work on. At Valve, you can decide to work on things that interest you, and that really helps you develop as a person as well as be more useful to the company. I suppose that’s a little more human-centered rather than process-centered in terms of the end result. How has game programming changed over the course of your career? The biggest shift recently has been the move away from individual engine development. When I worked in large studios, the work often centered around building a custom engine or modifying one built in-house. These\n\n\n\nProgramming\n\ndays, the work in a lot of studios has shifted to working within existing engines rather than building custom ones. A lot of the game development principles have stayed the same; it’s just the engine emphasis that’s changed on the programming side. What are some of your notable quality of life issues, both routine and exceptional? As I mentioned, working long hours is often seen as a sign of commitment, which clashes with my family time and has led to issues for me. Likewise, the mental eﬀort and intensity of the work has often meant that I spend non-working hours in recovery mode. And of course, a career of lower pay has meant that I have less retirement savings than I would if I worked in another industry. It was interesting coming into the game industry as an adult without having been part of a game subculture. It was a big culture shock walking into the studio for the ﬁrst time and seeing toy ﬁgurines everywhere and people dressed unconventionally. People who get into game development are often part of a game subculture, and I think that really shapes which sorts of games get made and how developers think about their jobs. It keeps some of the less desirable parts of the game development cycle going sometimes, and that’s something I’d like to see change. I think the industry needs to get more people from diﬀerent backgrounds interested in making games. That would open up things a lot more. Also, most of the large Australian studios are gone, and a lot of the work they used to do is now done in Canada and elsewhere. It’s hard to ﬁnd work here, which creates a tough situation, quality of life–wise: Do you stay and try to make something happen, or do you move to another country? I’ve deﬁnitely gotten a lot better as I’ve gotten older in terms of knowing where my personal and work boundaries are. I’ve realized how ineﬀective crunch is, and that if you want to make and ship a game, it’s a lot more about your development practices than the number of hours you put in. Putting up boundaries around your time, though, can be a problem because people often see this as not having enough passion or not being willing to support the team. The game industry can be a really strong, supportive place to be. It can also be alienating.\n\nProgramming\n\n\n\nWhat are some of your notable career progression issues? As I’ve said, there aren’t a lot of game development jobs in Australia. I’ve been making games for nine years and programming for nineteen, but I apply for the same jobs that new university graduates do. Unfortunately, a lot of development roles don’t require the experience I’ve gathered outside of programming, such as game and interaction design. Can you see yourself returning to the game industry full-time? If I went back full-time, I probably wouldn’t want to work for a studio. I left the industry due to quality of life issues, and I wouldn’t really want to go back if those structures hadn’t changed. At the moment, I enjoy teaching and the interaction with students. I’m learning new skills and I still have time to work on games. When I make games now, the process is much more about self-expression or things I ﬁnd interesting. Do you teach with the strike team model in mind? In my program, our teams are already strike teams because there are only six to eight students on a team. So, they’re all blended anyway—there aren’t enough people in the class for students to go and sit in their disciplines. That said, there’s deﬁnitely still an issue in the sense that all of a sudden students from diﬀerent disciplines are making projects together, and that means a lot of cultural diﬀerences. The students don’t know each other, and there’s deﬁnitely an eﬀort that needs to be made to get their communication working well. So, we try to get them working on projects as early as possible, even if those projects are just game jams or little things. The goal is to get the students used to working with other people, which is fundamental to game development. Has the growth of the mobile sector inﬂuenced how you teach design and development? In some ways the growth in the mobile market has made it very hard to know what to teach. I try to teach fundamentals that are platform agnostic and then get the students to apply those fundamentals to a particular project so that they have skills that are transferable. The idea is that they have the ability to ﬁnd their feet quickly, regardless of the size of the studio they\n\n\n\nProgramming\n\nwind up in. The technical barrier is lower in mobile development than in console development, and you can teach someone how to use Unity D fairly easily and get them to make a game. But they wouldn’t be equipped to go work in a larger studio or on a larger project. So I try to teach base-level skills that can be applied anywhere. In development today, there are deﬁnitely two systems with two diﬀerent skill sets. I think it’s great because now anyone can make a game. As a result, there are a lot more people who can make mobile games or simpler games but don’t necessarily have the complete skill set for working in a big shop. What is the logical conclusion to this divergence in skills and game types? I think what it means for development going forward is that there are going to be fewer specialist roles. Certain types of positions—graphics, for example—will continue to hire, because graphics are such a big thing. There’ll continue to be graphics programmers and graphics-speciﬁc work in larger studios because those places have their own specialized teams. But because it’s getting easier to make games across the board, a lot of other specialist roles will disappear. People will just become more focused on game making in general, rather than on a particular facet of it. How do you broach these challenges with your students? I’m quite honest with them about the challenges of the industry. Game education courses in Australia have boomed in recent years, and we’re now producing all these people who are going to ﬁnd it diﬃcult to get work. I think the top students in my classes will ﬁnd employment because there are new studios forming. Most of my students won’t ﬁnd work in games locally, though, and will have to transfer to another industry or go overseas. What other challenges are facing the industry over the next decade? Shifts in game player demographics and interests will be diﬃcult for some developers. There’s also the problem of the popularity cycle. Most industries and platforms go through a boom and then consolidation phase. Even though there are a lot of indie studios starting up here in Australia, games will become dominated by big players again, which will squeeze out some of the smaller developers. Concomitantly, ﬁnding niches, especially outside of traditional gaming genres, will be a necessity, not just an opportunity.\n\nProgramming\n\n\n\nGender diversity is another major issue. I’ve worked with very few female programmers and I think this is one of the reasons games can be so myopic and repetitive. I really hope we get more diversity in the industry and some more ideas brought to the medium. Importantly, there’s a lot more openness in the indie community to the issue of diversity. There are already speciﬁc events around women and gaming, for example, and there are a lot more people who make games as personal expression. For some people, game development doesn’t necessarily have to be their career, so I think that’ll open things up. I think we’re going to start seeing more diversity in the business structures and motivations of the game industry generally, with the indie community leading the way. It may take a while for these changes to happen, though. Lots of the small studios here in Australia aren’t actually employing people yet. Many of them consist of just the founders, or maybe two or three people working on a game. These people are often doing the work for sweat equity or very little money, and so it’s not a stable employment environment. I think that’ll change over time. As some indies get established, they’ll become larger companies, employ more people, and provide more stability. So, right now, it’s very exciting and people are making interesting games, but they’re working away for years without a stable income, which isn’t sustainable over the long term.\n\nJohn Alvarado Lead Programmer As the former senior software engineer and now technical director at inXile Entertainment, John Alvarado is an industry veteran. In addition to his thirteen years at inXile, Alvarado has logged many additional years with companies such as Designer Software, MicroProse, LIVE Studios, Virgin Interactive Entertainment, Seven, Big Grub, Shiny Entertainment, and Interplay Entertainment, and in positions ranging from president (Big Grub) to artist (Spec Ops: Airborne Commando) to voice-over cast (Choplifter HD) to tech support (Super Caesars Palace). His earliest credit runs back to an Atari Centipede conversion for the Commodore  in the s, and since then he has shipped more than thirty titles on virtually every major platform of the last three decades. From his DO Interactive Multiplayer version of Demolition Man to the recent Wasteland , Alvarado’s games represent the\n\n\n\nProgramming\n\nwidest possible range of genres, styles, studio sizes, and project complexity. Alvarado holds a bachelor’s degree in linguistics and computer science from the University of California, Los Angeles. ***** How did you come to work in the game industry? I began making games with friends in high school for the Apple II, Atari , and Commodore  (C), just for fun. We loved playing arcade games and wanted to make our own. Our experience led to a contract job with Designer Software to port Centipede for Atarisoft from the Atari  to the C. It went from there. What is the day-to-day rhythm of your job now? These days, I’m mostly on one project, which is pretty cool. In the past, I’ve been overseeing multiple projects, but we’re at the tail end of Wasteland  and trying to get started on our next project, Bard’s Tale IV. When I ﬁrst get to work, I usually check my email. There are always people sending me email who need an answer sooner rather than later. We’re dealing with a lot of localization tasks at the moment, so that’s a big source of questions. Localization is what we call the process of adapting the game content for other countries (making it work for the locality in which it’s played, hence the term “localization”). In addition to translating the language (text and voice-over), localization may require adapting other game content for the sensibilities and/or requirements of non-US cultures. For example, in Germany they don’t allow blood and gore for games below a certain age rating, so you have to put switches in the code to turn oﬀ those eﬀects for the German release. At the moment, we’re trying to get the last-minute localization ﬁxes in for a Wasteland  patch that’s coming out. As a result, I’m in constant communication with the localization teams. We did crowdsourcing localization for this project, which was cool because it was like free localization, but not really free because it took a lot of my time to work with these diﬀerent groups. It was a fun process, but a lot of work. After I’ve dealt with the most important things, what I do next depends on what phase of the project we’re in. Right now, since we’re in a patching and ﬁxing phase and using bug-tracking software, I’ll look at the list of current bugs to see what I need to work on. Even though I’m the technical director,\n\nProgramming\n\n\n\nI’m still a day-to-day programmer as well. I try to get in as much programming as possible. Usually the best time for me to program is early in the morning or in the evening when everyone’s gone, because there are fewer interruptions. During the day, there are lots of meetings and people asking questions about the code or localization. I try to do as much coding in the middle of all that as possible, but it’s not easy. That’s a typical day. In terms of the general structure of a workday, it’s ﬂexible, but we’re responsible for getting in eight hours of work. We also have what are called “core hours” during which we have to be at the oﬃce. That’s between the hours of : a.m. and : p.m. so that we overlap with each other for a certain amount of time. If you just come in from : a.m. to : p.m., that’s obviously not eight hours, so people either have to work later or come in earlier to get in their eight hours. If someone is coming in late—past the : a.m. core hours time—they have to call or email a supervisor and the human resources manager. We also use an internal social media app called Yammer that lets people post to their colleagues that they’ll be late. If you forget to do this, someone from human resources or your boss will come over to remind you to let people know when you’re going to be late. Other than that, no one’s really tracking our hours; people just notice whether or not you get stuﬀ done. If you get stuﬀ done and the project is meeting its goals, then no one complains. I think it’s like this at most places. The industry is goal-oriented and companies just want to make sure that people are on track with their milestones. Personally, I haven’t needed to stay late or work a lot of crazy hours for the last few years, which is really good. This seems to coincide with the moment we started crowdsourcing our projects, which allowed us to have better time and goal management. It’s deﬁnitely nice to not be under the thumb of a publisher. We still have crunch periods here and there when we’re trying to push something like our ﬁrst alpha or beta to Steam, or when we’re close to actually publishing and trying to get in all the polish we can to make it the best game possible. For the last few projects, crunch has really been self-imposed by the employees rather than by the company saying that everybody has to work twelve hours to get the project done. Everyone knows what needs to be done and people work hard because they want to make the game great. I’m not saying that crunches are totally avoidable though. The fact is that if you’re passionate about the product you’re making, you’re going to encounter a crisis point when the product needs to be ﬁnalized but you still want more\n\n\n\nProgramming\n\ntime to iterate on it and improve it. So as the end approaches, even though the game is all there and is pretty good, you still want to make it better. You end up spending every little bit of available time to get in those last little details, those last little bits of polish that you’ve had on your list for a long time but haven’t been able to get to. I’d call this a good kind of crunch, where it’s self-imposed because you’re excited about the product and you’re wanting to make it shine as brightly as possible. This is diﬀerent from the kind of crunch where you’re doing the death march just to meet your milestones so that you get paid or don’t get canceled by your publisher. That’s a very diﬀerent sort of crunch. How do you balance being both an administrator and a programmer, two very diﬀerent roles in the industry? The most important part of this balancing act for me is to not bite oﬀ more than I can chew on the programming side. We typically have some other lead programmer on whatever project we’re working on; I’m just supposed to be helping out as necessary when there’s a particularly technical challenge or there’s something that I have a lot of experience with (like localization). “Balance,” then, happens simply by not saying “yes” to too many things. When I say “yes” to too many things, that’s when I end up with self-imposed long hours to do the jobs I said I would. As I said, when I’m at the oﬃce, there are lots of people, design decisions, and various other interruptions to contend with, so it’s hard to get programming done. Basically, I try to divide up the day and create chunks of programming time when I can work uninterrupted for a while. This is pretty common for people who have dual roles like this. I’ve known people at other studios working in similar positions, and they have the same challenge: how do you balance your time between getting your hands dirty in the code, managing a team, and watching the schedules to ensure that all the mundane tasks of game development are getting assigned out to the appropriate people and completed? You just have to divide up your time so that you spend part of the day doing management, and other parts of the day doing coding. Is it professionally precarious to be a boss during one part of the day and a worker in the trenches later? I think that one of the things about most workplaces is that there are regular formal reviews to tell you how you’re doing from the boss’s perspective. These can be good because they help you understand where you are\n\nProgramming\n\n\n\nprofessionally, but they can also make you feel a little precarious, especially when you’re doing more than one job. It’s hard to do two jobs well simultaneously. Interestingly, though, I haven’t had many formal reviews in my career, so I haven’t felt that precariousness very often. In the beginning, of course, there were more formal reviews, but at a certain point I took on more responsibilities, and my bosses really just wanted to know that things were getting done. If they were, then the bosses were happy, and I got raises, and there wasn’t a lot of formal reviewing going on. Occasionally, I ask for a raise, and I usually get it. In the long term—that is, over the life of a project—how this balance between project management and programming unfolds depends on which phase we’re in. Toward the end of a project, the balance tips toward programming and away from the organizational role. This is because at that point, you’re at beta and basically done with the game, but there are still a lot of bugs. The administrative work in this phase is really just assigning out all the bugs to the people in charge of the relevant areas of the code. Once that’s done, you just go to work on the bugs, troubleshooting the ones assigned to you. There’s also a middle period, too, which emerges once production is really underway and the big tasks have been handed out. At this point, the big systems have to be implemented and tested, and people know where they’re headed. They’ve got big chunks of work to do, so there are fewer meetings and more programming going on. How would you describe the management structure in your company? There’s a hierarchy consisting of top management (CEO, president), middle management (directors and producers), and developers (programmers, designers, artists). Despite this hierarchy, it feels fairly ﬂat because the upper levels delve into production (design mostly), and they listen to feedback from the developers, so it feels much more collaborative than hierarchical. How would you describe the workﬂow in your company? Development goes through phases over the course of developing the game: high concept (deﬁning the sensibilities and goals), pre-production (speciﬁc design), production (design implementation), iteration (making it fun), and ﬁnalizing (making it “bug free”). The edges of these phases can be a little blurry or overlapping, especially between pre-production, production, and iteration.\n\n\n\nProgramming\n\nHow does the workﬂow diﬀer with diﬀerent types of games (e.g., diﬀerent genres, AAA versus casual games, etc.)? For games that have a small scope—for example, mobile games—the process is similar to more complex ones, but less time is spent in the high concept and pre-production phases, and more time is spent in production and iteration. Nevertheless, all the parts are still there. What are some of your notable quality of life issues, both routine and exceptional? At the most basic level, proper nutrition is a challenge, as companies tend to stock up on processed snack foods and drinks to keep developers going during late nights. My company has been pretty good about providing healthier options like fruit, instant oatmeal, and granola bars. The fact of late nights is another challenge for those of us with a spouse and children. But even when work hours are normal, it’s easy to neglect exercise and good nutrition. For years, I’ve taken advantage of our proximity to the beach to run along the shore at lunchtime a few days a week. More recently, I’ve switched to running daily in the early morning to train with some hard-core runner friends for races. I ﬁnd that having athletic performance goals helps motivate me to exercise and eat healthy. This year, I ﬁnally achieved a big goal of running a marathon in under three hours. Back in May, I ran the OC Marathon in a time of :. I proudly hang my marathon medals over my desk at work, including a Boston Marathon medal from . There’s a story behind that one. I’d qualiﬁed in a local marathon but didn’t plan to run Boston because I didn’t want to take time away from work to travel just for a race. But when I mentioned it to my boss, Matthew Findley, he said something like, “Are you kidding? Not many people get that opportunity. You’d be crazy not to take it. You gotta do it!” So we scheduled the vacation time, and I took my wife and three sons to Boston for a week to tour the city and run the race. It was a great time, and I’m grateful to inXile for that kind of encouragement and for the ﬂexibility in work hours that makes it possible, even in the face of the many challenges of game development. We’re pretty good at inXile about acknowledging and addressing these challenges, including being realistic in our design phase about what can really be accomplished without requiring a death march from the developers. We also plan out how to cut parts of the design if it becomes necessary. But\n\nProgramming\n\n\n\nthere are inevitably periods during the project (especially at the end) where we demand more of ourselves in order to put out the best product possible. When this happens, we invariably neglect other parts of our lives. This is just part of being passionate in a creative career. What are some of your notable career progression issues? I started my own company (Big Grub) with some partners at one point and did more management and design, even as I was still programming. The company lasted seven years, but I really spread myself too thin and my family suﬀered the most, ﬁnancially and emotionally. I’ve been much more successful focusing on one role (technical), but have inevitably been pulled into management as a senior developer because I have a lot of experience. At three diﬀerent companies, I’ve been tasked with taking over technical management of a project after the previous lead left or was asked to leave. Balancing those roles is challenging, but still not as bad as when I ran my own company. I admit that I still think about striking out on my own again. I know my wife wouldn’t like that idea. When I did it the ﬁrst time, we lived pretty lean for a number of years. I was able to pay my employees but wasn’t necessarily paying myself all the time, so it was a burden on my family. The thing is, once I decided to come to inXile, I found that I really enjoyed the work here and enjoyed the fact that there are actually people assigned to the diﬀerent roles I had to do myself when I ran my own company. At this point, I think that if I were to start another company, it wouldn’t be in the games business. I’ve been pretty happy here and I really like the people I work with, so that do-itmyself itch hasn’t come up again in any serious way. Another part of what makes striking out alone less than appealing is that inXile started out with a philosophy that was intentional about improving quality of life issues. Even the location where they chose to locate the business, right next to the beach in Newport Beach, speaks to this. The founders wanted to be able to go out surﬁng in the morning, and today we have a whole bunch of surfboards lined up on the wall here. Even though there are now just a couple of surfers in the company, in the early days a lot of people surfed. In fact, when I came here, it was my boss who taught me to surf. I ended my surﬁng career shortly after it began when I got stitches in my head from the board hitting me, but we still go out and play beach volleyball and soccer on the soccer ﬁeld nearby. The founders wanted to have a company\n\n\n\nProgramming\n\nculture where getting outdoors and playing in nature was part of the daily routine. It was their sense that sometimes the best thing for game development is actually getting your mind out of the code. And it can be really helpful. Going for a run on the beach and getting my mind oﬀ a problem I’m struggling with can be the perfect way to ﬁnd a solution. In any case, they made the decision early on to try to strike a balance among work, play, and private life. In the early days of a start-up, of course, you end up having to work hard just to survive and to meet your milestones. But over time, the company has gotten better at not biting oﬀ too much at the start of a project and at realizing when we need to cut things so that we don’t have to do a death march of work to get it done. It’s also been my own decision to not stay too late or sacriﬁce myself too much. I need to be willing to make those diﬃcult decisions, to cut things or do things in simpler ways—I can’t only depend on the company to make those decisions for me. Each developer has their own set of ambitions and goals, and they need to make their own decisions about whether or not it’s right for them to push themselves to work long hours to achieve what they’re hoping to achieve. As I’ve gotten older, I’ve learned that I’m better oﬀ not overdoing things and instead being smarter about planning. I’ve also realized that what really ends up making a better game is when people don’t overcommit and don’t work themselves to death. You have been in the industry a long time, which is unusual. Even more unusual, however, is that you tend to stay in the same job for a long time. What is it about you and your skill set that allows for such longevity? Part of it, I think, is that I’m very good at what I do. As a result, companies usually want to keep me around. On top of that, I approach my job such that I don’t see my employer as an adversary. Instead, I see myself as being part of the company, and given that the company’s success is important to me, I align my interests with the company’s so that we’re working together. The times I’ve left a company—for example, when I left Virgin Interactive to start my own company—I did so not because I didn’t like it there anymore, but because starting my own company was an ambition I’d long had. So I did it. And then I got to ﬁnd out how hard it is to run your own small development company. Even then, though, I stuck with it for about seven years. Another reason is because I’m generally a pretty loyal person. I’ve often found that my commitment is rewarded with more responsibilities. This\n\nProgramming\n\n\n\nwas true at Virgin, then at Shiny Entertainment, and now here at inXile. During the Big Grub days we contracted at Shiny because I knew David Perry (founder of Shiny Entertainment) from my days at Virgin. He needed some help on Wild  and R/C Stunt Copter, and we were between game projects and needed work. At one point on R/C Stunt Copter, the producer from Interplay, Matthew Findley, asked me if I could take over and ship the product without the lead programmer. I said yes, and the lead was gone the next day. I took over and we shipped the game. A similar thing happened when I joined Matt at inXile a few years later, and that’s how I went from senior software engineer to technical director. These additional responsibilities I take on mean that I’m more valuable to the company. It also usually means that I enjoy my work more—so I stay. I also think I’m easy to work with, so that helps the company want to keep me. Working well with others is the most valuable skill after your primary professional skill. Everyone has opinions on game design and even on implementation methodology. This leads to conﬂict. What I’ve found to be the most important part of turning conﬂict into consensus is demonstrating that you value other people’s ideas. You do this by listening to them and truly understanding, and then repeating back what they’re saying before oﬀering alternatives or pointing out problems. Also, giving credit to people for their ideas and their work when talking to others is huge. For example, if a designer comes to me with an idea for a feature that I begin to think isn’t worth the amount of work it would require to implement, I don’t immediately say that. I ﬁrst ask questions to understand what they think this feature adds to the game—what feeling they’re trying to create in the player, or what problem it solves for the player’s interaction with the game. Then I make sure I understand the details of the feature enough to be able to implement it. Then I discuss what I think it would take to implement the feature, including time and art/audio resources. Sometimes, along the way I’ve changed my mind about the value of the feature, or about how much work it’ll take (having better understood its details and scope), and I’m happy to carry it forward. Sometimes they begin to see that the cost is too much, and then we brainstorm other ways to achieve the same thing, but now we’re on the same side and they’re ready to listen to any ideas I have. I guess that’s the crux of it—getting people to feel that you’re on their side so you can work together toward mutually agreeable solutions. Active listening and giving credit where it’s due are two ways to do that. To do this eﬀectively requires cultivating in yourself a true desire for your teammates to succeed, which may seem obvious, but some people fall into the trap of\n\n\n\nProgramming\n\ncompeting with their teammates for approval and attention of their bosses and other coworkers. That’s bad for the team and the project. Here at inXile, we went through a really rough period a while back. We had, at one point, an entire mobile division plus a major AAA console title in development. We had around eighty people here in our small space in Newport Beach. Then things got tight and the economy went bad; publishers weren’t wanting to do deals anymore, and we couldn’t ﬁnd a big console project for the company. We had to lay people oﬀ, including a bunch from our mobile division. We actually got down to twelve people at the lowest point, and I was one of them. I really wanted to see us come back from that and succeed because I really love the people I work with. We started looking at some creative funding ideas, including starting a new studio in Southeast Asia. I made a trip to Singapore with my boss to seriously explore that possibility and to talk to the government there about their incentives for game companies. But this was also right when the whole Kickstarter trend blew up because of Tim Schafer’s project. I’d previously talked to my bosses about Kickstarter and wanted to try it for some of our smaller “passion projects” that we wanted to do but that no publisher was going to pay for. At ﬁrst, they didn’t believe that people would pay a company (versus a small indie developer) to develop a game. They thought we’d look bad, as an established company, asking for donations. That was early in the Kickstarter phenomenon, of course. When I saw Schafer’s project go big, though, I immediately contacted my bosses and they were already on it. That’s when we did our Kickstarter for Wasteland  instead of trying to open a Southeast Asia studio. So, yes, I’ve been willing to stick through the lean times and keep being creative, which makes me valuable to my employers and keeps a seat open for me. I think my longevity in both the industry and in particular jobs also emerges from the fact that I’ve developed a diverse skill set over the years. I was fortunate to have gotten into the industry early, which has meant that I’ve been able to grow with it. Like I said, I started small with just a couple guys in a room and got to do some art, and then I started learning programming. And even though that project was small, it still had a deadline and a budget, so from the very beginning I was also being made sensitive to business elements like money and deadlines. I also got to experience early on what it feels like to ship a product. It’s surprisingly diﬃcult to do this, actually, and some people aren’t very realistic about what they can get done in a certain\n\nProgramming\n\n\n\namount of time. Having started small, though, I think I learned early on what my limits are and how to be realistic. Just knowing when you have to cut stuﬀ, or when to not overdesign, or even when to bite oﬀ a little bit too much then be willing to work hard to get the project done and get it out the door, are great skills to have. Not to know your limits means canceled projects, which I’ve also had one or two of here and there, mostly for reasons out of my control. With experience—working on lots of projects, starting my own projects, building up to bigger projects with more people—my skill set has expanded, which makes me pretty versatile. Is it this versatility that makes for a good technical director or lead programmer? Yes, I think so. As a lead programmer, you have to keep your eye on the big picture. Part of the lead programmer’s job is to aim for making the best game possible, even while pushing back on the designers when they start asking for cool new features that are going to require too many programming resources. Part of the production management side of things is recognizing (as a programmer) how much work will be required to add new systems to the game. You have to try to strike a balance between passion for the game and understanding that there’s a limited amount of time and resources to make it. This requires someone who’s not only smart about programming and time management, but also about leadership of people other than programmers. This is really important for the lead programmer. One of the things that’ll sink a project is committing to too much—art, music, technical systems, levels, whatever. When you throw too many features into a game, you never get to the point where you can really polish them all. It’s really important early on, therefore, to limit the scope of what you’re attempting to do given the budget and deadlines you have so that you can get to the iteration point of game development when you’re crafting all those aspects that make the game fun. You only get to polish a game that’s basically ﬁnished; that’s when you start improving and tweaking all those details that make it really fun. If you put in too much stuﬀ at the start, you’ll never get to this iteration phase, and at some point you’ll realize that you’ll either have a bunch of poorly implemented features in your game or you have to cut stuﬀ like crazy, which will then likely mean that the parts aren’t cohesive anymore. Having discipline early on, not trying to do too much, having a plan—these all require versatile and experienced leads. As long as everyone has the same basic vision and knows all the signposts, cool new ideas that come up can be assessed accordingly. Metrics are part\n\n\n\nProgramming\n\nof this and will tell you when you need to pull back and, for example, go to plan B because you’re not as far along as you’d intended, which means not enough time for polish. A good plan actually includes moments when you can decide to cut certain things. Versatility is also important for technical leads because sometimes there are heated discussions between designers and programmers. Some programmers are fairly conservative in terms of game development; that is, they’re risk averse. They aren’t willing to try to reach for something great because they’re afraid that it’s going to be too much work for something that can’t succeed. As a result, they’ll overestimate how long it’ll take to do something. Because I’ve worked with all kinds of different people, I can usually recognize when this is happening and make a decision based on my own experience. Sometimes this takes a little bit of pushing and helping people to become better problem solvers and collaborators. In some cases, their estimate would be realistic if they were working by themselves with lots of unknown quantities, but that’s not usually the case in an established game company. There are lots of resources available to help keep things moving forward. Sometimes I can just sit with programmers and show them a different approach from the worst-case scenario they were imagining, and they’ll realize that the change isn’t too bad. Part of your versatility, then, involves good communication skills? Absolutely. One of the industry’s big challenges is that designers aren’t necessarily programmers, so it’s hard for them to look at a feature on the surface of the game and understand what’s going to have to happen under the hood to support that façade. But without that kind of technical understanding, it’ll be hard to assess whether or not that feature will be worth the time spent generating it. On the other hand, designers get tired of hearing from programmers that every new feature is going to take a long time to implement; as a result, they often don’t trust programmers’ assessments, and come up with ways to convince a boss to add the feature so that the boss will tell the programmers to go ﬁgure it out. Technical leads need to understand these dynamics and ﬁnd ways to explain to everyone involved what’s realistically required for each new feature in terms of data structures, programming, assets, and so on. Without doubt, the most successful designers and producers are the ones who have some technical experience, because then they can communicate with programmers better.\n\nProgramming\n\n\n\nBy the wa"
    }
}