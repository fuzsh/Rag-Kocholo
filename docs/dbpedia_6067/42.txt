Wikipedia list of Quantum Computer programming languages

(This answer is not a copy of that webpage, it's more updated and with verified links. In some cases the author's paper or website link is added.)

Quantum instruction sets

Quil - An instruction set architecture for quantum computing that first introduced a shared quantum/classical memory model. See also PyQuil.

OpenQASM - The intermediate representation introduced by IBM for use with their Quantum Experience.

Quantum programming languages

Imperative languages

QCL - One of the first implemented quantum programming languages.

Quantum pseudocode - [Not actually a language, but a nice way to represent quantum algorithms and operations.] E. H. Knill. "Conventions for Quantum Pseudocode", unpublished, LANL report LAUR-96-2724 (PDF Source 1, 2), Search at arXiv for all papers referencing Knill's paper.

Q|SI> - Original paper in Chinese with English abstract. English version at arXiv: "Q|SI>: A Quantum Programming Environment".

Q language - Software for the Q language.

qGCL - "Alternation in Quantum Programming: From Superposition of Data to Superposition of Programs".

QMASM - Specific to D-Wave systems. QMASM Documentation. Author Scott Pakin's edif2qmasm and QMASM webpage at LANL.

Functional languages

QFC and QPL - Author's website.

QML - Main site: http://sneezy.cs.nott.ac.uk/QML/ (not responding, a month later), Archive.Org copy of sneezy.cs.nott.ac.uk, author's PhD thesis: "A functional quantum programming language" (PDF).

LIQUi|> - Extension to F# (F Sharp).

Quantum lambda calculi - Wikipedia lists a few versions.

Quipper - A Haskell based scalable functional programming language for quantum computing. See also Proto-Quipper. A Talk by Peter Selinger (FSCD 2018) titled "Challenges in Quantum Programming Languages" (.PDF) discusses these languages.

Multi-Paradigm languages

Q# (Q Sharp) - A domain-specific programming language used for expressing quantum algorithms. It was initially released to the public by Microsoft as part of the Quantum Development Kit. Also available are Microsoft Quantum Katas, a series of self-paced tutorials aimed at teaching elements of quantum computing and Q# programming at the same time.

Strawberry Fields (from XanduAI) is a full-stack Python library for designing, simulating, and optimizing continuous variable quantum optical circuits.

The website Quantum Computing Report has a Tools webpage listing over a dozen links, some new and some repeating the above list.

See also QuanTiki's webpage: "List of QC simulators", for a huge list of simulators and programming languages based on: C/C++, CaML, OCaml, F#, along with GUI based, Java, JavaScript, Julia, Maple, Mathematica, Maxima, Matlab/Octave, .NET, Perl/PHP, Python, Scheme/Haskell/LISP/ML and other online services providing calculators, compilers, simulators, and toolkits, etc.

Are there certain benefits to choosing particular ones?

If you plan on using a particular quantum computer then one would hope that the programming language developed by the manufacturer is both best suited for that particular machine and well supported.

Choosing a language with a larger following means that there are more Forums available and hopefully more bug fixes and support.

Unfortunately, that leaves some great niche products to struggle to gain a user base. Trying to find one language that is both powerful/expressive and supported across various platforms is the trick, the answer is an opinion ATM.

An evaluation of four software platforms: Forest (pyQuil), QISKit, ProjectQ, and the Quantum Developer Kit is offered by Ryan LaRose in "Overview and Comparison of Gate Level Quantum Software Platforms" (6 Jul 2018).

Updates:

Google's Cirq and OpenFermion-Cirq: "Google's AI Blog - Announcing Cirq: An Open Source Framework for NISQ Algorithms".

D-Wave's Leap and Ocean SDK allows access to a D-Wave 2000Q™ System in a cloud environment with access to a 2000+ qubit quantum annealing machine to test and run workloads for free, assuming the core algorithms used go into the open source pool. Apply to login at D-Wave's Leap In webpage.

Rigetti Computing's Quantum Cloud Service (QCS) offers a Quantum Machine Image, a virtualized programming, and execution environment that is pre-configured with Forest 2.0, to access up to 16 qubits of a 128 qubit computer.

Stay tuned for information on Fujitsu's Digital Annealer, an architecture capable of performing computations some 10,000 times faster than a conventional computer. If they eventually provide a development environment that is cross-compatible with true quantum computers these two paragraphs will remain in this answer, otherwise I will remove them.

While their silicon chip is not quantum in nature Fujitsu has partnered with 1Qbit to develop what is described as a "Quantum Inspired AI Cloud Service", whether their Digital Annealer quacks like a duck (anneals like a D-Wave, and uses compatible code) remains to be seen. Visit here to access the Fujitsu Digital Annealer Technical Service.

University of Pennsylvania's QWIRE (choir) is a quantum circuit language and formal verification tool, it has a GitHub webpage.

A review of: Cirq, Cliffords.jl, dimod, dwave-system, FermiLib, Forest (pyQuil & Grove), OpenFermion, ProjectQ, PyZX, QGL.jl, Qbsolv, Qiskit Terra and Aqua, Qiskit Tutorials, and Qiskit.js, Qrack, Quantum Fog, Quantum++, Qubiter, Quirk, reference-qvm, ScaffCC, Strawberry Fields, XACC, and finally XACC VQE is offered in the paper: "Open source software in quantum computing" (Dec 21 2018), by Mark Fingerhuth, Tomáš Babej, and Peter Wittek.