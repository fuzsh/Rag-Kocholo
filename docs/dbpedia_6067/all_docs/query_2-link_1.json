{
    "id": "dbpedia_6067_2",
    "rank": 1,
    "data": {
        "url": "https://quantumcomputing.stackexchange.com/questions/1474/what-programming-languages-are-available-for-quantum-computers",
        "read_more_link": "",
        "language": "en",
        "title": "What programming languages are available for quantum computers?",
        "top_image": "https://cdn.sstatic.net/Sites/quantumcomputing/Img/apple-touch-icon@2.png?v=6a4d4eaaa901",
        "meta_img": "https://cdn.sstatic.net/Sites/quantumcomputing/Img/apple-touch-icon@2.png?v=6a4d4eaaa901",
        "images": [
            "https://cdn.sstatic.net/Sites/quantumcomputing/Img/logo.svg?v=16f36d5eaa05",
            "https://i.sstatic.net/LrYyV.png?s=64",
            "https://www.gravatar.com/avatar/373f50cb30240c30697a6f94ac7ebc17?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/NgCbm.png?s=64",
            "https://i.sstatic.net/MbUgK.jpg?s=64",
            "https://www.gravatar.com/avatar/1f49479fbcc24cf61212543247f825a0?s=64&d=identicon&r=PG",
            "https://i.sstatic.net/Haz6W.jpg?s=64",
            "https://www.gravatar.com/avatar/683071653c5e153a6ffcb88ee0c6506f?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://i.sstatic.net/2PTxJ.jpg?s=64",
            "https://www.gravatar.com/avatar/36ebd2b83e75ef2f4a7cf477f8f6a084?s=64&d=identicon&r=PG",
            "https://lh3.googleusercontent.com/--U6JIvZIMWk/AAAAAAAAAAI/AAAAAAAAaEA/jbTIz1KJIBM/photo.jpg?sz=64",
            "https://www.gravatar.com/avatar/3c2fea571db6432ea744e4d9100fe917?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://www.gravatar.com/avatar/03007e5ff4e87e2e7a0fe07d889f6c72?s=64&d=identicon&r=PG&f=y&so-version=2",
            "https://quantumcomputing.stackexchange.com/posts/1474/ivc/5faf?prg=4d120fcb-f466-45a7-b2c3-7a4020a2f257"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": "2018-03-29T19:39:56",
        "summary": "",
        "meta_description": "From this question, I gathered that the main quantum computing programming languages are Q# and QISKit.\n\nWhat other programming languages are available for programming quantum computers? Are there",
        "meta_lang": "en",
        "meta_favicon": "https://cdn.sstatic.net/Sites/quantumcomputing/Img/favicon.ico?v=d36ec9c2a788",
        "meta_site_name": "Quantum Computing Stack Exchange",
        "canonical_link": "https://quantumcomputing.stackexchange.com/questions/1474/what-programming-languages-are-available-for-quantum-computers",
        "text": "Wikipedia list of Quantum Computer programming languages\n\n(This answer is not a copy of that webpage, it's more updated and with verified links. In some cases the author's paper or website link is added.)\n\nQuantum instruction sets\n\nQuil - An instruction set architecture for quantum computing that first introduced a shared quantum/classical memory model. See also PyQuil.\n\nOpenQASM - The intermediate representation introduced by IBM for use with their Quantum Experience.\n\nQuantum programming languages\n\nImperative languages\n\nQCL - One of the first implemented quantum programming languages.\n\nQuantum pseudocode - [Not actually a language, but a nice way to represent quantum algorithms and operations.] E. H. Knill. \"Conventions for Quantum Pseudocode\", unpublished, LANL report LAUR-96-2724 (PDF Source 1, 2), Search at arXiv for all papers referencing Knill's paper.\n\nQ|SI> - Original paper in Chinese with English abstract. English version at arXiv: \"Q|SI>: A Quantum Programming Environment\".\n\nQ language - Software for the Q language.\n\nqGCL - \"Alternation in Quantum Programming: From Superposition of Data to Superposition of Programs\".\n\nQMASM - Specific to D-Wave systems. QMASM Documentation. Author Scott Pakin's edif2qmasm and QMASM webpage at LANL.\n\nFunctional languages\n\nQFC and QPL - Author's website.\n\nQML - Main site: http://sneezy.cs.nott.ac.uk/QML/ (not responding, a month later), Archive.Org copy of sneezy.cs.nott.ac.uk, author's PhD thesis: \"A functional quantum programming language\" (PDF).\n\nLIQUi|> - Extension to F# (F Sharp).\n\nQuantum lambda calculi - Wikipedia lists a few versions.\n\nQuipper - A Haskell based scalable functional programming language for quantum computing. See also Proto-Quipper. A Talk by Peter Selinger (FSCD 2018) titled \"Challenges in Quantum Programming Languages\" (.PDF) discusses these languages.\n\nMulti-Paradigm languages\n\nQ# (Q Sharp) - A domain-specific programming language used for expressing quantum algorithms. It was initially released to the public by Microsoft as part of the Quantum Development Kit. Also available are Microsoft Quantum Katas, a series of self-paced tutorials aimed at teaching elements of quantum computing and Q# programming at the same time.\n\nStrawberry Fields (from XanduAI) is a full-stack Python library for designing, simulating, and optimizing continuous variable quantum optical circuits.\n\nThe website Quantum Computing Report has a Tools webpage listing over a dozen links, some new and some repeating the above list.\n\nSee also QuanTiki's webpage: \"List of QC simulators\", for a huge list of simulators and programming languages based on: C/C++, CaML, OCaml, F#, along with GUI based, Java, JavaScript, Julia, Maple, Mathematica, Maxima, Matlab/Octave, .NET, Perl/PHP, Python, Scheme/Haskell/LISP/ML and other online services providing calculators, compilers, simulators, and toolkits, etc.\n\nAre there certain benefits to choosing particular ones?\n\nIf you plan on using a particular quantum computer then one would hope that the programming language developed by the manufacturer is both best suited for that particular machine and well supported.\n\nChoosing a language with a larger following means that there are more Forums available and hopefully more bug fixes and support.\n\nUnfortunately, that leaves some great niche products to struggle to gain a user base. Trying to find one language that is both powerful/expressive and supported across various platforms is the trick, the answer is an opinion ATM.\n\nAn evaluation of four software platforms: Forest (pyQuil), QISKit, ProjectQ, and the Quantum Developer Kit is offered by Ryan LaRose in \"Overview and Comparison of Gate Level Quantum Software Platforms\" (6 Jul 2018).\n\nUpdates:\n\nGoogle's Cirq and OpenFermion-Cirq: \"Google's AI Blog - Announcing Cirq: An Open Source Framework for NISQ Algorithms\".\n\nD-Wave's Leap and Ocean SDK allows access to a D-Wave 2000Q™ System in a cloud environment with access to a 2000+ qubit quantum annealing machine to test and run workloads for free, assuming the core algorithms used go into the open source pool. Apply to login at D-Wave's Leap In webpage.\n\nRigetti Computing's Quantum Cloud Service (QCS) offers a Quantum Machine Image, a virtualized programming, and execution environment that is pre-configured with Forest 2.0, to access up to 16 qubits of a 128 qubit computer.\n\nStay tuned for information on Fujitsu's Digital Annealer, an architecture capable of performing computations some 10,000 times faster than a conventional computer. If they eventually provide a development environment that is cross-compatible with true quantum computers these two paragraphs will remain in this answer, otherwise I will remove them.\n\nWhile their silicon chip is not quantum in nature Fujitsu has partnered with 1Qbit to develop what is described as a \"Quantum Inspired AI Cloud Service\", whether their Digital Annealer quacks like a duck (anneals like a D-Wave, and uses compatible code) remains to be seen. Visit here to access the Fujitsu Digital Annealer Technical Service.\n\nUniversity of Pennsylvania's QWIRE (choir) is a quantum circuit language and formal verification tool, it has a GitHub webpage.\n\nA review of: Cirq, Cliffords.jl, dimod, dwave-system, FermiLib, Forest (pyQuil & Grove), OpenFermion, ProjectQ, PyZX, QGL.jl, Qbsolv, Qiskit Terra and Aqua, Qiskit Tutorials, and Qiskit.js, Qrack, Quantum Fog, Quantum++, Qubiter, Quirk, reference-qvm, ScaffCC, Strawberry Fields, XACC, and finally XACC VQE is offered in the paper: \"Open source software in quantum computing\" (Dec 21 2018), by Mark Fingerhuth, Tomáš Babej, and Peter Wittek."
    }
}