{
    "id": "dbpedia_8972_2",
    "rank": 23,
    "data": {
        "url": "https://learn.microsoft.com/en-us/dotnet/api/system.globalization.regioninfo.isocurrencysymbol%3Fview%3Dnet-8.0",
        "read_more_link": "",
        "language": "en",
        "title": "RegionInfo.ISOCurrencySymbol Property (System.Globalization)",
        "top_image": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "meta_img": "https://learn.microsoft.com/en-us/media/open-graph-image.png",
        "images": [
            "https://learn.microsoft.com/media/logos/logo_net.svg",
            "https://learn.microsoft.com/media/logos/logo_net.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "dotnet-bot"
        ],
        "publish_date": null,
        "summary": "",
        "meta_description": "Gets the three-character ISO 4217 currency symbol associated with the country/region.",
        "meta_lang": "en",
        "meta_favicon": "",
        "meta_site_name": "",
        "canonical_link": "https://learn.microsoft.com/en-us/dotnet/api/system.globalization.regioninfo.isocurrencysymbol?view=net-8.0",
        "text": "public: virtual property System::String ^ ISOCurrencySymbol { System::String ^ get(); };\n\npublic virtual string ISOCurrencySymbol { get; }\n\nmember this.ISOCurrencySymbol : string\n\nPublic Overridable ReadOnly Property ISOCurrencySymbol As String\n\nProperty Value\n\nThe three-character ISO 4217 currency symbol associated with the country/region.\n\nExamples\n\nThe following code example displays the properties of the RegionInfo class.\n\nusing namespace System; using namespace System::Globalization; int main() { // Displays the property values of the RegionInfo for \"US\". RegionInfo^ myRI1 = gcnew RegionInfo( \"US\" ); Console::WriteLine( \" Name: {0}\", myRI1->Name ); Console::WriteLine( \" DisplayName: {0}\", myRI1->DisplayName ); Console::WriteLine( \" EnglishName: {0}\", myRI1->EnglishName ); Console::WriteLine( \" IsMetric: {0}\", myRI1->IsMetric ); Console::WriteLine( \" ThreeLetterISORegionName: {0}\", myRI1->ThreeLetterISORegionName ); Console::WriteLine( \" ThreeLetterWindowsRegionName: {0}\", myRI1->ThreeLetterWindowsRegionName ); Console::WriteLine( \" TwoLetterISORegionName: {0}\", myRI1->TwoLetterISORegionName ); Console::WriteLine( \" CurrencySymbol: {0}\", myRI1->CurrencySymbol ); Console::WriteLine( \" ISOCurrencySymbol: {0}\", myRI1->ISOCurrencySymbol ); } /* This code produces the following output. Name: US DisplayName: United States EnglishName: United States IsMetric: False ThreeLetterISORegionName: USA ThreeLetterWindowsRegionName: USA TwoLetterISORegionName: US CurrencySymbol: $ ISOCurrencySymbol: USD */\n\nusing System; using System.Globalization; public class SamplesRegionInfo { public static void Main() { // Displays the property values of the RegionInfo for \"US\". RegionInfo myRI1 = new RegionInfo( \"US\" ); Console.WriteLine( \" Name: {0}\", myRI1.Name ); Console.WriteLine( \" DisplayName: {0}\", myRI1.DisplayName ); Console.WriteLine( \" EnglishName: {0}\", myRI1.EnglishName ); Console.WriteLine( \" IsMetric: {0}\", myRI1.IsMetric ); Console.WriteLine( \" ThreeLetterISORegionName: {0}\", myRI1.ThreeLetterISORegionName ); Console.WriteLine( \" ThreeLetterWindowsRegionName: {0}\", myRI1.ThreeLetterWindowsRegionName ); Console.WriteLine( \" TwoLetterISORegionName: {0}\", myRI1.TwoLetterISORegionName ); Console.WriteLine( \" CurrencySymbol: {0}\", myRI1.CurrencySymbol ); Console.WriteLine( \" ISOCurrencySymbol: {0}\", myRI1.ISOCurrencySymbol ); } } /* This code produces the following output. Name: US DisplayName: United States EnglishName: United States IsMetric: False ThreeLetterISORegionName: USA ThreeLetterWindowsRegionName: USA TwoLetterISORegionName: US CurrencySymbol: $ ISOCurrencySymbol: USD */\n\nImports System.Globalization Public Class SamplesRegionInfo Public Shared Sub Main() ' Displays the property values of the RegionInfo for \"US\". Dim myRI1 As New RegionInfo(\"US\") Console.WriteLine(\" Name: {0}\", myRI1.Name) Console.WriteLine(\" DisplayName: {0}\", myRI1.DisplayName) Console.WriteLine(\" EnglishName: {0}\", myRI1.EnglishName) Console.WriteLine(\" IsMetric: {0}\", myRI1.IsMetric) Console.WriteLine(\" ThreeLetterISORegionName: {0}\", myRI1.ThreeLetterISORegionName) Console.WriteLine(\" ThreeLetterWindowsRegionName: {0}\", myRI1.ThreeLetterWindowsRegionName) Console.WriteLine(\" TwoLetterISORegionName: {0}\", myRI1.TwoLetterISORegionName) Console.WriteLine(\" CurrencySymbol: {0}\", myRI1.CurrencySymbol) Console.WriteLine(\" ISOCurrencySymbol: {0}\", myRI1.ISOCurrencySymbol) End Sub End Class 'This code produces the following output. ' ' Name: US ' DisplayName: United States ' EnglishName: United States ' IsMetric: False ' ThreeLetterISORegionName: USA ' ThreeLetterWindowsRegionName: USA ' TwoLetterISORegionName: US ' CurrencySymbol: $ ' ISOCurrencySymbol: USD\n\nRemarks\n\nThe following example lists some of the ISO 4217 currency symbols returned by the ISOCurrencySymbol property.\n\nCountry/region Currency name ISO 4217 currency symbol Albania Albanian Lek ALL Algeria Algerian Dinar DZD Argentina Argentine Peso ARS Armenia Armenian Dram AMD Australia Australian Dollar AUD Austria Euro EUR Azerbaijan Azerbaijanian Manat AZN Bahrain Bahraini Dinar BHD Belarus Belarussian Ruble BYR Belgium Euro EUR Belize Belize Dollar BZD Bolivarian Republic of Venezuela Venezuelan Bolivar VEF Bolivia Boliviano BOB Brazil Real BRL Brunei Brunei Dollar BND Bulgaria Bulgarian Lev BGN Canada Canadian Dollar CAD Caribbean US Dollar USD Chile Chilean Peso CLP Colombia Colombian Peso COP Costa Rica Costa Rican Colon CRC Croatia Croatian Kuna HRK Czech Republic Czech Koruna CZK Denmark Danish Krone DKK Dominican Republic Dominican Peso DOP Ecuador US Dollar USD Egypt Egyptian Pound EGP El Salvador U.S. Dollar USD Estonia Estonian Kroon EEK Ethiopia Ethiopian Birr ETB Faroe Islands Danish Krone DKK Finland Euro EUR France Euro EUR Georgia Lari GEL Germany Euro EUR Greece Euro EUR Guatemala Guatemalan Quetzal GTQ Honduras Honduran Lempira HNL Hong Kong SAR Hong Kong Dollar HKD Hungary Hungarian Forint HUF Iceland Icelandic Krona ISK India Indian Rupee INR Indonesia Indonesian Rupiah IDR Iran Iranian Rial IRR Iraq Iraqi Dinar IQD Ireland Euro EUR Islamic Republic of Pakistan Pakistan Rupee PKR Israel Israeli New Shekel ILS Italy Euro EUR Jamaica Jamaican Dollar JMD Japan Japanese Yen JPY Jordan Jordanian Dinar JOD Kazakhstan Tenge KZT Kenya Kenyan Shilling KES Korea Korean Won KRW Kuwait Kuwaiti Dinar KWD Kyrgyzstan som KGS Latvia Latvian Lats LVL Lebanon Lebanese Pound LBP Libya Libyan Dinar LYD Liechtenstein Swiss Franc CHF Lithuania Lithuanian Litas LTL Luxembourg Euro EUR Macao SAR Macao Pataca MOP North Macedonia Macedonian Denar MKD Malaysia Malaysian Ringgit MYR Maldives Rufiyaa MVR Mexico Mexican Peso MXN Mongolia Tugrik MNT Morocco Moroccan Dirham MAD Netherlands Euro EUR New Zealand New Zealand Dollar NZD Nicaragua Nicaraguan Cordoba Oro NIO Norway Norwegian Krone NOK Oman Omani Rial OMR Panama Panamanian Balboa PAB Paraguay Paraguay Guarani PYG People's Republic of China PRC Renminbi CNY Peru Peruvian Nuevo Sol PEN Philippines Philippine Peso PHP Poland Polish Zloty PLN Portugal Euro EUR Principality of Monaco Euro EUR Puerto Rico US Dollar USD Qatar Qatari Rial QAR Romania Romanian Leu RON Russia Russian Ruble RUB Saudi Arabia Saudi Riyal SAR Serbia Serbian Dinar RSD Singapore Singapore Dollar SGD Slovakia Euro EUR Slovenia Euro EUR South Africa South African Rand ZAR Spain Euro EUR Sweden Swedish Krona SEK Switzerland Swiss Franc CHF Syria Syrian Pound SYP Taiwan New Taiwan Dollar TWD Thailand Thai Baht THB Trinidad and Tobago Trinidad Dollar TTD Tunisia Tunisian Dinar TND Turkey Turkish Lira TRY Ukraine Ukrainian Hryvnia UAH United Arab Emirates UAE Dirham AED United Kingdom UK Pound Sterling GBP United States US Dollar USD Uruguay Peso Uruguayo UYU Uzbekistan Uzbekistan Som UZS Vietnam Vietnamese Dong VND Yemen Yemeni Rial YER Zimbabwe Zimbabwe Dollar ZWL\n\nApplies to\n\nSee also"
    }
}