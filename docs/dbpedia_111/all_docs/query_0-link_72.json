{
    "id": "dbpedia_111_0",
    "rank": 72,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Password_strength",
        "read_more_link": "",
        "language": "en",
        "title": "Password strength",
        "top_image": "https://upload.wikimedia.org/wikipedia/commons/0/0f/KeePass_random_password.png",
        "meta_img": "https://upload.wikimedia.org/wikipedia/commons/0/0f/KeePass_random_password.png",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/KeePass_random_password.png/400px-KeePass_random_password.png",
            "https://wikimedia.org/api/rest_v1/media/math/render/svg/d30dfce3e0cd67b4fc5b4410cd7d0d5e89781f6d",
            "https://wikimedia.org/api/rest_v1/media/math/render/svg/998d6b928d9677e34401e0c2599bf65f37573202",
            "https://wikimedia.org/api/rest_v1/media/math/render/svg/41cd14e9fa8645c07bb88437f88f8a2464451e5b",
            "https://upload.wikimedia.org/wikipedia/en/thumb/b/b4/Ambox_important.svg/40px-Ambox_important.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2006-03-20T23:07:12+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Password_strength",
        "text": "Resistance of a password to being guessed\n\nFor organizational rules on passwords, see Password policy.\n\nPassword strength is a measure of the effectiveness of a password against guessing or brute-force attacks. In its usual form, it estimates how many trials an attacker who does not have direct access to the password would need, on average, to guess it correctly. The strength of a password is a function of length, complexity, and unpredictability.[1]\n\nUsing strong passwords lowers the overall risk of a security breach, but strong passwords do not replace the need for other effective security controls.[2] The effectiveness of a password of a given strength is strongly determined by the design and implementation of the authentication factors (knowledge, ownership, inherence). The first factor is the main focus of this article.\n\nThe rate at which an attacker can submit guessed passwords to the system is a key factor in determining system security. Some systems impose a time-out of several seconds after a small number (e.g. three) of failed password entry attempts. In the absence of other vulnerabilities, such systems can be effectively secured with relatively simple passwords. However, the system store information about the user's passwords in some form and if that information is stolen, say by breaching system security, the user's passwords can be at risk.\n\nIn 2019, the United Kingdom's NCSC analyzed public databases of breached accounts to see which words, phrases, and strings people used. The most popular password on the list was 123456, appearing in more than 23 million passwords. The second-most popular string, 123456789, was not much harder to crack, while the top five included \"qwerty\", \"password\", and 1111111.[3]\n\nPassword creation\n\n[edit]\n\nPasswords are created either automatically (using randomizing equipment) or by a human; the latter case is more common. While the strength of randomly chosen passwords against a brute-force attack can be calculated with precision, determining the strength of human-generated passwords is difficult.\n\nTypically, humans are asked to choose a password, sometimes guided by suggestions or restricted by a set of rules, when creating a new account for a computer system or internet website. Only rough estimates of strength are possible since humans tend to follow patterns in such tasks, and those patterns can usually assist an attacker.[4] In addition, lists of commonly chosen passwords are widely available for use by password-guessing programs. Such lists include the numerous online dictionaries for various human languages, breached databases of plaintext and hashed passwords from various online business and social accounts, along with other common passwords. All items in such lists are considered weak, as are passwords that are simple modifications of them.\n\nAlthough random password generation programs are available nowadays which are meant to be easy to use, they usually generate random, hard-to-remember passwords, often resulting in people preferring to choose their own. However, this is inherently insecure because the person's lifestyle, entertainment preferences, and other key individualistic qualities usually come into play to influence the choice of password, while the prevalence of online social media has made obtaining information about people much easier.\n\nPassword guess validation\n\n[edit]\n\nSystems that use passwords for authentication must have some way to check any password entered to gain access. If the valid passwords are simply stored in a system file or database, an attacker who gains sufficient access to the system will obtain all user passwords, giving the attacker access to all accounts on the attacked system and possibly other systems where users employ the same or similar passwords. One way to reduce this risk is to store only a cryptographic hash of each password instead of the password itself. Standard cryptographic hashes, such as the Secure Hash Algorithm (SHA) series, are very hard to reverse, so an attacker who gets hold of the hash value cannot directly recover the password. However, knowledge of the hash value lets the attacker quickly test guesses offline. Password cracking programs are widely available that will test a large number of trial passwords against a purloined cryptographic hash.\n\nImprovements in computing technology keep increasing the rate at which guessed passwords can be tested. For example, in 2010, the Georgia Tech Research Institute developed a method of using GPGPU to crack passwords much faster.[5] Elcomsoft invented the usage of common graphic cards for quicker password recovery in August 2007 and soon filed a corresponding patent in the US.[6] By 2011, commercial products were available that claimed the ability to test up to 112,000 passwords per second on a standard desktop computer, using a high-end graphics processor for that time.[7] Such a device will crack a six-letter single-case password in one day. The work can be distributed over many computers for an additional speedup proportional to the number of available computers with comparable GPUs. Special key stretching hashes are available that take a relatively long time to compute, reducing the rate at which guessing can take place. Although it is considered best practice to use key stretching, many common systems do not.\n\nAnother situation where quick guessing is possible is when the password is used to form a cryptographic key. In such cases, an attacker can quickly check to see if a guessed password successfully decodes encrypted data. For example, one commercial product claims to test 103,000 WPA PSK passwords per second.[8]\n\nIf a password system only stores the hash of the password, an attacker can pre-compute hash values for common password variants and all passwords shorter than a certain length, allowing very rapid recovery of the password once its hash is obtained. Very long lists of pre-computed password hashes can be efficiently stored using rainbow tables. This method of attack can be foiled by storing a random value, called a cryptographic salt, along with the hash. The salt is combined with the password when computing the hash, so an attacker precomputing a rainbow table would have to store for each password its hash with every possible salt value. This becomes infeasible if the salt has a big enough range, say a 32-bit number. Many authentication systems in common use do not employ salts and rainbow tables are available on the Internet for several such systems.\n\nEntropy as a measure of password strength\n\n[edit]\n\nPassword strength is specified by the amount of information entropy, which is measured in shannon (Sh) and is a concept from information theory. It can be regarded as the minimum number of bits necessary to hold the information in a password of a given type. A related measure is the base-2 logarithm of the number of guesses needed to find the password with certainty, which is commonly referred to as the \"bits of entropy\".[9] A password with 42 bits of entropy would be as strong as a string of 42 bits chosen randomly, for example by a fair coin toss. Put another way, a password with 42 bits of entropy would require 242 (4,398,046,511,104) attempts to exhaust all possibilities during a brute force search. Thus, increasing the entropy of the password by one bit doubles the number of guesses required, making an attacker's task twice as difficult. On average, an attacker will have to try half the possible number of passwords before finding the correct one.[4]\n\nRandom passwords\n\n[edit]\n\nMain article: Random password generator\n\nRandom passwords consist of a string of symbols of specified length taken from some set of symbols using a random selection process in which each symbol is equally likely to be selected. The symbols can be individual characters from a character set (e.g., the ASCII character set), syllables designed to form pronounceable passwords or even words from a word list (thus forming a passphrase).\n\nThe strength of random passwords depends on the actual entropy of the underlying number generator; however, these are often not truly random, but pseudorandom. Many publicly available password generators use random number generators found in programming libraries that offer limited entropy. However, most modern operating systems offer cryptographically strong random number generators that are suitable for password generation. It is also possible to use ordinary dice to generate random passwords (see Random password generator § Stronger methods). Random password programs often can ensure that the resulting password complies with a local password policy; for instance, by always producing a mix of letters, numbers, and special characters.\n\nFor passwords generated by a process that randomly selects a string of symbols of length, L, from a set of N possible symbols, the number of possible passwords can be found by raising the number of symbols to the power L, i.e. NL. Increasing either L or N will strengthen the generated password. The strength of a random password as measured by the information entropy is just the base-2 logarithm or log2 of the number of possible passwords, assuming each symbol in the password is produced independently. Thus a random password's information entropy, H, is given by the formula:\n\nwhere N is the number of possible symbols and L is the number of symbols in the password. H is measured in bits.[4][10] In the last expression, log can be to any base.\n\nEntropy per symbol for different symbol sets Symbol set Symbol count\n\nN Entropy per symbol\n\nH Arabic numerals (0–9) (e.g. PIN) 10 3.322 bits Hexadecimal numerals (0–9, A–F) (e.g. WEP keys) 16 4.000 bits Case insensitive Latin alphabet (a–z or A–Z) 26 4.700 bits Case insensitive alphanumeric (a–z or A–Z, 0–9) 36 5.170 bits Case sensitive Latin alphabet (a–z, A–Z) 52 5.700 bits Case sensitive alphanumeric (a–z, A–Z, 0–9) 62 5.954 bits All ASCII printable characters except space 94 6.555 bits All Latin-1 Supplement characters 94 6.555 bits All ASCII printable characters 95 6.570 bits All extended ASCII printable characters 218 7.768 bits Binary (0–255 or 8 bits or 1 byte) 256 8.000 bits Diceware word list 7776 12.925 bits per word\n\nA binary byte is usually expressed using two hexadecimal characters.\n\nTo find the length, L, needed to achieve a desired strength H, with a password drawn randomly from a set of N symbols, one computes:\n\nL = ⌈ H log 2 ⁡ N ⌉ {\\displaystyle L={\\left\\lceil {\\frac {H}{\\log _{2}N}}\\right\\rceil }}\n\nwhere ⌈ ⌉ {\\displaystyle \\left\\lceil \\ \\right\\rceil } denotes the mathematical ceiling function, i.e. rounding up to the next largest whole number.\n\nThe following table uses this formula to show the required lengths of truly randomly generated passwords to achieve desired password entropies for common symbol sets:\n\nLengths L of truly randomly generated passwords required to achieve a desired password entropy H for symbol sets containing N symbols Desired password\n\nentropy H Arabic\n\nnumerals Hexadecimal Case insensitive Case sensitive All ASCII All Extended\n\nASCII Diceware\n\nword list Latin\n\nalphabet alpha-\n\nnumeric Latin\n\nalphabet alpha-\n\nnumeric printable characters 8 bits (1 byte) 3 2 2 2 2 2 2 2 1 word 32 bits (4 bytes) 10 8 7 7 6 6 5 5 3 words 40 bits (5 bytes) 13 10 9 8 8 7 7 6 4 words 64 bits (8 bytes) 20 16 14 13 12 11 10 9 5 words 80 bits (10 bytes) 25 20 18 16 15 14 13 11 7 words 96 bits (12 bytes) 29 24 21 19 17 17 15 13 8 words 128 bits (16 bytes) 39 32 28 25 23 22 20 17 10 words 160 bits (20 bytes) 49 40 35 31 29 27 25 21 13 words 192 bits (24 bytes) 58 48 41 38 34 33 30 25 15 words 224 bits (28 bytes) 68 56 48 44 40 38 35 29 18 words 256 bits (32 bytes) 78 64 55 50 45 43 39 33 20 words\n\nHuman-generated passwords\n\n[edit]\n\nPeople are notoriously poor at achieving sufficient entropy to produce satisfactory passwords. According to one study involving half a million users, the average password entropy was estimated at 40.54 bits.[11]\n\nThus, in one analysis of over 3 million eight-character passwords, the letter \"e\" was used over 1.5 million times, while the letter \"f\" was used only 250,000 times. A uniform distribution would have had each character being used about 900,000 times. The most common number used is \"1\", whereas the most common letters are a, e, o, and r.[12]\n\nUsers rarely make full use of larger character sets in forming passwords. For example, hacking results obtained from a MySpace phishing scheme in 2006 revealed 34,000 passwords, of which only 8.3% used mixed case, numbers, and symbols.[13]\n\nThe full strength associated with using the entire ASCII character set (numerals, mixed case letters, and special characters) is only achieved if each possible password is equally likely. This seems to suggest that all passwords must contain characters from each of several character classes, perhaps upper and lower-case letters, numbers, and non-alphanumeric characters. Such a requirement is a pattern in password choice and can be expected to reduce an attacker's \"work factor\" (in Claude Shannon's terms). This is a reduction in password \"strength\". A better requirement would be to require a password not to contain any word in an online dictionary, or list of names, or any license plate pattern from any state (in the US) or country (as in the EU). If patterned choices are required, humans are likely to use them in predictable ways, such as capitalizing a letter, adding one or two numbers, and a special character. This predictability means that the increase in password strength is minor when compared to random passwords.\n\nNIST Special Publication 800-63-2\n\n[edit]\n\nNIST Special Publication 800-63 of June 2004 (revision two) suggested a scheme to approximate the entropy of human-generated passwords:[4]\n\nUsing this scheme, an eight-character human-selected password without uppercase characters and non-alphabetic characters OR with either but of the two character sets is estimated to have eighteen bits of entropy. The NIST publication concedes that at the time of development, little information was available on the real-world selection of passwords. Later research into human-selected password entropy using newly available real-world data has demonstrated that the NIST scheme does not provide a valid metric for entropy estimation of human-selected passwords.[14] The June 2017 revision of SP 800-63 (Revision three) drops this approach.[15]\n\nUsability and implementation considerations\n\n[edit]\n\nBecause national keyboard implementations vary, not all 94 ASCII printable characters can be used everywhere. This can present a problem to an international traveler who wished to log into a remote system using a keyboard on a local computer (see article concerned with keyboard layouts). Many handheld devices, such as tablet computers and smart phones, require complex shift sequences or keyboard app swapping to enter special characters.\n\nAuthentication programs can vary as to the list of allowable password characters. Some do not recognize case differences (e.g., the upper-case \"E\" is considered equivalent to the lower-case \"e\"), and others prohibit some of the other symbols. In the past few decades, systems have permitted more characters in passwords, but limitations still exist. Systems also vary as to the maximum length of passwords allowed.\n\nAs a practical matter, passwords must be both reasonable and functional for the end user as well as strong enough for the intended purpose. Passwords that are too difficult to remember may be forgotten and so are more likely to be written on paper, which some consider a security risk.[16] In contrast, others argue that forcing users to remember passwords without assistance can only accommodate weak passwords, and thus poses a greater security risk. According to Bruce Schneier, most people are good at securing their wallets or purses, which is a \"great place\" to store a written password.[17]\n\nRequired bits of entropy\n\n[edit]\n\nThe minimum number of bits of entropy needed for a password depends on the threat model for the given application. If key stretching is not used, passwords with more entropy are needed. RFC 4086, \"Randomness Requirements for Security\", published June 2005, presents some example threat models and how to calculate the entropy desired for each one.[18] Their answers vary between 29 bits of entropy needed if only online attacks are expected, and up to 96 bits of entropy needed for important cryptographic keys used in applications like encryption where the password or key needs to be secure for a long period and stretching isn't applicable. A 2010 Georgia Tech Research Institute study based on unstretched keys recommended a 12-character random password but as a minimum length requirement.[5][19] It pays to bear in mind that since computing power continually grows, to prevent offline attacks the required number of bits of entropy should also increase over time.\n\nThe upper end is related to the stringent requirements of choosing keys used in encryption. In 1999, an Electronic Frontier Foundation project broke 56-bit DES encryption in less than a day using specially designed hardware.[20] In 2002, distributed.net cracked a 64-bit key in 4 years, 9 months, and 23 days.[21] As of October 12, 2011, distributed.net estimates that cracking a 72-bit key using current hardware will take about 45,579 days or 124.8 years.[22] Due to currently understood limitations from fundamental physics, there is no expectation that any digital computer (or combination) will be capable of breaking 256-bit encryption via a brute-force attack.[23] Whether or not quantum computers will be able to do so in practice is still unknown, though theoretical analysis suggests such possibilities.[24]\n\nGuidelines for strong passwords\n\n[edit]\n\nCommon guidelines\n\n[edit]\n\nGuidelines for choosing good passwords are typically designed to make passwords harder to discover by intelligent guessing. Common guidelines advocated by proponents of software system security have included:[25][26][27][28][29]\n\nConsider a minimum password length of 8[30] characters as a general guide. Both the US and UK cyber security departments recommend long and easily memorable passwords over short complex ones.[31][32]\n\nGenerate passwords randomly where feasible.\n\nAvoid using the same password twice (e.g. across multiple user accounts and/or software systems).\n\nAvoid character repetition, keyboard patterns, dictionary words, and sequential letters or numbers.\n\nAvoid using information that is or might become publicly associated with the user or the account, such as the user name, ancestors' names, or dates.\n\nAvoid using information that the user's colleagues and/or acquaintances might know to be associated with the user, such as relatives or pet names, romantic links (current or past), and biographical information (e.g. ID numbers, ancestors' names or dates).\n\nDo not use passwords that consist wholly of any simple combination of the aforementioned weak components.\n\nThe forcing of lowercase, uppercase alphabetic characters, numbers, and symbols in passwords was a common policy but has been found to decrease security, by making it easier to crack. Research has shown how predictable the common use of such symbols are, and the US,[33] UK[34] government cyber security departments advise against forcing their inclusion in password policy. Complex symbols also make remembering passwords much harder, which increases writing down, password resets, and password reuse – all of which lower rather than improve password security. The original author of password complexity rules, Bill Burr, has apologized and admits they decrease security, as research has found; this was widely reported in the media in 2017.[35] Online security researchers[36] and consultants are also supportive of the change[37] in best practice advice on passwords.\n\nSome guidelines advise against writing passwords down, while others, noting the large numbers of password-protected systems users must access, encourage writing down passwords as long as the written password lists are kept in a safe place, not attached to a monitor or in an unlocked desk drawer.[38] Use of a password manager is recommended by the NCSC.[39]\n\nThe possible character set for a password can be constrained by different websites or by the range of keyboards on which the password must be entered.[40]\n\nExamples of weak passwords\n\n[edit]\n\nAs with any security measure, passwords vary in strength; some are weaker than others. For example, the difference in strength between a dictionary word and a word with obfuscation (e.g. letters in the password are substituted by, say, numbers — a common approach) may cost a password-cracking device a few more seconds; this adds little strength. The examples below illustrate various ways weak passwords might be constructed, all of which are based on simple patterns which result in extremely low entropy, allowing them to be tested automatically at high speeds.:[12]\n\nDefault passwords (as supplied by the system vendor and meant to be changed at installation time): password, default, admin, guest, etc. Lists of default passwords are widely available on the internet.\n\nReused passwords: Passwords should be unique to a particular account. Altering reused passwords, such as changing a few letters or numbers, does not provide sufficient security.\n\nDictionary words: chameleon, RedSox, sandbags, bunnyhop!, IntenseCrabtree, etc., including words in non-English dictionaries.\n\nWords with numbers appended: password1, deer2000, john1234, etc., can be easily tested automatically with little lost time.\n\nWords with simple obfuscation: p@ssw0rd, l33th4x0r, g0ldf1sh, etc., can be tested automatically with little additional effort. For example, a domain administrator password compromised in the DigiNotar attack was reportedly Pr0d@dm1n.[41]\n\nDoubled words: crabcrab, stopstop, treetree, passpass, etc.\n\nCommon sequences from a keyboard row: qwerty, 123456, asdfgh, etc. including diagonal or backward sequences (qazplm, ytrewq, etc).\n\nNumeric sequences based on well known numbers such as 911 (9-1-1, 9/11), 314159... (pi), 27182... (e), 112 (1-1-2), etc.\n\nIdentifiers: jsmith123, 1/1/1970, 555–1234, one's username, etc.\n\nWeak passwords in non-English languages, such as contraseña (Spanish) and ji32k7au4a83 (bopomofo keyboard encoding from Chinese)[42]\n\nAnything personally related to an individual: license plate number, Social Security number, current or past telephone numbers, student ID, current address, previous addresses, birthday, sports team, relative's or pet's names/nicknames/birthdays/initials, etc., can easily be tested automatically after a simple investigation of a person's details.\n\nDates: dates follow a pattern and make your password weak.\n\nNames of well-known locations: New York, Texas, China, London, etc.\n\nNames of brands, celebrities, sports teams, musical groups, TV shows, movies, etc.\n\nShort passwords: Even if a password doesn't have any of the weaknesses listed above, if it is too short, it can be easily cracked.\n\nThere are many other ways a password can be weak,[43] corresponding to the strengths of various attack schemes; the core principle is that a password should have high entropy (usually taken to be equivalent to randomness) and not be readily derivable by any \"clever\" pattern, nor should passwords be mixed with information identifying the user. Online services often provide a restore password function that a hacker can figure out and by doing so bypass a password.\n\nRethinking password change guidelines\n\n[edit]\n\nIn the landscape of 2012, as delineated by William Cheswick in an article for ACM magazine, password security predominantly emphasized an alpha-numeric password of eight characters or more. Such a password, it was deduced, could resist ten million attempts per second for a duration of 252 days. However, with the assistance of contemporary GPUs at the time, this period was truncated to just about 9 hours, given a cracking rate of 7 billion attempts per second. A 13-character password was estimated to withstand GPU-computed attempts for over 900,000 years.[44][45]\n\nIn the context of 2023 hardware technology, the 2012 standard of an eight-character alpha-numeric password has become vulnerable, succumbing in a few hours. The time needed to crack a 13-character password is reduced to a few years. The current emphasis, thus, has shifted. Password strength is now gauged not just by its complexity but its length, with recommendations leaning towards passwords comprising at least 13-16 characters. This era has also seen the rise of Multi-Factor Authentication (MFA) as a crucial fortification measure. The advent and widespread adoption of password managers have further aided users in cultivating and maintaining an array of strong, unique passwords.[46]\n\nPassword policy\n\n[edit]\n\nMain article: Password policy\n\nA password policy is a guide to choosing satisfactory passwords. It is intended to:\n\nassist users in choosing strong passwords\n\nensure the passwords are suited to the target population\n\nProvide recommendations for users concerning the handling of their passwords\n\nimpose a recommendation to change any password which has been lost or suspected of compromise\n\nuse a password blacklist to block the use of weak or easily guessed passwords.\n\nPrevious password policies used to prescribe the characters which passwords must contain, such as numbers, symbols, or upper/lower case. While this is still in use, it has been debunked as less secure by university research,[47] by the original instigator[48] of this policy, and by the cyber security departments (and other related government security bodies[49]) of USA[50] and UK.[51] Password complexity rules of enforced symbols were previously used by major platforms such as Google[52] and Facebook,[53] but these have removed the requirement following the discovery that they actually reduced security. This is because the human element is a far greater risk than cracking, and enforced complexity leads most users to highly predictable patterns (number at the end, swap 3 for E, etc.) which helps crack passwords. So password simplicity and length (passphrases) are the new best practice and complexity is discouraged. Forced complexity rules also increase support costs, and user friction and discourage user signups.\n\nPassword expiration was in some older password policies but has been debunked[35] as best practice and is not supported by USA or UK governments, or Microsoft which removed[54] the password expiry feature. Password expiration was previously trying to serve two purposes:[55]\n\nIf the time to crack a password is estimated to be 100 days, password expiration times fewer than 100 days may help ensure insufficient time for an attacker.\n\nIf a password has been compromised, requiring it to be changed regularly may limit the access time for the attacker.\n\nHowever, password expiration has its drawbacks:[56][57]\n\nAsking users to change passwords frequently encourages simple, weak passwords.\n\nIf one has a truly strong password, there is little point in changing it. Changing passwords that are already strong introduces a risk that the new password may be less strong.\n\nA compromised password is likely to be used immediately by an attacker to install a backdoor, often via privilege escalation. Once this is accomplished, password changes won't prevent future attackers from accessing them.\n\nMoving from never changing one's password to changing the password on every authenticate attempt (pass or fail attempts) only doubles the number of attempts the attacker must make on average before guessing the password in a brute force attack. One gains much more security by just increasing the password length by one character than changing the password on every use.[citation needed]\n\nCreating and handling passwords\n\n[edit]\n\nThe hardest passwords to crack, for a given length and character set, are random character strings; if long enough they resist brute force attacks (because there are many characters) and guessing attacks (due to high entropy). However, such passwords are typically the hardest to remember. The imposition of a requirement for such passwords in a password policy may encourage users to write them down, store them in mobile devices, or share them with others as a safeguard against memory failure. While some people consider each of these user resorts to increase security risks, others suggest the absurdity of expecting users to remember distinct complex passwords for each of the dozens of accounts they access. For example, in 2005, security expert Bruce Schneier recommended writing down one's password:\n\nSimply, people can no longer remember passwords good enough to reliably defend against dictionary attacks, and are much more secure if they choose a password too complicated to remember and then write it down. We're all good at securing small pieces of paper. I recommend that people write their passwords down on a small piece of paper, and keep it with their other valuable small pieces of paper: in their wallet.[38]\n\nThe following measures may increase acceptance of strong password requirements if carefully used:\n\na training program. Also, updated training for those who fail to follow the password policy (lost passwords, inadequate passwords, etc.).\n\nrewarding strong password users by reducing the rate, or eliminating, the need for password changes (password expiration). The strength of user-chosen passwords can be estimated by automatic programs which inspect and evaluate proposed passwords when setting or changing a password.\n\ndisplaying to each user the last login date and time in the hope that the user may notice unauthorized access, suggesting a compromised password.\n\nallowing users to reset their passwords via an automatic system, which reduces help desk call volume. However, some systems are themselves insecure; for instance, easily guessed or researched answers to password reset questions bypass the advantages of a strong password system.\n\nusing randomly generated passwords that do not allow users to choose their passwords, or at least offering randomly generated passwords as an option.\n\nMemory techniques\n\n[edit]\n\nPassword policies sometimes suggest memory techniques to assist remembering passwords:\n\nmnemonic passwords: Some users develop mnemonic phrases and use them to generate more or less random passwords which are nevertheless relatively easy for the user to remember. For instance, the first letter of each word in a memorable phrase. Research estimates the password strength of such passwords to be about 3.7 bits per character, compared to the 6.6 bits for random passwords from ASCII printable characters.[58] Silly ones are possibly more memorable.[59] Another way to make random-appearing passwords more memorable is to use random words (see diceware) or syllables instead of randomly chosen letters.\n\nafter-the-fact mnemonics: After the password has been established, invent a mnemonic that fits.[60] It does not have to be reasonable or sensible, only memorable. This allows passwords to be random.\n\nvisual representations of passwords: a password is memorized based on a sequence of keys pressed, not the values of the keys themselves, e.g. a sequence !qAsdE#2 represents a rhomboid on a US keyboard. The method to produce such passwords is called PsychoPass.[61] Passwords produced by this method are much weaker than their length suggests, since successive keys are not independent and common keyboard sequences are included in password dictionaries. But some improvements can be made.[62][63]\n\npassword patterns: Any pattern in a password makes guessing (automated or not) easier and reduces an attacker's work factor.\n\nFor example, passwords of the following case-insensitive form: consonant, vowel, consonant, consonant, vowel, consonant, number, number (for example pinray45) are called Environ passwords. The pattern of alternating vowel and consonant characters was intended to make passwords more likely to be pronounceable and thus more memorable. Such patterns severely reduce the password's information entropy, making brute force password attacks considerably more efficient. In the UK in October 2005, employees of the British government were advised to use passwords in this form.[citation needed]\n\nPassword managers\n\n[edit]\n\nMain article: Password manager\n\nA reasonable compromise for using large numbers of passwords is to record them in a password manager program, which include stand-alone applications, web browser extensions, or a manager built into the operating system. A password manager allows the user to use hundreds of different passwords, and only have to remember a single password, the one which opens the encrypted password database.[64] Needless to say, this single password should be strong and well-protected (not recorded anywhere). Most password managers can automatically create strong passwords using a cryptographically secure random password generator, as well as calculating the entropy of the generated password. A good password manager will provide resistance against attacks such as key logging, clipboard logging and various other memory spying techniques.\n\nSee also\n\n[edit]\n\nKeystroke logging\n\nPassphrase\n\nPhishing\n\nVulnerability (computing)\n\nReferences\n\n[edit]\n\n6 Types of Password Attacks & How to Stop Them | OneLogin. (n.d.). Retrieved April 24, 2024, from https://www.google.com/\n\nFranchi, E., Poggi, A., & Tomaiuolo, M. (2015). Information and Password Attacks on Social Networks: An Argument for Cryptography. Journal of Information Technology Research, 8(1), 25–42. https://doi.org/10.4018/JITR.2015010103"
    }
}