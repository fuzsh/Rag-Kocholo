{
    "id": "dbpedia_111_0",
    "rank": 4,
    "data": {
        "url": "https://en.wikipedia.org/wiki/Code_page",
        "read_more_link": "",
        "language": "en",
        "title": "Code page",
        "top_image": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "meta_img": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/IBM_CJK_Code_Page_Numbers.svg/220px-IBM_CJK_Code_Page_Numbers.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/1/1d/Information_icon4.svg/20px-Information_icon4.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2003-03-10T08:36:43+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/Code_page",
        "text": "Dated classifications of computing character sets\n\nIn computing, a code page is a character encoding and as such it is a specific association of a set of printable characters and control characters with unique numbers. Typically each number represents the binary value in a single byte. (In some contexts these terms are used more precisely; see Character encoding § Terminology.)\n\nThe term \"code page\" originated from IBM's EBCDIC-based mainframe systems,[1] but Microsoft, SAP,[2] and Oracle Corporation[3] are among the vendors that use this term. The majority of vendors identify their own character sets by a name. In the case when there is a plethora of character sets (like in IBM), identifying character sets through a number is a convenient way to distinguish them. Originally, the code page numbers referred to the page numbers in the IBM standard character set manual,[4][5][6] a condition which has not held for a long time. Vendors that use a code page system allocate their own code page number to a character encoding, even if it is better known by another name; for example, UTF-8 has been assigned page numbers 1208 at IBM, 65001 at Microsoft, and 4110 at SAP.\n\nHewlett-Packard uses a similar concept in its HP-UX operating system and its Printer Command Language[7] (PCL) protocol for printers (either for HP printers or not). The terminology, however, is different: What others call a character set, HP calls a symbol set, and what IBM or Microsoft call a code page, HP calls a symbol set code. HP developed a series of symbol sets,[8][9] each with an associated symbol set code, to encode both its own character sets and other vendors’ character sets.\n\nThe multitude of character sets leads many vendors to recommend Unicode.\n\nThe code page numbering system\n\n[edit]\n\nIBM introduced the concept of systematically assigning a small, but globally unique, 16 bit number to each character encoding that a computer system or collection of computer systems might encounter. The IBM origin of the numbering scheme is reflected in the fact that the smallest (first) numbers are assigned to variations of IBM's EBCDIC encoding and slightly larger numbers refer to variations of IBM's extended ASCII encoding as used in its PC hardware.\n\nWith the release of PC DOS version 3.3 (and the near identical MS-DOS 3.3) IBM introduced the code page numbering system to regular PC users, as the code page numbers (and the phrase \"code page\") were used in new commands to allow the character encoding used by all parts of the OS to be set in a systematic way.[10]\n\nAfter IBM and Microsoft ceased to cooperate in the 1990s, the two companies have maintained the list of assigned code page numbers independently from each other, resulting in some conflicting assignments. At least one third-party vendor (Oracle) also has its own different list of numeric assignments.[3] IBM's current assignments are listed in their CCSID repository, while Microsoft's assignments are documented within the MSDN.[11] Additionally, a list of the names and approximate IANA (Internet Assigned Numbers Authority) abbreviations for the installed code pages on any given Windows machine can be found in the Registry on that machine (this information is used by Microsoft programs such as Internet Explorer).\n\nMost well-known code pages, excluding those for the CJK languages and Vietnamese, fit all their code-points into eight bits and do not involve anything more than mapping each code-point to a single character; furthermore, techniques such as combining characters, complex scripts, etc., are not involved.\n\nThe text mode of standard (VGA-compatible) PC graphics hardware is built around using an 8-bit code page, though it is possible to use two at once with some color depth sacrifice, and up to eight may be stored in the display adapter for easy switching.[12] There was a selection of third-party code page fonts that could be loaded into such hardware. However, it is now commonplace for operating system vendors to provide their own character encoding and rendering systems that run in a graphics mode and bypass this hardware limitation entirely. However the system of referring to character encodings by a code page number remains applicable, as an efficient alternative to string identifiers such as those specified by the IETF and IANA for use in various protocols such as e-mail and web pages.\n\nRelationship to ASCII\n\n[edit]\n\nThe majority of code pages in current use are supersets of ASCII, a 7-bit code representing 128 control codes and printable characters. In the distant past, 8-bit implementations of the ASCII code set the top bit to zero or used it as a parity bit in network data transmissions. When the top bit was made available for representing character data, a total of 256 characters and control codes could be represented. Most vendors (including IBM) used this extended range to encode characters used by various languages and graphical elements that allowed the imitation of primitive graphics on text-only output devices. No formal standard existed for these \"extended ASCII character sets\" and vendors referred to the variants as code pages, as IBM had always done for variants of EBCDIC encodings.\n\nRelationship to Unicode\n\n[edit]\n\nUnicode is an effort to include all characters from all currently and historically used human languages into single character enumeration (effectively one large single code page), removing the need to distinguish between different code pages when handling digitally stored text. Unicode tries to retain backwards compatibility with many legacy code pages, copying some code pages 1:1 in the design process. An explicit design goal of Unicode was to allow round-trip conversion between all common legacy code pages, although this goal has not always been achieved. Some vendors, namely IBM and Microsoft, have anachronistically assigned code page numbers to Unicode encodings. This convention allows code page numbers to be used as metadata to identify the correct decoding algorithm when encountering binary stored data.\n\nIBM code pages\n\n[edit]\n\nEBCDIC-based code pages\n\n[edit]\n\nThese code pages are used by IBM in its EBCDIC character sets for mainframe computers.[13]\n\nDOS code pages\n\n[edit]\n\nThese code pages are used by IBM in its PC DOS operating system. These code pages were originally embedded directly in the text mode hardware of the graphic adapters used with the IBM PC and its clones, including the original MDA and CGA adapters whose character sets could only be changed by physically replacing a ROM chip that contained the font. The interface of those adapters (emulated by all later adapters such as VGA) was typically limited to single byte character sets with only 256 characters in each font/encoding (although VGA added partial support for slightly larger character sets).\n\n301 – IBM-PC Japan (Kanji) DBCS\n\n437 – Original IBM PC hardware code page\n\n720 – Arabic (Transparent ASMO)\n\n737 – Greek\n\n775 – Latin-7\n\n808 – Russian with euro (same without euro: 866)\n\n848 – Ukrainian with euro (same without euro: 1125)\n\n849 – Belarusian with euro (same without euro: 1131)\n\n850 – Latin-1\n\n851 – Greek\n\n852 – Latin-2\n\n853 – Latin-3\n\n855 – Cyrillic (same with euro: 872)\n\n856 – Hebrew\n\n857 – Latin-5\n\n858 – Latin-1 with euro symbol\n\n859 – Latin-9\n\n860 – Portuguese\n\n861 – Icelandic\n\n862 – Hebrew\n\n863 – Canadian French\n\n864 – Arabic\n\n865 – Danish/Norwegian\n\n866 – Belarusian, Russian, Ukrainian (same with euro: 808)\n\n867 – Hebrew + euro (based on CP862) (conflictive ID: NEC Czech (Kamenický), which was created before this codepage)\n\n868 – Urdu\n\n869 – Greek\n\n872 – Cyrillic with euro (same without euro: 855)\n\n874 – Thai with Low Tone Marks & Ancient Chars (conflictive ID with Windows 874; version with euro: 1161 Windows version: is IBM 1162)\n\n876 – OCR A\n\n877 – OCR B\n\n878 – KOI8-R\n\n891 – Korean PC SBCS\n\n898 – IBM-PC WP Multilingual\n\n899 – IBM-PC Symbol\n\n903 – Simplified Chinese PC SBCS\n\n904 – Traditional Chinese PC SBCS\n\n906 – International Set #5 3812/3820\n\n907 – ASCII APL (3812)\n\n909 – IBM-PC APL2 Extended\n\n910 – IBM-PC APL2\n\n911 – IBM-PC Japan #1\n\n926 – Korean PC DBCS\n\n927 – Traditional Chinese PC DBCS\n\n928 – Simplified Chinese PC DBCS\n\n929 – Thai PC DBCS\n\n932 – IBM-PC Japan MIX (DOS/V) (DBCS) (897 + 301) (conflictive ID with Windows 932; Windows version is IBM 943)\n\n934 – IBM-PC Korea MIX (DOS/V) (DBCS) (891 + 926)\n\n936 – IBM-PC Simplified Chinese MIX (gb2312) (DOS/V) (DBCS) (903 + 928) (conflictive ID with Windows 936; Windows version is IBM 1386)\n\n938 – IBM-PC Traditional Chinese MIX (DOS/V, OS/2) (904 + 927)\n\n942 – IBM-PC Japan MIX (Japanese SAA (OS/2)) (1041 + 301)\n\n943 – IBM-PC Japan OPEN (897 + 941) (Windows CP 932)\n\n944 – IBM-PC Korea MIX (Korean SAA (OS/2)) (1040 + 926)\n\n946 – IBM-PC Simplified Chinese (Simplified Chinese SAA (OS/2)) (1042 + 928)\n\n948 – IBM-PC Traditional Chinese (Traditional Chinese SAA (OS/2)) (1043 + 927)\n\n949 – Korean (Extended Wansung (ks_c_5601-1987)) (1088 + 951) (conflictive ID with Windows 949 (Unified Hangul Code); Windows version is IBM 1363)\n\n951 – Korean DBCS (IBM KS Code) (conflictive ID with Windows 951, a hack of Windows 950 with Unicode mappings for some PUA Unicode characters found in HKSCS, based on the file name)\n\n1034 – Printer Application - Shipping Label, Set #2\n\n1040 – Korean Extended\n\n1041 – Japanese Extended (JIS X 0201 Extended)\n\n1042 – Simplified Chinese Extended\n\n1043 – Traditional Chinese Extended\n\n1044 – Printer Application - Shipping Label, Set #1\n\n1086 – IBM-PC Japan #1\n\n1088 – Revised Korean (SBCS)\n\n1092 – IBM-PC Modified Symbols\n\n1098 – Farsi\n\n1108 – DITROFF Base Compatibility\n\n1109 – DITROFF Specials Compatibility\n\n1115 – IBM-PC People's Republic of China\n\n1116 – Estonian\n\n1117 – Latvian\n\n1118 – Lithuanian (IBM's implementation of Lika's code page 774)\n\n1119 – Lithuanian and Russian (IBM's implementation of Lika's code page 772)\n\n1125 – Cyrillic, Ukrainian (same with euro: 848) (IBM modification of RUSCII)\n\n1127 – IBM-PC Arabic / French\n\n1131 – IBM-PC Data, Cyrillic, Belarusian (same with euro: 849)\n\n1139 – Japan Alphanumeric Katakana\n\n1161 – Thai with Low Tone Marks & Ancient Chars with euro (same without euro: 874)\n\n1167 – KOI8-RU\n\n1168 – KOI8-U\n\n1370 – Traditional Chinese MIX (Big5 encoding) (1114 + 947 + euro) (same without euro: 950)\n\n1380 – IBM-PC Simplified Chinese GB PC-DATA (DBCS PC IBM GB 2312-80)\n\n1381 – IBM-PC Simplified Chinese (1115 + 1380)\n\n1393 – Japanese JIS X 0213 DBCS\n\n1394 – IBM-PC Japan (JIS X 0213) (897 + 1393)\n\nWhen dealing with older hardware, protocols and file formats, it is often necessary to support these code pages, but newer encoding systems, in particular Unicode, are encouraged for new designs.\n\nDOS code pages are typically stored in .CPI files.[16][17][18][19][20]\n\nIBM AIX code pages\n\n[edit]\n\nThese code pages are used by IBM in its AIX operating system. They emulate several character sets, namely those ones designed to be used accordingly to ISO, such as UNIX-like operating systems.\n\n367 – 7-bit US-ASCII\n\n371 – 7-bit US-ASCII APL\n\n806 – ISCII\n\n813 – ISO 8859-7\n\n819 – ISO 8859-1\n\n895 – 7-bit Japan Latin\n\n896 – 7-bit Japan Katakana Extended\n\n901 – ISO 8859-13 with euro (later extended) (same without euro: 921)\n\n902 – ISO Estonian with euro (same without euro: 922)\n\n912 – ISO 8859-2 (extended in 1999)\n\n913 – ISO 8859-3\n\n914 – ISO 8859-4\n\n915 – ISO 8859-5 (extended after 1995)\n\n916 – ISO 8859-8\n\n919 – ISO 8859-10\n\n920 – ISO 8859-9\n\n921 – ISO 8859-13 (extended after 1995) (same with euro: 901)\n\n922 – ISO Estonian (same with euro: 902)\n\n923 – ISO 8859-15\n\n952 – EUC Japanese for JIS X 0208\n\n953 – EUC Japanese for JIS X 0212\n\n954 – EUC Japanese (895 + 952 + 896 + 953)\n\n955 – TCP Japanese, JIS X 0208-1978\n\n956 – TCP Japanese (895 + 952 + 896 + 953)\n\n957 – TCP Japanese (895 + 955 + 896 + 953)\n\n958 – TCP Japanese (367 + 952 + 896 + 953)\n\n959 – TCP Japanese (367 + 955 + 896 + 953)\n\n960 – Traditional Chinese DBCS-EUC SICGCC Primary Set (1st plane)\n\n961 – Traditional Chinese DBCS-EUC SICGCC Full Set + IBM Select + UDC\n\n963 – Traditional Chinese TCP, CNS 11643 plane 2 only\n\n964 – EUC Traditional Chinese (367 + 960 + 961)\n\n965 – TCP Traditional Chinese (367 + 960 + 963)\n\n970 – EUC Korean (367 + 971)\n\n971 – EUC Korean DBCS (G1, KSC 5601 1989 (including 188 UDC))\n\n1006 – ISO 8-bit Urdu\n\n1008 – ISO 8-bit Arabic\n\n1009 – 7-bit ISO IRV\n\n1010 – 7-bit France\n\n1011 – 7-bit Germany F.R.\n\n1012 – 7-bit Italy\n\n1013 – 7-bit United Kingdom\n\n1014 – 7-bit Spain\n\n1015 – 7-bit Portugal\n\n1016 – 7-bit Norway\n\n1017 – 7-bit Denmark\n\n1018 – 7-bit Finland/Sweden\n\n1019 – 7-bit Netherlands\n\n1029 – Arabic Extended\n\n1036 – CCITT T.61\n\n1046 – Arabic Extended (Euro)\n\n1089 – ISO 8859-6\n\n1111 – Variant of ISO 8859-2\n\n1124 – ISO Ukrainian, similar to ISO 8859-5\n\n1129 – ISO Vietnamese (same with euro: 1163)\n\n1133 – ISO Lao\n\n1163 – ISO Vietnamese with euro (same without euro: 1129)\n\n1350 – EUC Japanese (JISeucJP) (367 + 952 + 896 + 953)\n\n1382 – EUC Simplified Chinese (DBCS PC GB 2312-80)\n\n1383 – EUC Simplified Chinese (367 + 1382)\n\nCode page 819 is identical to Latin-1, ISO/IEC 8859-1, and with slightly-modified commands, permits MS-DOS machines to use that encoding. It was used with IBM AS/400 minicomputers.\n\nIBM OS/2 code pages\n\n[edit]\n\nThese code pages are used by IBM in its OS/2 operating system.\n\n1004 – Latin-1 Extended, Desk Top Publishing/Windows[21]\n\nWindows emulation code pages\n\n[edit]\n\nThese code pages are used by IBM when emulating the Microsoft Windows character sets. Most of these code pages have the same number as Microsoft code pages, although they are not exactly identical. Some code pages, though, are new from IBM, not devised by Microsoft.\n\nMacintosh emulation code pages\n\n[edit]\n\nThese code pages are used by IBM when emulating the Apple Macintosh character sets.\n\n1275 – Apple Roman\n\n1280 – Apple Greek\n\n1281 – Apple Turkish\n\n1282 – Apple Central European\n\n1283 – Apple Cyrillic\n\n1284 – Apple Croatian\n\n1285 – Apple Romanian\n\n1286 – Apple Icelandic\n\nAdobe emulation code pages\n\n[edit]\n\nThese code pages are used by IBM when emulating the Adobe character sets.\n\n1038 – Adobe Symbol Encoding\n\n1276 – Adobe (PostScript) Standard Encoding\n\n1277 – Adobe (PostScript) Latin 1\n\nHP emulation code pages\n\n[edit]\n\nThese code pages are used by IBM when emulating the HP character sets.\n\n1050 – HP Roman Extension\n\n1051 – HP Roman-8\n\n1052 – HP Gothic Legal\n\n1053 – HP Gothic-1 (almost the same as ISO 8859-1)\n\n1054 – HP ASCII\n\n1055 – HP PC-Line\n\n1056 – HP Line Draw\n\n1057 – HP PC-8 (almost the same as code page 437)\n\n1058 – HP PC-8DN (not the same as code page 865)\n\n1351 – Japanese DBCS HP character set\n\n5039 – Japanese MIX (1041 + 1351)\n\nDEC emulation code pages\n\n[edit]\n\nThese code pages are used by IBM when emulating the DEC character sets.\n\n1020 – 7-bit Canadian (French) NRC Set\n\n1021 – 7-bit Switzerland NRC Set\n\n1023 – 7-bit Spanish NRC Set\n\n1090 – Special Characters and Line Drawing Set\n\n1100 – DEC Multinational\n\n1101 – 7-bit British NRC Set\n\n1102 – 7-bit Dutch NRC Set\n\n1103 – 7-bit Finnish NRC Set\n\n1104 – 7-bit French NRC Set\n\n1105 – 7-bit Norwegian/Danish NRC Set\n\n1106 – 7-bit Swedish NRC Set\n\n1107 – 7-bit Norwegian/Danish NRC Alternate\n\n1287 – DEC Greek\n\n1288 – DEC Turkish\n\nIBM Unicode code pages\n\n[edit]\n\nMicrosoft code pages\n\n[edit]\n\nMain article: Windows code page\n\nWindows code pages\n\n[edit]\n\nThese code pages are used by Microsoft in its own Windows operating system. Microsoft defined a number of code pages known as the ANSI code pages (as the first one, 1252 was based on an apocryphal ANSI draft of what became ISO 8859-1). Code page 1252 is built on ISO 8859-1 but uses the range 0x80-0x9F for extra printable characters rather than the C1 control codes from ISO 6429 mentioned by ISO 8859-1.[24] Some of the others are based in part on other parts of ISO 8859 but often rearranged to make them closer to 1252.\n\nMicrosoft recommends new applications use UTF-8 or UCS-2/UTF-16 instead of these code pages.[25]\n\nDBCS code pages\n\n[edit]\n\nThese code pages represent DBCS character encodings for various CJK languages. In Microsoft operating systems, these are used as both the \"OEM\" and \"Windows\" code page for the applicable locale.\n\nMS-DOS code pages\n\n[edit]\n\nThese code pages are used by Microsoft in its MS-DOS operating system. Microsoft refers to these as the OEM code pages because they were defined by the original equipment manufacturers who licensed MS-DOS for distribution with their hardware, not by Microsoft or a standards organization. Most of these code pages have the same number as the equivalent IBM code pages, although some are not exactly identical.[26]\n\n708 – Arabic (ASMO 708)\n\n709 – Arabic (ASMO 449+/BCON V4)\n\n710 – Arabic (Transparent Arabic)\n\n720 – Arabic (Transparent ASMO)\n\n737 – Greek\n\n850 – Latin-1\n\n851 – Greek\n\n852 – Latin-2\n\n855 – Cyrillic\n\n857 – Latin-5\n\n858 – Latin-1 with euro symbol\n\n859 – Latin-9\n\n860 – Portuguese\n\n861 – Icelandic\n\n862 – Hebrew\n\n863 – Canadian French\n\n864 – Arabic\n\n865 – Danish/Norwegian\n\n866 – Belarusian, Russian, Ukrainian\n\n869 – Greek\n\nMacintosh emulation code pages\n\n[edit]\n\nThese code pages are used by Microsoft when emulating the Apple Macintosh character sets.\n\n10000 - Apple Macintosh Roman\n\n10001 - Apple Japanese\n\n10002 - Apple Traditional Chinese (Big5)\n\n10003 - Apple Korean\n\n10004 - Apple Arabic\n\n10005 - Apple Hebrew\n\n10006 - Apple Greek\n\n10007 - Apple Macintosh Cyrillic\n\n10008 - Apple Simplified Chinese (GB 2312)\n\n10010 - Apple Romanian\n\n10017 - Apple Ukrainian\n\n10021 - Apple Thai\n\n10029 - Apple Macintosh Central Europe\n\n10079 - Apple Icelandic\n\n10081 - Apple Turkish\n\n10082 - Apple Croatian\n\nVarious other Microsoft code pages\n\n[edit]\n\nThe following code page numbers are specific to Microsoft Windows. IBM may use different numbers for these code pages. They emulate several character sets, namely those ones designed to be used accordingly to ISO,[clarification needed] such as UNIX-like operating systems.\n\nMicrosoft Unicode code pages\n\n[edit]\n\n1200 – UTF-16LE Unicode (little-endian)\n\n1201 – UTF-16BE Unicode (big-endian)\n\n12000 – UTF-32LE Unicode (little-endian)\n\n12001 – UTF-32BE Unicode (big-endian)\n\n65000 – UTF-7 Unicode\n\n65001 – UTF-8 Unicode\n\n65520 – Empty Unicode Plane\n\nHP Symbol Sets\n\n[edit]\n\nHP developed a series of Symbol Sets (each with its associated Symbol Set Code) to encode either its own character sets or other vendors’ character sets. They are normally 7-bit character sets which, when moved to the higher part and associated with the ASCII character set, make up 8-bit character sets.\n\nHP own Symbol Sets\n\n[edit]\n\nSymbol Set 0E — HP Roman Extension — 7-bit character set with accented letters (coded by IBM as code page 1050)\n\nSymbol Set 0G — HP 7-bit German\n\nSymbol Set 0L — HP 7-bit PC Line (coded by IBM as code page 1055)\n\nSymbol Set 0M — HP Math-7\n\nSymbol Set 0T — HP Thai-8\n\nSymbol Set 1S — HP 7-bit Spanish\n\nSymbol Set 1U — HP 7-bit Gothic Legal (coded by IBM as code page 1052)\n\nSymbol Set 4Q — HP Line Draw (coded by IBM as code page 1056)\n\nSymbol Set 4U — HP Roman-9 — Roman-8 + €\n\nSymbol Set 7J — HP Desktop\n\nSymbol Set 7S — HP 7-bit European Spanish\n\nSymbol Set 8E — HP East-8\n\nSymbol Set 8G — HP Greek-8 (based on IR 088; not on ELOT 927)\n\nSymbol Set 8H — HP Hebrew-8\n\nSymbol Set 8I — MS LineDraw (ASCII + HP PC Line)\n\nSymbol Set 8K — HP Kana-8 (ASCII + Japanese Katakana)\n\nSymbol Set 8L — HP LineDraw (ASCII + HP Line Draw)\n\nSymbol Set 8M — HP Math-8 (ASCII + HP Math-8)\n\nSymbol Set 8R — HP Cyrillic-8\n\nSymbol Set 8S — HP 7-bit Latin American Spanish\n\nSymbol Set 8T — HP Turkish-8\n\nSymbol Set 8U — HP Roman-8 (ASCII + HP Roman Extension; coded by IBM as code page 1051)\n\nSymbol Set 8V — HP Arabic-8\n\nSymbol Set 9K — HP Korean-8\n\nSymbol Set 9T — PC 8T (also known as Code Page 437-T; this is not code page 857)\n\nSymbol Set 9V — Latin / Arabic for Windows (this is not code page 1256)\n\nSymbol Set 11U — PC 8D/N (also known as Code Page 437-N; coded by IBM as code page 1058; this is not code page 865)\n\nSymbol set 14G — PC-8 Greek Alternate (also known as Code Page 437-G; almost the same as code page 737)\n\nSymbol Set 18K —\n\nSymbol Set 18T —\n\nSymbol Set 19C —\n\nSymbol Set 19K —\n\nSymbol Sets from other vendors\n\n[edit]\n\nSymbol Set 0D — ISO 60: 7-bit Norwegian\n\nSymbol Set 0F — ISO 25: 7-bit French\n\nSymbol Set 0H — HP 7-bit Hebrew — Practically the same as Israeli Standard SI 960\n\nSymbol Set 0I — ISO 15: 7-bit Italian\n\nSymbol Set 0K — ISO 14: 7-bit Japanese Katakana\n\nSymbol Set 0N — ISO 8859-1 Latin 1 (Initially called \"Gothic-1\"; coded by IBM as code page 1053)\n\nSymbol Set 0R — ISO 8859-5 Latin/Cyrillic (1986 version — IR 111)\n\nSymbol Set 0S — ISO 11: 7-bit Swedish\n\nSymbol Set 0U — ISO 6: 7-bit U.S.\n\nSymbol Set 0V — Arabic\n\nSymbol Set 1D — ISO 61: 7-bit Norwegian\n\nSymbol Set 1E — ISO 4: 7-bit U. K.\n\nSymbol Set 1F — ISO 69: 7-bit French\n\nSymbol Set 1G — ISO 21: 7-bit German\n\nSymbol Set 1K — ISO 13: 7-bit Japanese Latin\n\nSymbol Set 1T — Windows Thai (Practically the same as 874)\n\nSymbol Set 2K — ISO 57: 7-bit Simplified Chinese Latin\n\nSymbol Set 2N — ISO 8859-2 Latin 2\n\nSymbol Set 2S — ISO 17: 7-bit Spanish\n\nSymbol Set 2U — ISO 2: 7-bit International Reference Version\n\nSymbol Set 3N — ISO 8859-3 Latin 3\n\nSymbol Set 3R — PC-866 Russia (Practically the same as code page 866)\n\nSymbol Set 3S — ISO 10: 7-bit Swedish\n\nSymbol Set 4N — ISO 8859-4 Latin 4\n\nSymbol Set 4S — ISO 16: 7-bit Portuguese\n\nSymbol Set 5M — PS Math Symbol (Practically the same as Adobe Symbols)\n\nSymbol Set 5N — ISO 8859-9 Latin 5\n\nSymbol Set 5S — ISO 84: 7-bit Portuguese\n\nSymbol Set 5T — Windows 3.1 Latin-5 (Practically the same as code page 1254)\n\nSymbol Set 6J — Microsoft Publishing\n\nSymbol Set 6M — Ventura Math\n\nSymbol Set 6N — ISO 8859-10 Latin 6\n\nSymbol Set 6S — ISO 85: 7-bit Spanish\n\nSymbol Set 7H — ISO 8859-8 Latin/Hebrew\n\nSymbol Set 9E — Windows 3.1 Latin 2 (Practically the same as code page 1250)\n\nSymbol Set 9G — Windows 98 Greek (Practically the same as code page 1253)\n\nSymbol Set 9J — PC 1004\n\nSymbol Set 9L — Ventura ITC Zapf Dingbats\n\nSymbol Set 9N — ISO 8859-15 Latin 9\n\nSymbol Set 9R — Windows 98 Cyrillic (Practically the same as code page 1251)\n\nSymbol Set 9U — Windows 3.0\n\nSymbol Set 10G — PC-851 Latin/Greek (Practically the same as code page 851)\n\nSymbol Set 10J — PS Text (Practically the same as Adobe Standard)\n\nSymbol Set 10L — PS ITC Zapf Dingbats (Practically the same as Adobe Dingbats)\n\nSymbol Set 10N — ISO 8859-5 Latin/Cyrillic (1988 version — IR 144)\n\nSymbol Set 10R — PC-855 Cyrillic (Practically the same as code page 855)\n\nSymbol Set 10T — Teletex\n\nSymbol Set 10U — PC-8 (Practically the same as code page 437; coded by IBM as code page 1057)\n\nSymbol Set 10V — CP-864 (Practically the same as code page 864)\n\nSymbol Set 11G — CP-869 (Practically the same as code page 869)\n\nSymbol Set 11J — PS ISO Latin-1 (Practically the same as Adobe Latin-1)\n\nSymbol Set 11N — ISO 8859-6 Latin/Arabic\n\nSymbol Set 12G — PC Latin/Greek (Practically the same as code page 737)\n\nSymbol Set 12J — MC Text (Practically the same as Macintosh Roman)\n\nSymbol Set 12N — ISO 8859-7 Latin/Greek\n\nSymbol Set 12R — PC Gost (Practically the same as PC GOST Main)\n\nSymbol Set 12U — PC-850 Latin 1 (Practically the same as code page 850)\n\nSymbol Set 13J — Ventura International\n\nSymbol Set 13R — PC Bulgarian (Practically the same as MIK)\n\nSymbol Set 13U — PC-858 Latin 1 + € (Practically the same as code page 858)\n\nSymbol Set 14J — Ventura U. S.\n\nSymbol Set 14L — Windows Dingbats\n\nSymbol Set 14P — ABICOMP International (Practically the same as ABICOMP)\n\nSymbol Set 14R — PC Ukrainian (Practically the same as RUSCII)\n\nSymbol Set 15H — PC-862 Israel (Practically the same as code page 862)\n\nSymbol Set 16U — PC-857 Latin 5 (Practically the same as code page 857)\n\nSymbol Set 17U — PC-852 Latin 2 (Practically the same as code page 852)\n\nSymbol Set 18N — UTF-8\n\nSymbol Set 18U — PC-853 Latin 3 (Practically the same as code page 853)\n\nSymbol Set 19L — Windows 98 Baltic (Practically the same as code page 1257)\n\nSymbol Set 19M — Windows Symbol\n\nSymbol Set 19U — Windows 3.1 Latin 1 (Practically the same as code page 1252)\n\nSymbol Set 20U — PC-860 Portugal (Practically the same as code page 860)\n\nSymbol Set 21U — PC-861 Iceland (Practically the same as code page 861)\n\nSymbol Set 23U — PC-863 Canada - French (Practically the same as code page 863)\n\nSymbol Set 24Q — PC-Polish Mazowia (Practically the same as Mazovia encoding)\n\nSymbol Set 25U — PC-865 Denmark/Norway (Practically the same as code page 865)\n\nSymbol Set 26U — PC-775 Latin 7 (Practically the same as code page 775)\n\nSymbol Set 27Q — PC-8 PC Nova (Practically the same as PC Nova)\n\nSymbol Set 27U — PC Latvian Russian (also known as 866-Latvian)\n\nSymbol Set 28U — PC Lithuanian/Russian (Practically the same as code page 774)\n\nSymbol Set 29U — PC-772 Lithuanian/Russian (Practically the same as code page 772)\n\nCode pages from other vendors\n\n[edit]\n\nThese code pages are independent assignments by third party vendors. Since the original IBM PC code page (number 437) was not really designed for international use, several partially compatible country or region specific variants emerged.\n\nThese code pages number assignments are not official neither by IBM, neither by Microsoft and almost none of them is referred as a usable character set by IANA. The numbers assigned to these code pages are arbitrary and may clash to registered numbers in use by IBM or Microsoft. Some of them may predate codepage switching being added in DOS 3.3.\n\nList of code page assignments\n\n[edit]\n\nList of known code page assignments (incomplete):\n\nID Names Description Origin Platform DOS OS/2 Windows Mac Else Encoding Comment 0 N/A Reserved IBM, Microsoft N/A 3.3+ 1.0+ ? ? ? Internal OS use[34] 437 CP437, IBM437 PC US IBM[46] IBM PC 3.3+ 1.0+ Yes ? Yes 8-bit SBCS 57344 - 61439 N/A Private use derivations IBM N/A N/A N/A N/A N/A N/A various Private use code page derivations (E000h-EFFFh) 65280 - 65533 N/A Private use definitions IBM N/A N/A N/A N/A N/A N/A various Private use code page definitions (FF00h-FFFDh) 65534 N/A Reserved IBM, Microsoft N/A ? ? ? ? ? various Internal OS use (FFFEh) 65535 N/A Reserved IBM, Microsoft N/A 3.3+ 1.0+ ? ? ? various Internal OS use (FFFFh)[34]\n\nCriticism\n\n[edit]\n\nMany older character encodings (unlike Unicode) suffer from several problems. Some vendors insufficiently document the meaning of all code point values in their code pages, which decreases the reliability of handling textual data consistently through various computer systems. Some vendors add proprietary extensions to established code pages, to add or change certain code point values: for example, byte 0x5C in Shift JIS can represent either a back slash or a yen sign depending on the platform. Finally, in order to support several languages in a program that does not use Unicode, the code page used for each string/document needs to be stored.\n\nApplications may also mislabel text in Windows-1252 as ISO-8859-1. The only difference between these code pages is that the code point values in the range 0x80–0x9F, used by ISO-8859-1 for control characters, are instead used as additional printable characters in Windows-1252 – notably for quotation marks, the euro sign and the trademark symbol among others. Browsers on non-Windows platforms would tend to show empty boxes or question marks for these characters, making the text hard to read. Most browsers fixed this by ignoring the character set and interpreting as Windows-1252 to look acceptable. In HTML5, treating ISO-8859-1 as Windows-1252 is even codified as a W3C standard.[47] Although browsers were typically programmed to deal with this behaviour, this was not always true of other software. Consequently, when receiving a file transfer from a Windows system, non-Windows platforms would either ignore these characters or treat them as a standard control characters and attempt to take the specified control action accordingly.\n\nDue to Unicode's extensive documentation, vast repertoire of characters and stability policy of characters, the problems listed above are rarely a concern for Unicode. UTF-8 (which can encode over one million codepoints) has replaced the code-page method in terms of popularity on the Internet.[48][49]\n\nPrivate code pages\n\n[edit]\n\nWhen, early in the history of personal computers, users did not find their character encoding requirements met, private or local code pages were created using terminate-and-stay-resident utilities or by re-programming BIOS EPROMs. In some cases, unofficial code page numbers were invented (e.g. CP895).\n\nWhen more diverse character set support became available most of those code pages fell into disuse, with some exceptions such as the Kamenický or KEYBCS2 encoding for the Czech and Slovak alphabets. Another character set is Iran System encoding standard that was created by Iran System corporation for Persian language support. This standard was in use in Iran in DOS-based programs and after introduction of Microsoft code page 1256 this standard became obsolete. However some Windows and DOS programs using this encoding are still in use and some Windows fonts with this encoding exist.\n\nIn order to overcome such problems, the IBM Character Data Representation Architecture level 2 specifically reserves ranges of code page IDs for user-definable and private-use assignments. Whenever such code page IDs are used, the user must not assume that the same functionality and appearance can be reproduced in another system configuration or on another device or system unless the user takes care of this specifically. The code page range 57344-61439 (E000h- EFFFh) is officially reserved for user-definable code pages (or actually CCSIDs in the context of IBM CDRA), whereas the range 65280-65533 ( FF00h- FFFDh) is reserved for any user-definable \"private use\" assignments. For example, a non-registered custom variant of code page 437 ( 1B5h) or 28591 ( 6FAF) could become 57781 ( E1B5h) or 61359 ( EFAFh), respectively, in order to avoid potential conflicts with other assignments and maintain the sometimes existing internal numerical logic in the assignments of the original code pages. An unregistered private code page not based on an existing code page, a device specific code page like a printer font, which just needs a logical handle to become addressable for the system, a frequently changing download font, or a code page number with a symbolic meaning in the local environment could have an assignment in the private range like 65280 ( FF00h).\n\nThe code page IDs 0, 65534 ( FFFEh) and 65535 ( FFFFh) are reserved for internal use by operating systems such as DOS and must not be assigned to any specific code pages.\n\nSee also\n\n[edit]\n\nWindows code page\n\nCharacter encoding\n\nCCSID IBM's official \"code page\" definitions and assignments\n\nCharset detection\n\nUnicode\n\nReferences\n\n[edit]"
    }
}