{
    "id": "dbpedia_111_0",
    "rank": 98,
    "data": {
        "url": "https://en.wikipedia.org/wiki/C0_and_C1_control_codes",
        "read_more_link": "",
        "language": "en",
        "title": "C0 and C1 control codes",
        "top_image": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "meta_img": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2005-08-03T18:58:36+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/C0_and_C1_control_codes",
        "text": "Control characters, ranging from U+0000 to U+001F (C0) and U+0080 to U+009F (C1) in Unicode\n\n\"DC1\" redirects here. For other uses, see DC1 (disambiguation).\n\n\"Group separator\" redirects here. For the delimiter used to group digits in large numbers, see Decimal separator § Digit grouping.\n\nThe C0 and C1 control code or control character sets define control codes for use in text by computer systems that use ASCII and derivatives of ASCII. The codes represent additional information about the text, such as the position of a cursor, an instruction to start a new line, or a message that the text has been received.\n\nC0 codes are the range 00HEX–1FHEX and the default C0 set was originally defined in ISO 646 (ASCII). C1 codes are the range 80HEX–9FHEX and the default C1 set was originally defined in ECMA-48 (harmonized later with ISO 6429). The ISO/IEC 2022 system of specifying control and graphic characters allows other C0 and C1 sets to be available for specialized applications, but they are rarely used.\n\nC0 controls\n\n[edit]\n\nASCII defined 32 control characters, plus a necessary extra character for the DEL character, 7FHEX or 01111111BIN (needed to punch out all the holes on a paper tape and erase it).\n\nThis large number of codes was desirable at the time, as multi-byte controls would require implementation of a state machine in the terminal, which was very difficult with contemporary electronics and mechanical terminals.\n\nOnly a few codes have maintained their use: BEL, ESC, and the \"Format effector\" (FEn) characters BS, TAB, LF, VT, FF, and CR. Others are unused or have acquired different meanings such as NUL being the C string terminator. Some data transfer protocols such as ANPA-1312, Kermit, and XMODEM do make extensive use of SOH, STX, ETX, EOT, ACK, NAK and SYN for purposes approximating their original definitions; and some file formats use the \"Information Separators\" (ISn) such as the Unix info format[1] and Python's splitlines string method.[2]\n\nThe names of some codes were changed in ISO 6429:1992 (or ECMA-48:1991) to be neutral with respect to writing direction. The abbreviations used were not changed, as the standard had already specified that those would remain unchanged when the standard is translated to other languages. In this table both new and old names are shown for the renamed controls (the old name is the one matching the abbreviation).\n\nASCII control codes, originally defined in ANSI X3.4.[3]\n\nDecimal\n\nHexadecimal\n\nAbbreviations Name Description ^@ 0 00 NUL ␀ Null \\0 Does nothing. The code of blank paper tape, and also used for padding to slow transmission. ^A 1 01 TC1, SOH ␁ Start of Heading First character of the heading of a message.[4] ^B 2 02 TC2, STX ␂ Start of Text Terminates the header and starts the message text. ^C 3 03 TC3, ETX ␃ End of Text Ends the message text, starts a footer (up to the next TC character).[4][5] ^D 4 04 TC4, EOT ␄ End of Transmission Ends the transmission of one or more messages.[4][5] May place terminals on standby.[5] ^E 5 05 TC5, ENQ, WRU[a] ␅ Enquiry Trigger a response at the receiving end, to see if it is still present. ^F 6 06 TC6, ACK ␆ Acknowledge Indication of successful receipt of a message. ^G 7 07 BEL[b] ␇ Bell, Alert \\a Call for attention from an operator. ^H 8 08 FE0, BS ␈ Backspace \\b Move one position leftwards. Next character may overprint or replace the character that was there. ^I 9 09 FE1, HT ␉ Character Tabulation,\n\nHorizontal Tabulation \\t Move right to the next tab stop. ^J 10 0A FE2, LF ␊ Line Feed \\n Move down to the same position on the next line (some devices also moved to the left column). ^K 11 0B FE3, VT ␋ Line Tabulation,\n\nVertical Tabulation \\v Move down to the next vertical tab stop. ^L 12 0C FE4, FF ␌ Form Feed \\f Move down to the top of the next page. ^M 13 0D FE5, CR ␍ Carriage Return \\r Move to column zero while staying on the same line. ^N 14 0E SO, LS0[c] ␎ Shift Out Switch to an alternative character set. ^O 15 0F SI, LS1[c] ␏ Shift In Return to regular character set after SO. ^P 16 10 TC7, DC0,[d] DLE ␐ Data Link Escape Cause a limited number of contiguously following characters to be interpreted in some different way.[14][15] ^Q 17 11 DC1, XON ␑ Device Control One Turn on (DC1 and DC2) or off (DC3 and DC4) devices.\n\nTeletype[6] used these for the paper tape reader and the paper tape punch. The first use became the de facto standard for software flow control.[16]\n\n^R 18 12 DC2, TAPE ␒ Device Control Two ^S 19 13 DC3, XOFF ␓ Device Control Three ^T 20 14 DC4, TAPE ␔ Device Control Four ^U 21 15 TC8, NAK ␕ Negative Acknowledge Negative response to a sender, such as a detected error. ^V 22 16 TC9, SYN ␖ Synchronous Idle Sent in synchronous transmission systems when no other character is being transmitted. ^W 23 17 TC10, ETB ␗ End of Transmission Block End of a transmission block of data when data are divided into such blocks for transmission purposes. ^X 24 18 CAN ␘ Cancel Indicates that the data preceding it are in error or are to be disregarded. ^Y 25 19 EM ␙ End of medium Indicates on paper or magnetic tapes that the end of the usable portion of the tape had been reached.[3] ^Z 26 1A SUB ␚ Substitute Replaces a character that was found to be invalid or in error. Should be ignored. ^[ 27 1B ESC ␛ Escape \\e\n\n[e] Alters the meaning of a limited number of following bytes.\n\nNowadays this is almost always used to introduce an ANSI escape sequence. ^\\ 28 1C IS4, FS ␜ File Separator Can be used as delimiters to mark fields of data structures. US is the lowest level, while RS, GS, and FS are of increasing level to divide groups made up of items of the level beneath it. SP (space) could be considered an even lower level. ^] 29 1D IS3, GS ␝ Group Separator ^^ 30 1E IS2, RS ␞ Record Separator ^_ 31 1F IS1, US ␟ Unit Separator While not technically part of the C0 control character range, the following two characters can be thought of as having some characteristics of control characters. 32 20 SP ␠ Space Move right one character position. ^? 127 7F DEL ␡ Delete Should be ignored. Used to delete characters on punched tape by punching out all the holes.\n\nC1 controls\n\n[edit]\n\nIn 1973, ECMA-35 and ISO 2022[17] attempted to define a method so an 8-bit \"extended ASCII\" code could be converted to a corresponding 7-bit code, and vice versa.[18] In a 7-bit environment, the Shift Out (SO) would change the meaning of the 96 bytes 0x20 through 0x7F[a][20] (i.e. all but the C0 control codes), to be the characters that an 8-bit environment would print if it used the same code with the high bit set. This meant that the range 0x80 through 0x9F could not be printed in a 7-bit environment,[18] thus it was decided that no alternative character set could use them, and that these codes should be additional control codes, which become known as the C1 control codes. To allow a 7-bit environment to use these new controls, the sequences ESC @ through ESC _ were to be considered equivalent.[18] The later ISO 8859 standards abandoned support for 7-bit codes, but preserved this range of control characters.\n\nThe first C1 control code set to be registered for use with ISO 2022 was DIN 31626,[21] a specialised set for bibliographic use which was registered in 1979.[22]\n\nThe more common general-use ISO/IEC 6429 set was registered in 1983,[23] although the ECMA-48 specification upon which it was based had been first published in 1976[24] and JIS X 0211 (formerly JIS C 6323).[25] Symbolic names defined by RFC 1345 and early drafts of ISO 10646, but not in ISO/IEC 6429 (PAD, HOP and SGC) are also used.[8][26]\n\nExcept for SS2 and SS3 in EUC-JP text, and NEL in text transcoded from EBCDIC, the 8-bit forms of these codes were almost never used. CSI, DCS and OSC are used to control text terminals and terminal emulators, but almost always by using their 7-bit escape code representations. Nowadays if these codes are encountered it is far more likely they are intended to be printing characters from that position of Windows-1252 or Mac OS Roman.\n\nISO/IEC 6429 and RFC 1345 C1 control codes\n\nESC+\n\nDecimal\n\nHex\n\nAbbr Name Description[27] @ 128 80 PAD[9] Padding Character[b] Proposed as a \"padding\" or \"high byte\" for single-byte characters to make them two bytes long for easier interoperability with multiple byte characters. Extended Unix Code (EUC) occasionally uses this.[31] A 129 81 HOP[9] High Octet Preset[b] Proposed to set the high byte of a sequence of multiple byte characters so they only need one byte each, as a simple form of data compression. B 130 82 BPH Break Permitted Here[c] Follows a graphic character where a line break is permitted. Roughly equivalent to a soft hyphen or zero-width space except it does not define what is printed at the line break. C 131 83 NBH No Break Here[c] Follows the graphic character that is not to be broken. See also word joiner. D 132 84 IND Index[d] Move down one line without moving horizontally, to eliminate ambiguity about the meaning of LF. E 133 85 NEL Next Line Equivalent to CR+LF, to match the EBCDIC control character. F 134 86 SSA Start of Selected Area Used by block-oriented terminals. In xterm ESC F moves to the lower-left corner of the screen, since certain software assumes this behaviour.[34] G 135 87 ESA End of Selected Area H 136 88 HTS\n\nCharacter Tabulation Set\n\nHorizontal Tabulation Set\n\nSet a tab stop at the current position. I 137 89 HTJ\n\nCharacter Tabulation With Justification\n\nHorizontal Tabulation With Justification\n\nRight-justify the text since the last tab against the next tab stop. J 138 8A VTS\n\nLine Tabulation Set\n\nVertical Tabulation Set\n\nSet a vertical tab stop. K 139 8B PLD\n\nPartial Line Forward\n\nPartial Line Down\n\nTo produce subscripts and superscripts in ISO/IEC 6429.\n\nSubscripts use PLD text PLU while superscripts use PLU text PLD. L 140 8C PLU\n\nPartial Line Backward\n\nPartial Line Up\n\nM 141 8D RI\n\nReverse Line Feed\n\nReverse Index\n\nMove up one line. N 142 8E SS2 Single-Shift 2 Next character is from the G2 or G3 sets, respectively. O 143 8F SS3 Single-Shift 3 P 144 90 DCS Device Control String Followed by a string of printable characters (0x20 through 0x7E) and format effectors (0x08 through 0x0D), terminated by ST (0x9C). Xterm defined a number of these.[35] Q 145 91 PU1 Private Use 1 Reserved for private function agreed on between the sender and the recipient of the data. R 146 92 PU2 Private Use 2 S 147 93 STS Set Transmit State T 148 94 CCH Cancel character Destructive backspace, to eliminate ambiguity about meaning of BS. U 149 95 MW Message Waiting V 150 96 SPA Start of Protected Area Used by block-oriented terminals. W 151 97 EPA End of Protected Area X 152 98 SOS Start of String[c] Followed by a control string terminated by ST (0x9C) which (unlike DCS, OSC, PM or APC) may contain any character except SOS or ST. Y 153 99 SGC,[9] SGCI[36] Single Graphic Character Introducer[b] Intended to allow an arbitrary Unicode character to be printed; it would be followed by that character, most likely encoded in UTF-1.[36] Z 154 9A SCI Single Character Introducer[c] To be followed by a single printable character (0x20 through 0x7E) or format effector (0x08 through 0x0D), and to print it as ASCII no matter what graphic or control sets were in use. [ 155 9B CSI Control Sequence Introducer Used to introduce control sequences that take parameters. Used for ANSI escape sequences. \\ 156 9C ST String Terminator Terminates a string started by DCS, SOS, OSC, PM or APC. ] 157 9D OSC Operating System Command Followed by a string of printable characters (0x20 through 0x7E) and format effectors (0x08 through 0x0D), terminated by ST (0x9C), intended for use to allow in-band signaling of protocol information, but rarely used for that purpose.\n\nSome terminal emulators, including xterm, use OSC sequences for setting the window title and changing the colour palette. They may also support terminating an OSC sequence with BEL instead of ST.[37] Kermit used APC to transmit commands.[38]\n\n^ 158 9E PM Privacy Message _ 159 9F APC Application Program Command\n\nOther control code sets\n\n[edit]\n\nThe ISO/IEC 2022 (ECMA-35) extension mechanism allowed escape sequences to change the C0 and C1 sets. The standard C0 control character set shown above is chosen with the sequence ESC ! @ and the above C1 set chosen with the sequence ESC \" C.[23]\n\nSeveral official and unofficial alternatives have been defined, but this is pretty much obsolete. Most were forced to retain a good deal of compatibility with the ASCII controls for interoperability. The standard makes ESC,[39][40] SP and DEL[a] \"fixed\" coded characters, which are available in their ASCII locations in all encodings that conform to the standard.[42] It also specifies that if a C0 set included transmission control (TCn) codes, they must be encoded at their ASCII locations[39] and could not be put in a C1 set,[43] and any new transmission controls must be in a C1 set.[39]\n\nOther C0 control code sets\n\n[edit]\n\nANPA-1312, a text markup language used for news transmission, replaces several C0 control characters.\n\nIPTC 7901, the newer international version of the above, has its own variations.\n\nVideotex has a completely different set.\n\nTeletext also defines a set similar to Videotex.\n\nT.61/T.51,[44] and others[45] replaced EM and GS with SS2 and SS3 so these functions could be used in a 7-bit environment.\n\nSome sets replaced FS with SS2,[46] (same as ANPA-1312).\n\nThe now-withdrawn JIS C 6225, designated JIS X 0207 in later sources.[47] replaced FS with CEX or \"Control Extension\"[48] which introduces control sequences for vertical text behaviour, superscripts and subscripts[49] and for transmitting custom character graphics.[47]\n\nReplacement C1 character sets\n\n[edit]\n\nA specialized C1 control code set is registered for bibliographic use (including string collation), such as by MARC-8.[22][50][51]\n\nVarious specialised C1 control code sets are registered for use by Videotex formats.[21]\n\nEBCDIC defines up to 29 additional control codes besides those present in ASCII. When translating EBCDIC to Unicode (or to ISO 8859), these codes are mapped to C1 control characters in a manner specified by IBM's Character Data Representation Architecture (CDRA).[52][53] Although the New Line (NL) does translate to the ISO/IEC 6429 NEL (although it is often swapped with LF, following UNIX line ending convention),[52] the remainder of the control codes do not correspond. For example, the EBCDIC control SPS and the ECMA-48 control PLU are both used to begin a superscript or end a subscript, but are not mapped to one another. Extended-ASCII-mapped EBCDIC can therefore be regarded as having its own C1 set, although it is not registered with the ISO-IR registry for ISO/IEC 2022.[21]\n\nUnicode\n\n[edit]\n\nMain article: Unicode control characters\n\nUnicode reserves the 65 code points described above for compatibility with the C0 and C1 control codes, giving them the general category Cc (control). These are:\n\nU+0000–U+001F (C0 controls) and U+007F (DEL) assigned to the C0 Controls and Basic Latin block, and\n\nU+0080–U+009F (C1 controls) assigned to the C1 Controls and Latin-1 Supplement block.\n\nUnicode only specifies semantics for the C0 format controls HT, LF, VT, FF, and CR, (note BS is missing); the C0 information separators FS, GS, RS, US (and SP); and the C1 control NEL.[54] The rest of the codes are transparent to Unicode and their meanings are left to higher-level protocols, with ISO/IEC 6429 suggested as a default.[54]\n\nUnicode includes many additional format effector characters besides these, such as marks, embeds, isolates and pops for explicit bidirectional formatting, and the zero-width joiner and non-joiner for controlling ligature use. However these are given the general category Cf (format) rather than Cc.\n\nSee also\n\n[edit]\n\nControl Pictures\n\nANSI escape code\n\nReferences\n\n[edit]"
    }
}