{
    "id": "dbpedia_111_0",
    "rank": 70,
    "data": {
        "url": "https://en.wikipedia.org/wiki/String_(computer_science)",
        "read_more_link": "",
        "language": "en",
        "title": "String (computer science)",
        "top_image": "https://upload.wikimedia.org/wikipedia/commons/6/6b/String_example.png",
        "meta_img": "https://upload.wikimedia.org/wikipedia/commons/6/6b/String_example.png",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/String_example.png/220px-String_example.png",
            "https://wikimedia.org/api/rest_v1/media/math/render/svg/b6fd9dc82ae5e5350875e70b440f7723e670ebe4",
            "https://wikimedia.org/api/rest_v1/media/math/render/svg/54ead89fbb809ed7a42131073164dcf1a5304eea",
            "https://wikimedia.org/api/rest_v1/media/math/render/svg/804e963902ffd26937a60e63e44361e6041d5f08",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Hamming_distance_3_bit_binary.svg/150px-Hamming_distance_3_bit_binary.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/8/8a/OOjs_UI_icon_edit-ltr-progressive.svg/10px-OOjs_UI_icon_edit-ltr-progressive.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2001-07-27T08:19:06+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/String_(computer_science)",
        "text": "Sequence of characters, data type\n\nIn computer programming, a string is traditionally a sequence of characters, either as a literal constant or as some kind of variable. The latter may allow its elements to be mutated and the length changed, or it may be fixed (after creation). A string is generally considered as a data type and is often implemented as an array data structure of bytes (or words) that stores a sequence of elements, typically characters, using some character encoding. String may also denote more general arrays or other sequence (or list) data types and structures.\n\nDepending on the programming language and precise data type used, a variable declared to be a string may either cause storage in memory to be statically allocated for a predetermined maximum length or employ dynamic allocation to allow it to hold a variable number of elements.\n\nWhen a string appears literally in source code, it is known as a string literal or an anonymous string.[1]\n\nIn formal languages, which are used in mathematical logic and theoretical computer science, a string is a finite sequence of symbols that are chosen from a set called an alphabet.\n\nPurpose\n\n[edit]\n\nA primary purpose of strings is to store human-readable text, like words and sentences. Strings are used to communicate information from a computer program to the user of the program.[2] A program may also accept string input from its user. Further, strings may store data expressed as characters yet not intended for human reading.\n\nExample strings and their purposes:\n\nA message like \"file upload complete\" is a string that software shows to end users. In the program's source code, this message would likely appear as a string literal.\n\nUser-entered text, like \"I got a new job today\" as a status update on a social media service. Instead of a string literal, the software would likely store this string in a database.\n\nAlphabetical data, like \"AGATGCCGT\" representing nucleic acid sequences of DNA.[3]\n\nComputer settings or parameters, like \"?action=edit\" as a URL query string. Often these are intended to be somewhat human-readable, though their primary purpose is to communicate to computers.\n\nThe term string may also designate a sequence of data or computer records other than characters — like a \"string of bits\" — but when used without qualification it refers to strings of characters.[4]\n\nHistory\n\n[edit]\n\nUse of the word \"string\" to mean any items arranged in a line, series or succession dates back centuries.[5][6] In 19th-Century typesetting, compositors used the term \"string\" to denote a length of type printed on paper; the string would be measured to determine the compositor's pay.[7][4][8]\n\nUse of the word \"string\" to mean \"a sequence of symbols or linguistic elements in a definite order\" emerged from mathematics, symbolic logic, and linguistic theory to speak about the formal behavior of symbolic systems, setting aside the symbols' meaning.[4]\n\nFor example, logician C. I. Lewis wrote in 1918:[9]\n\nA mathematical system is any set of strings of recognisable marks in which some of the strings are taken initially and the remainder derived from these by operations performed according to rules which are independent of any meaning assigned to the marks. That a system should consist of 'marks' instead of sounds or odours is immaterial.\n\nAccording to Jean E. Sammet, \"the first realistic string handling and pattern matching language\" for computers was COMIT in the 1950s, followed by the SNOBOL language of the early 1960s.[10]\n\nString datatypes\n\n[edit]\n\nA string datatype is a datatype modeled on the idea of a formal string. Strings are such an important and useful datatype that they are implemented in nearly every programming language. In some languages they are available as primitive types and in others as composite types. The syntax of most high-level programming languages allows for a string, usually quoted in some way, to represent an instance of a string datatype; such a meta-string is called a literal or string literal.\n\nString length\n\n[edit]\n\nAlthough formal strings can have an arbitrary finite length, the length of strings in real languages is often constrained to an artificial maximum. In general, there are two types of string datatypes: fixed-length strings, which have a fixed maximum length to be determined at compile time and which use the same amount of memory whether this maximum is needed or not, and variable-length strings, whose length is not arbitrarily fixed and which can use varying amounts of memory depending on the actual requirements at run time (see Memory management). Most strings in modern programming languages are variable-length strings. Of course, even variable-length strings are limited in length – by the size of available computer memory. The string length can be stored as a separate integer (which may put another artificial limit on the length) or implicitly through a termination character, usually a character value with all bits zero such as in C programming language. See also \"Null-terminated\" below.\n\nCharacter encoding\n\n[edit]\n\nString datatypes have historically allocated one byte per character, and, although the exact character set varied by region, character encodings were similar enough that programmers could often get away with ignoring this, since characters a program treated specially (such as period and space and comma) were in the same place in all the encodings a program would encounter. These character sets were typically based on ASCII or EBCDIC. If text in one encoding was displayed on a system using a different encoding, text was often mangled, though often somewhat readable and some computer users learned to read the mangled text.\n\nLogographic languages such as Chinese, Japanese, and Korean (known collectively as CJK) need far more than 256 characters (the limit of a one 8-bit byte per-character encoding) for reasonable representation. The normal solutions involved keeping single-byte representations for ASCII and using two-byte representations for CJK ideographs. Use of these with existing code led to problems with matching and cutting of strings, the severity of which depended on how the character encoding was designed. Some encodings such as the EUC family guarantee that a byte value in the ASCII range will represent only that ASCII character, making the encoding safe for systems that use those characters as field separators. Other encodings such as ISO-2022 and Shift-JIS do not make such guarantees, making matching on byte codes unsafe. These encodings also were not \"self-synchronizing\", so that locating character boundaries required backing up to the start of a string, and pasting two strings together could result in corruption of the second string.\n\nUnicode has simplified the picture somewhat. Most programming languages now have a datatype for Unicode strings. Unicode's preferred byte stream format UTF-8 is designed not to have the problems described above for older multibyte encodings. UTF-8, UTF-16 and UTF-32 require the programmer to know that the fixed-size code units are different from the \"characters\", the main difficulty currently is incorrectly designed APIs that attempt to hide this difference (UTF-32 does make code points fixed-sized, but these are not \"characters\" due to composing codes).\n\nImplementations\n\n[edit]\n\nSome languages, such as C++, Perl and Ruby, normally allow the contents of a string to be changed after it has been created; these are termed mutable strings. In other languages, such as Java, JavaScript, Lua, Python, and Go, the value is fixed and a new string must be created if any alteration is to be made; these are termed immutable strings. Some of these languages with immutable strings also provide another type that is mutable, such as Java and .NET's StringBuilder, the thread-safe Java StringBuffer, and the Cocoa NSMutableString. There are both advantages and disadvantages to immutability: although immutable strings may require inefficiently creating many copies, they are simpler and completely thread-safe.\n\nStrings are typically implemented as arrays of bytes, characters, or code units, in order to allow fast access to individual units or substrings—including characters when they have a fixed length. A few languages such as Haskell implement them as linked lists instead.\n\nSome languages, such as Prolog and Erlang, avoid implementing a dedicated string datatype at all, instead adopting the convention of representing strings as lists of character codes.\n\nRepresentations\n\n[edit]\n\nRepresentations of strings depend heavily on the choice of character repertoire and the method of character encoding. Older string implementations were designed to work with repertoire and encoding defined by ASCII, or more recent extensions like the ISO 8859 series. Modern implementations often use the extensive repertoire defined by Unicode along with a variety of complex encodings such as UTF-8 and UTF-16.\n\nThe term byte string usually indicates a general-purpose string of bytes, rather than strings of only (readable) characters, strings of bits, or such. Byte strings often imply that bytes can take any value and any data can be stored as-is, meaning that there should be no value interpreted as a termination value.\n\nMost string implementations are very similar to variable-length arrays with the entries storing the character codes of corresponding characters. The principal difference is that, with certain encodings, a single logical character may take up more than one entry in the array. This happens for example with UTF-8, where single codes (UCS code points) can take anywhere from one to four bytes, and single characters can take an arbitrary number of codes. In these cases, the logical length of the string (number of characters) differs from the physical length of the array (number of bytes in use). UTF-32 avoids the first part of the problem.\n\nNull-terminated\n\n[edit]\n\nMain article: Null-terminated string\n\nThe length of a string can be stored implicitly by using a special terminating character; often this is the null character (NUL), which has all bits zero, a convention used and perpetuated by the popular C programming language.[11] Hence, this representation is commonly referred to as a C string. This representation of an n-character string takes n + 1 space (1 for the terminator), and is thus an implicit data structure.\n\nIn terminated strings, the terminating code is not an allowable character in any string. Strings with length field do not have this limitation and can also store arbitrary binary data.\n\nAn example of a null-terminated string stored in a 10-byte buffer, along with its ASCII (or more modern UTF-8) representation as 8-bit hexadecimal numbers is:\n\nF R A N K NUL k e f w 4616 5216 4116 4E16 4B16 0016 6B16 6516 6616 7716\n\nThe length of the string in the above example, \"FRANK\", is 5 characters, but it occupies 6 bytes. Characters after the terminator do not form part of the representation; they may be either part of other data or just garbage. (Strings of this form are sometimes called ASCIZ strings, after the original assembly language directive used to declare them.)\n\nByte- and bit-terminated\n\n[edit]\n\nUsing a special byte other than null for terminating strings has historically appeared in both hardware and software, though sometimes with a value that was also a printing character. $ was used by many assembler systems, : used by CDC systems (this character had a value of zero), and the ZX80 used \"[12] since this was the string delimiter in its BASIC language.\n\nSomewhat similar, \"data processing\" machines like the IBM 1401 used a special word mark bit to delimit strings at the left, where the operation would start at the right. This bit had to be clear in all other parts of the string. This meant that, while the IBM 1401 had a seven-bit word, almost no-one ever thought to use this as a feature, and override the assignment of the seventh bit to (for example) handle ASCII codes.\n\nEarly microcomputer software relied upon the fact that ASCII codes do not use the high-order bit, and set it to indicate the end of a string. It must be reset to 0 prior to output.[13]\n\nLength-prefixed\n\n[edit]\n\nThe length of a string can also be stored explicitly, for example by prefixing the string with the length as a byte value. This convention is used in many Pascal dialects; as a consequence, some people call such a string a Pascal string or P-string. Storing the string length as byte limits the maximum string length to 255. To avoid such limitations, improved implementations of P-strings use 16-, 32-, or 64-bit words to store the string length. When the length field covers the address space, strings are limited only by the available memory.\n\nIf the length is bounded, then it can be encoded in constant space, typically a machine word, thus leading to an implicit data structure, taking n + k space, where k is the number of characters in a word (8 for 8-bit ASCII on a 64-bit machine, 1 for 32-bit UTF-32/UCS-4 on a 32-bit machine, etc.). If the length is not bounded, encoding a length n takes log(n) space (see fixed-length code), so length-prefixed strings are a succinct data structure, encoding a string of length n in log(n) + n space.\n\nIn the latter case, the length-prefix field itself does not have fixed length, therefore the actual string data needs to be moved when the string grows such that the length field needs to be increased.\n\nHere is a Pascal string stored in a 10-byte buffer, along with its ASCII / UTF-8 representation:\n\nlength F R A N K k e f w 0516 4616 5216 4116 4E16 4B16 6B16 6516 6616 7716\n\nStrings as records\n\n[edit]\n\nMany languages, including object-oriented ones, implement strings as records with an internal structure like:\n\nclassstring{ size_tlength; char*text; };\n\nHowever, since the implementation is usually hidden, the string must be accessed and modified through member functions. text is a pointer to a dynamically allocated memory area, which might be expanded as needed. See also string (C++).\n\nOther representations\n\n[edit]\n\nBoth character termination and length codes limit strings: For example, C character arrays that contain null (NUL) characters cannot be handled directly by C string library functions: Strings using a length code are limited to the maximum value of the length code.\n\nBoth of these limitations can be overcome by clever programming.\n\nIt is possible to create data structures and functions that manipulate them that do not have the problems associated with character termination and can in principle overcome length code bounds. It is also possible to optimize the string represented using techniques from run length encoding (replacing repeated characters by the character value and a length) and Hamming encoding[clarification needed].\n\nWhile these representations are common, others are possible. Using ropes makes certain string operations, such as insertions, deletions, and concatenations more efficient.\n\nThe core data structure in a text editor is the one that manages the string (sequence of characters) that represents the current state of the file being edited. While that state could be stored in a single long consecutive array of characters, a typical text editor instead uses an alternative representation as its sequence data structure—a gap buffer, a linked list of lines, a piece table, or a rope—which makes certain string operations, such as insertions, deletions, and undoing previous edits, more efficient.[14]\n\nSecurity concerns\n\n[edit]\n\nThe differing memory layout and storage requirements of strings can affect the security of the program accessing the string data. String representations requiring a terminating character are commonly susceptible to buffer overflow problems if the terminating character is not present, caused by a coding error or an attacker deliberately altering the data. String representations adopting a separate length field are also susceptible if the length can be manipulated. In such cases, program code accessing the string data requires bounds checking to ensure that it does not inadvertently access or change data outside of the string memory limits.\n\nString data is frequently obtained from user input to a program. As such, it is the responsibility of the program to validate the string to ensure that it represents the expected format. Performing limited or no validation of user input can cause a program to be vulnerable to code injection attacks.\n\nLiteral strings\n\n[edit]\n\nMain article: String literal\n\nSometimes, strings need to be embedded inside a text file that is both human-readable and intended for consumption by a machine. This is needed in, for example, source code of programming languages, or in configuration files. In this case, the NUL character does not work well as a terminator since it is normally invisible (non-printable) and is difficult to input via a keyboard. Storing the string length would also be inconvenient as manual computation and tracking of the length is tedious and error-prone.\n\nTwo common representations are:\n\nSurrounded by quotation marks (ASCII 0x22 double quote \"str\" or ASCII 0x27 single quote 'str'), used by most programming languages. To be able to include special characters such as the quotation mark itself, newline characters, or non-printable characters, escape sequences are often available, usually prefixed with the backslash character (ASCII 0x5C).\n\nTerminated by a newline sequence, for example in Windows INI files.\n\nNon-text strings\n\n[edit]\n\nWhile character strings are very common uses of strings, a string in computer science may refer generically to any sequence of homogeneously typed data. A bit string or byte string, for example, may be used to represent non-textual binary data retrieved from a communications medium. This data may or may not be represented by a string-specific datatype, depending on the needs of the application, the desire of the programmer, and the capabilities of the programming language being used. If the programming language's string implementation is not 8-bit clean, data corruption may ensue.\n\nC programmers draw a sharp distinction between a \"string\", aka a \"string of characters\", which by definition is always null terminated, vs. a \"byte string\" or \"pseudo string\" which may be stored in the same array but is often not null terminated. Using C string handling functions on such a \"byte string\" often seems to work, but later leads to security problems.[15][16][17]\n\nString processing algorithms\n\n[edit]\n\n\"Stringology\" redirects here. For the physical theory, see String theory.\n\nThere are many algorithms for processing strings, each with various trade-offs. Competing algorithms can be analyzed with respect to run time, storage requirements, and so forth. The name stringology was coined in 1984 by computer scientist Zvi Galil for the theory of algorithms and data structures used for string processing.[18][19][20]\n\nSome categories of algorithms include:\n\nString searching algorithms for finding a given substring or pattern\n\nString manipulation algorithms\n\nSorting algorithms\n\nRegular expression algorithms\n\nParsing a string\n\nSequence mining\n\nAdvanced string algorithms often employ complex mechanisms and data structures, among them suffix trees and finite-state machines.\n\nCharacter string-oriented languages and utilities\n\n[edit]\n\nCharacter strings are such a useful datatype that several languages have been designed in order to make string processing applications easy to write. Examples include the following languages:\n\nAWK\n\nIcon\n\nMUMPS\n\nPerl\n\nRexx\n\nRuby\n\nsed\n\nSNOBOL\n\nTcl\n\nTTM\n\nMany Unix utilities perform simple string manipulations and can be used to easily program some powerful string processing algorithms. Files and finite streams may be viewed as strings.\n\nSome APIs like Multimedia Control Interface, embedded SQL or printf use strings to hold commands that will be interpreted.\n\nMany scripting programming languages, including Perl, Python, Ruby, and Tcl employ regular expressions to facilitate text operations. Perl is particularly noted for its regular expression use,[21] and many other languages and applications implement Perl compatible regular expressions.\n\nSome languages such as Perl and Ruby support string interpolation, which permits arbitrary expressions to be evaluated and included in string literals.\n\nCharacter string functions\n\n[edit]\n\nString functions are used to create strings or change the contents of a mutable string. They also are used to query information about a string. The set of functions and their names varies depending on the computer programming language.\n\nThe most basic example of a string function is the string length function – the function that returns the length of a string (not counting any terminator characters or any of the string's internal structural information) and does not modify the string. This function is often named length or len. For example, length(\"hello world\") would return 11. Another common function is concatenation, where a new string is created by appending two strings, often this is the + addition operator.\n\nSome microprocessor's instruction set architectures contain direct support for string operations, such as block copy (e.g. In intel x86m REPNZ MOVSB).[22]\n\nFormal theory\n\n[edit]\n\nSee also: Tuple\n\nLet Σ be a finite set of distinct, unambiguous symbols (alternatively called characters), called the alphabet. A string (or word[23] or expression[24]) over Σ is any finite sequence of symbols from Σ.[25] For example, if Σ = {0, 1}, then 01011 is a string over Σ.\n\nThe length of a string s is the number of symbols in s (the length of the sequence) and can be any non-negative integer; it is often denoted as |s|. The empty string is the unique string over Σ of length 0, and is denoted ε or λ.[25][26]\n\nThe set of all strings over Σ of length n is denoted Σn. For example, if Σ = {0, 1}, then Σ2 = {00, 01, 10, 11}. We have Σ0 = {ε} for every alphabet Σ.\n\nThe set of all strings over Σ of any length is the Kleene closure of Σ and is denoted Σ*. In terms of Σn,\n\nΣ ∗ = ⋃ n ∈ N ∪ { 0 } Σ n {\\displaystyle \\Sigma ^{*}=\\bigcup _{n\\in \\mathbb {N} \\cup \\{0\\}}\\Sigma ^{n}}\n\nFor example, if Σ = {0, 1}, then Σ* = {ε, 0, 1, 00, 01, 10, 11, 000, 001, 010, 011, ...}. Although the set Σ* itself is countably infinite, each element of Σ* is a string of finite length.\n\nA set of strings over Σ (i.e. any subset of Σ*) is called a formal language over Σ. For example, if Σ = {0, 1}, the set of strings with an even number of zeros, {ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111, ...}, is a formal language over Σ.\n\nConcatenation and substrings\n\n[edit]\n\nConcatenation is an important binary operation on Σ*. For any two strings s and t in Σ*, their concatenation is defined as the sequence of symbols in s followed by the sequence of characters in t, and is denoted st. For example, if Σ = {a, b, ..., z}, s = bear, and t = hug, then st = bearhug and ts = hugbear.\n\nString concatenation is an associative, but non-commutative operation. The empty string ε serves as the identity element; for any string s, εs = sε = s. Therefore, the set Σ* and the concatenation operation form a monoid, the free monoid generated by Σ. In addition, the length function defines a monoid homomorphism from Σ* to the non-negative integers (that is, a function L : Σ ∗ ↦ N ∪ { 0 } {\\displaystyle L:\\Sigma ^{*}\\mapsto \\mathbb {N} \\cup \\{0\\}} , such that L ( s t ) = L ( s ) + L ( t ) ∀ s , t ∈ Σ ∗ {\\displaystyle L(st)=L(s)+L(t)\\quad \\forall s,t\\in \\Sigma ^{*}} ).\n\nA string s is said to be a substring or factor of t if there exist (possibly empty) strings u and v such that t = usv. The relation \"is a substring of\" defines a partial order on Σ*, the least element of which is the empty string.\n\nPrefixes and suffixes\n\n[edit]\n\nA string s is said to be a prefix of t if there exists a string u such that t = su. If u is nonempty, s is said to be a proper prefix of t. Symmetrically, a string s is said to be a suffix of t if there exists a string u such that t = us. If u is nonempty, s is said to be a proper suffix of t. Suffixes and prefixes are substrings of t. Both the relations \"is a prefix of\" and \"is a suffix of\" are prefix orders.\n\nReversal\n\n[edit]\n\nThe reverse of a string is a string with the same symbols but in reverse order. For example, if s = abc (where a, b, and c are symbols of the alphabet), then the reverse of s is cba. A string that is the reverse of itself (e.g., s = madam) is called a palindrome, which also includes the empty string and all strings of length 1.\n\nRotations\n\n[edit]\n\nA string s = uv is said to be a rotation of t if t = vu. For example, if Σ = {0, 1} the string 0011001 is a rotation of 0100110, where u = 00110 and v = 01. As another example, the string abc has three different rotations, viz. abc itself (with u=abc, v=ε), bca (with u=bc, v=a), and cab (with u=c, v=ab).\n\nLexicographical ordering\n\n[edit]\n\nIt is often useful to define an ordering on a set of strings. If the alphabet Σ has a total order (cf. alphabetical order) one can define a total order on Σ* called lexicographical order. The lexicographical order is total if the alphabetical order is, but is not well-founded for any nontrivial alphabet, even if the alphabetical order is. For example, if Σ = {0, 1} and 0 < 1, then the lexicographical order on Σ* includes the relationships ε < 0 < 00 < 000 < ... < 0001 < ... < 001 < ... < 01 < 010 < ... < 011 < 0110 < ... < 01111 < ... < 1 < 10 < 100 < ... < 101 < ... < 111 < ... < 1111 < ... < 11111 ... With respect to this ordering, e.g. the infinite set { 1, 01, 001, 0001, 00001, 000001, ... } has no minimal element.\n\nSee Shortlex for an alternative string ordering that preserves well-foundedness. For the example alphabet, the shortlex order is ε < 0 < 1 < 00 < 01 < 10 < 11 < 000 < 001 < 010 < 011 < 100 < 101 < 0110 < 111 < 0000 < 0001 < 0010 < 0011 < ... < 1111 < 00000 < 00001 ...\n\nString operations\n\n[edit]\n\nA number of additional operations on strings commonly occur in the formal theory. These are given in the article on string operations.\n\nTopology\n\n[edit]\n\nStrings admit the following interpretation as nodes on a graph, where k is the number of symbols in Σ:\n\nFixed-length strings of length n can be viewed as the integer locations in an n-dimensional hypercube with sides of length k-1.\n\nVariable-length strings (of finite length) can be viewed as nodes on a perfect k-ary tree.\n\nInfinite strings (otherwise not considered here) can be viewed as infinite paths on a k-node complete graph.\n\nThe natural topology on the set of fixed-length strings or variable-length strings is the discrete topology, but the natural topology on the set of infinite strings is the limit topology, viewing the set of infinite strings as the inverse limit of the sets of finite strings. This is the construction used for the p-adic numbers and some constructions of the Cantor set, and yields the same topology.\n\nIsomorphisms between string representations of topologies can be found by normalizing according to the lexicographically minimal string rotation.\n\nSee also\n\n[edit]\n\nBinary-safe — a property of string manipulating functions treating their input as raw data stream\n\nBit array — a string of binary digits\n\nC string handling — overview of C string handling\n\nC++ string handling — overview of C++ string handling\n\nComparison of programming languages (string functions)\n\nConnection string — passed to a driver to initiate a connection (e.g., to a database)\n\nEmpty string — its properties and representation in programming languages\n\nIncompressible string — a string that cannot be compressed by any algorithm\n\nRope (data structure) — a data structure for efficiently manipulating long strings\n\nString metric — notions of similarity between strings"
    }
}