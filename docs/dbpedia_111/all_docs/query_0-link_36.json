{
    "id": "dbpedia_111_0",
    "rank": 36,
    "data": {
        "url": "https://en.wikipedia.org/wiki/UTF-8",
        "read_more_link": "",
        "language": "en",
        "title": "Wikipedia",
        "top_image": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "meta_img": "https://en.wikipedia.org/static/favicon/wikipedia.ico",
        "images": [
            "https://en.wikipedia.org/static/images/icons/wikipedia.png",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg",
            "https://en.wikipedia.org/static/images/mobile/copyright/wikipedia-tagline-en.svg",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/UTF-8_takes_over.png/400px-UTF-8_takes_over.png",
            "https://upload.wikimedia.org/wikipedia/commons/thumb/9/97/Unicode_Web_growth.svg/400px-Unicode_Web_growth.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://upload.wikimedia.org/wikipedia/en/thumb/9/96/Symbol_category_class.svg/16px-Symbol_category_class.svg.png",
            "https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1",
            "https://en.wikipedia.org/static/images/footer/wikimedia-button.svg",
            "https://en.wikipedia.org/static/images/footer/poweredby_mediawiki.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Contributors to Wikimedia projects"
        ],
        "publish_date": "2001-11-22T18:22:36+00:00",
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "/static/apple-touch/wikipedia.png",
        "meta_site_name": "",
        "canonical_link": "https://en.wikipedia.org/wiki/UTF-8",
        "text": "ASCII-compatible variable-width encoding of Unicode, using one to four bytes\n\nUTF-8StandardUnicode StandardClassificationUnicode Transformation Format, extended ASCII, variable-length encodingExtendsASCIITransforms / EncodesISO/IEC 10646 (Unicode)Preceded byUTF-1\n\nUTF-8 is a variable-length character encoding standard used for electronic communication. Defined by the Unicode Standard, the name is derived from Unicode Transformation Format ‚Äì 8-bit.[1]\n\nUTF-8 is capable of encoding all 1,112,064[a] valid Unicode code points using one to four one-byte (8-bit) code units. Code points with lower numerical values, which tend to occur more frequently, are encoded using fewer bytes. It was designed for backward compatibility with ASCII: the first 128 characters of Unicode, which correspond one-to-one with ASCII, are encoded using a single byte with the same binary value as ASCII, so that valid ASCII text is valid UTF-8-encoded Unicode as well.\n\nUTF-8 was designed as a superior alternative to UTF-1, a proposed variable-length encoding with partial ASCII compatibility which lacked some features including self-synchronization and fully ASCII-compatible handling of characters such as slashes. Ken Thompson and Rob Pike produced the first implementation for the Plan 9 operating system in September 1992.[2][3] This led to its adoption by X/Open as its specification for FSS-UTF,[4] which would first be officially presented at USENIX in January 1993[5] and subsequently adopted by the Internet Engineering Task Force (IETF) in RFC 2277 (BCP 18)[6] for future internet standards work, replacing Single Byte Character Sets such as Latin-1 in older RFCs.\n\nUTF-8 results in fewer internationalization issues[7][8] than any alternative text encoding, and it has been implemented in all modern operating systems, including Microsoft Windows, and standards such as JSON, where, as is increasingly the case, it is the only allowed form of Unicode.\n\nUTF-8 is the dominant encoding for the World Wide Web (and internet technologies), accounting for 98.2% of all web pages, 99.1% of the top 100,000 pages, and up to 100% for many languages, as of 2024 .[9] Virtually all countries and languages have 95% or more use of UTF-8 encodings on the web.\n\nNaming\n\n[edit]\n\nThe official name for the encoding is UTF-8, the spelling used in all Unicode Consortium documents. Most standards officially list it in upper case as well, but all that do are also case-insensitive and utf-8 is often used in code.[citation needed]\n\nSome other spellings may also be accepted by standards, e.g. web standards (which include CSS, HTML, XML, and HTTP headers) explicitly allow utf8 (and disallow \"unicode\") and many aliases for encodings.[10] Spellings with a space e.g. \"UTF 8\" should not be used. The official Internet Assigned Numbers Authority also lists csUTF8 as the only alias,[11] which is rarely used.\n\nIn Windows, UTF-8 is codepage 65001[12] (i.e. CP_UTF8 in source code).\n\nIn MySQL, UTF-8 is called utf8mb4[13] (with utf8mb3, and its alias utf8, being a subset encoding for characters in the Basic Multilingual Plane[14]).\n\nIn HP PCL, the Symbol-ID for UTF-8 is 18N.[15]\n\nIn Oracle Database (since version 9.0), AL32UTF8[16] means UTF-8. See also CESU-8 for an almost synonym with UTF-8 that rarely should be used.\n\nUTF-8-BOM and UTF-8-NOBOM are sometimes used for text files which contain or do not contain a byte-order mark (BOM), respectively.[citation needed] In Japan especially, UTF-8 encoding without a BOM is sometimes called UTF-8N.[17][18]\n\nEncoding\n\n[edit]\n\nUTF-8 encodes code points in one to four bytes, depending on the value of the code point. In the following table, the x characters are replaced by the bits of the code point:\n\nCode point ‚Üî UTF-8 conversion First code point Last code point Byte 1 Byte 2 Byte 3 Byte 4 U+0000 U+007F 0xxxxxxx U+0080 U+07FF 110xxxxx 10xxxxxx U+0800 U+FFFF 1110xxxx 10xxxxxx 10xxxxxx U+010000 [b]U+10FFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\nThe first 128 code points (ASCII) need 1 byte. The next 1,920 code points need two bytes to encode, which covers the remainder of almost all Latin-script alphabets, and also IPA extensions, Greek, Cyrillic, Coptic, Armenian, Hebrew, Arabic, Syriac, Thaana and N'Ko alphabets, as well as Combining Diacritical Marks. Three bytes are needed for the remaining 61,440 codepoints of the Basic Multilingual Plane (BMP), including most Chinese, Japanese and Korean characters. Four bytes are needed for the 1,048,576 codepoints in the other planes of Unicode, which include emoji (pictographic symbols), less common CJK characters, various historic scripts, and mathematical symbols.\n\nA whole graphic character can take more than 4 bytes, because it is made of more than one code point. For instance, a national flag character takes 8 bytes since it is \"constructed from a pair of Unicode scalar values\" both from outside the BMP.[19][c]\n\nExamples\n\n[edit]\n\nIn the following examples, red, green, and blue digits indicate how bits from the code point are distributed among the UTF-8 bytes. Additional bits added by the UTF-8 encoding process are shown in black.\n\nThe Unicode code point for the euro sign ‚Ç¨ is U+20AC.\n\nAs this code point lies between U+0800 and U+FFFF, this will take three bytes to encode.\n\nHexadecimal 20AC is binary 0010 0000 1010 1100. The two leading zeros are added because a three-byte encoding needs exactly sixteen bits from the code point.\n\nBecause the encoding will be three bytes long, its leading byte starts with three 1s, then a 0 (1110...)\n\nThe four most significant bits of the code point are stored in the remaining low order four bits of this byte (11100010), leaving 12 bits of the code point yet to be encoded (...0000 1010 1100).\n\nAll continuation bytes contain exactly six bits from the code point. So the next six bits of the code point are stored in the low order six bits of the next byte, and 10 is stored in the high order two bits to mark it as a continuation byte (so 10000010).\n\nFinally the last six bits of the code point are stored in the low order six bits of the final byte, and again 10 is stored in the high order two bits (10101100).\n\nThe three bytes 11100010 10000010 10101100 can be more concisely written in hexadecimal, as E2 82 AC.\n\nThe following table summarizes this conversion, as well as others with different lengths in UTF-8.\n\nUTF-8 encoding process Character Binary code point Binary UTF-8 Hex UTF-8 $ U+0024 010 0100 00100100 24 ¬£ U+00A3 000 1010 0011 11000010 10100011 C2 A3 –ò U+0418 100 0001 1000 11010000 10011000 D0 98 ‡§π (Devanagari letter HA) U+0939 0000 1001 0011 1001 11100000 10100100 10111001 E0 A4 B9 ‚Ç¨ U+20AC 0010 0000 1010 1100 11100010 10000010 10101100 E2 82 AC Ìïú U+D55C 1101 0101 0101 1100 11101101 10010101 10011100 ED 95 9C êçà U+10348 0 0001 0000 0011 0100 1000 11110000 10010000 10001101 10001000 F0 90 8D 88 Suppl Private Use Area B U+1096B3 1 0000 1001 0110 1011 0011 11110100 10001001 10011010 10110011 F4 89 9A B3\n\nThe Vietnamese phrase M√¨nh n√≥i ti·∫øng Vi·ªát (®âüÂëê„óÇË∂ä, \"I speak Vietnamese\") is encoded as follows:\n\nCharacter M √¨ n h n √≥ i t i ·∫ø n g V i ·ªá t Code point 4D EC 6E 68 20 6E F3 69 20 74 69 1EBF 6E 67 20 56 69 1EC7 74 Hex UTF-8 C3 AC C3 B3 E1 BA BF E1 BB 87\n\nCharacter ®âü Âëê „óÇ Ë∂ä Code point 2825F 5450 35C2 8D8A Hex UTF-8 F0 A8 89 9F E5 91 90 E3 97 82 E8 B6 8A\n\nCodepage layout\n\n[edit]\n\nThe following table summarizes usage of UTF-8 code units (individual bytes or octets) in a code page format. The upper half is for bytes used only in single-byte codes, so it looks like a normal code page; the lower half is for continuation bytes and leading bytes and is explained further in the legend below.\n\nUTF-8 0 1 2 3 4 5 6 7 8 9 A B C D E F 0x NUL SOH STX ETX EOT ENQ ACK BEL BS HT LF VT FF CR SO SI 1x DLE DC1 DC2 DC3 DC4 NAK SYN ETB CAN EM SUB ESC FS GS RS US 2x SP ! \" # $ % & ' ( ) * + , - . / 3x 0 1 2 3 4 5 6 7 8 9 : ; < = > ? 4x @ A B C D E F G H I J K L M N O 5x P Q R S T U V W X Y Z [ \\ ] ^ _ 6x ` a b c d e f g h i j k l m n o 7x p q r s t u v w x y z { | } ~ DEL 8x +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F 9x +10 +11 +12 +13 +14 +15 +16 +17 +18 +19 +1A +1B +1C +1D +1E +1F Ax +20 +21 +22 +23 +24 +25 +26 +27 +28 +29 +2A +2B +2C +2D +2E +2F Bx +30 +31 +32 +33 +34 +35 +36 +37 +38 +39 +3A +3B +3C +3D +3E +3F Cx 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 Dx 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 Ex 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 Fx 4 4 4 4 4 4 4 4 5 5 5 5 6 6\n\n7-bit (single-byte) code points. They must not be followed by a continuation byte.[20]\n\nContinuation bytes.[21] The cell shows in hexadecimal the value of the 6 bits they add.[d]\n\nLeading bytes for a sequence of multiple bytes, must be followed by exactly N‚àí1 continuation bytes.[22] The tooltip shows the code point range and the Unicode blocks encoded by sequences starting with this byte.\n\nLeading bytes where not all arrangements of continuation bytes are valid. E0 and F0 could start overlong encodings. F4 can start code points greater than U+10FFFF. ED can start code points in the range U+D800‚ÄìU+DFFF, which are invalid UTF-16 surrogate halves.[23]\n\nDo not appear in a valid UTF-8 sequence. C0 and C1 could be used only for an \"overlong\" encoding of a 1-byte character.[24] F5 to FD are leading bytes of 4-byte or longer sequences that can only encode code points larger than U+10FFFF.[23] FE and FF were never assigned any meaning.[25]\n\nOverlong encodings\n\n[edit]\n\nIn principle, it would be possible to inflate the number of bytes in an encoding by padding the code point with leading 0s. To encode the euro sign ‚Ç¨ from the above example in four bytes instead of three, it could be padded with leading 0s until it was 21 bits long ‚Äì 000 000010 000010 101100, and encoded as 11110000 10000010 10000010 10101100 (or F0 82 82 AC in hexadecimal). This is called an overlong encoding.\n\nThe standard specifies that the correct encoding of a code point uses only the minimum number of bytes required to hold the significant bits of the code point.[citation needed] Longer encodings are called overlong and are not valid UTF-8 representations of the code point. This rule maintains a one-to-one correspondence between code points and their valid encodings, so that there is a unique valid encoding for each code point. This ensures that string comparisons and searches are well-defined.\n\nInvalid sequences and error handling\n\n[edit]\n\nNot all sequences of bytes are valid UTF-8. A UTF-8 decoder should be prepared for:\n\ninvalid bytes\n\nan unexpected continuation byte\n\na non-continuation byte before the end of the character\n\nthe string ending before the end of the character (which can happen in simple string truncation)\n\nan overlong encoding\n\na sequence that decodes to an invalid code point\n\nMany of the first UTF-8 decoders would decode these, ignoring incorrect bits and accepting overlong results. Carefully crafted invalid UTF-8 could make them either skip or create ASCII characters such as NUL, slash, or quotes. Invalid UTF-8 has been used to bypass security validations in high-profile products including Microsoft's IIS web server[26] and Apache's Tomcat servlet container.[27] RFC 3629 states \"Implementations of the decoding algorithm MUST protect against decoding invalid sequences.\"[23] The Unicode Standard requires decoders to\n\n\"... treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence.\"\n\nSince RFC 3629 (November 2003), the high and low surrogate halves used by UTF-16 (U+D800 through U+DFFF) and code points not encodable by UTF-16 (those after U+10FFFF) are not legal Unicode values, and their UTF-8 encoding must be treated as an invalid byte sequence. Not decoding unpaired surrogate halves makes it impossible to store invalid UTF-16 (such as Windows filenames or UTF-16 that has been split between the surrogates) as UTF-8,[e] while it is possible with WTF-8.\n\nSome implementations of decoders throw exceptions on errors.[29] This has the disadvantage that it can turn what would otherwise be harmless errors (such as a \"no such file\" error) into a denial of service. For instance early versions of Python 3.0 would exit immediately if the command line or environment variables contained invalid UTF-8.[30]\n\nSince Unicode 6 (October 2010),[31] the standard (chapter 3) has recommended a \"best practice\" where the error is either one byte long, or ends before the first byte that is disallowed. In these decoders E1,A0,C0 is two errors (2 bytes in the first one). This means an error is no more than three bytes long and never contains the start of a valid character, and there are 21952 different possible errors.[f] The standard also recommends replacing each error with the replacement character \"ÔøΩ\" (U+FFFD).\n\nThese recommendations are not often followed. It is common to consider each byte to be an error, in which case E1,A0,C0 is three errors (each 1 byte long). This means there are only 128 different errors, and it is also common to replace them with 128 different characters, to make the decoding \"lossless\".[32]\n\nByte-order mark\n\n[edit]\n\nIf the Unicode byte-order mark (BOM, U+FEFF, technically the U+FEFF ZERO WIDTH NO-BREAK SPACE character) is at the start of a UTF-8 file, the first three bytes will be 0xEF, 0xBB, 0xBF.\n\nThe Unicode Standard neither requires nor recommends the use of the BOM for UTF-8, but warns that it may be encountered at the start of a file trans-coded from another encoding.[33] While ASCII text encoded using UTF-8 is backward compatible with ASCII, this is not true when Unicode Standard recommendations are ignored and a BOM is added. A BOM can confuse software that isn't prepared for it but can otherwise accept UTF-8, e.g. programming languages that permit non-ASCII bytes in string literals but not at the start of the file. Nevertheless, there was and still is software that always inserts a BOM when writing UTF-8, and refuses to correctly interpret UTF-8 unless the first character is a BOM (or the file only contains ASCII).[34]\n\nAdoption\n\n[edit]\n\nSee also: Popularity of text encodings\n\nUTF-8 has been the most common encoding for the World Wide Web since 2008.[36] As of May 2024 , UTF-8 is used by 98.2% of surveyed web sites.[9][g] Although many pages only use ASCII characters to display content, very few websites now declare their encoding to only be ASCII instead of UTF-8.[37] Over 50% of the languages tracked have 100% UTF-8 use.\n\nMany standards only support UTF-8, e.g. JSON exchange requires it (without a byte-order mark (BOM)).[38] UTF-8 is also the recommendation from the WHATWG for HTML and DOM specifications, and stating \"UTF-8 encoding is the most appropriate encoding for interchange of Unicode\"[8] and the Internet Mail Consortium recommends that all e‚Äëmail programs be able to display and create mail using UTF-8.[39][40] The World Wide Web Consortium recommends UTF-8 as the default encoding in XML and HTML (and not just using UTF-8, also declaring it in metadata), \"even when all characters are in the ASCII range ... Using non-UTF-8 encodings can have unexpected results\".[41]\n\nLots of software has the ability to read/write UTF-8. It may though require the user to change options from the normal settings, or may require a BOM (byte-order mark) as the first character to read the file. Examples of software supporting UTF-8 include Microsoft Word,[42][43][44] Microsoft Excel (2016 and later),[45][46] Google Drive, LibreOffice and most databases.\n\nHowever for local text files UTF-8 usage is less prevalent, where legacy single-byte (and a few CJK multi-byte) encodings remain in use. The primary cause for this are outdated text editors that refuse to read UTF-8 unless the first bytes of the file encode a byte-order mark (BOM).[47]\n\nSome software can only read and write UTF-8 (or at least does not require a BOM).[48] Windows Notepad, in all currently supported versions of Windows, defaults to writing UTF-8 without a BOM (a change from the outdated / unsupported Windows 7 Notepad), bringing it into line with most other text editors.[49] Some system files on Windows 11 require UTF-8[50] with no requirement for a BOM, and almost all files on macOS and Linux are required to be UTF-8 without a BOM.[citation needed] Java 18 defaults to reading and writing files as UTF-8,[51] and in older versions (e.g. LTS versions) only the NIO API was changed to do so. Many other programming languages default to UTF-8 for I/O, including Ruby 3.0[52][53] and R 4.2.2.[54] All current versions of Python support UTF-8 for I/O, even on Windows (where it is opt-in for the open() function[55]), and plans exist to make UTF-8 I/O the default in Python 3.15 on all platforms.[56][57] C++23 adopts UTF-8 as the only portable source code file format (surprisingly there was none before).[58]\n\nUsage of UTF-8 in memory is much lower than in other areas, UTF-16 is often used instead. This occurs particularly in Windows, but also in JavaScript, Python,[h] Qt, and many other cross-platform software libraries. Compatibility with the Windows API is the primary reason for this, that choice was initially done due to the belief that direct indexing of the BMP would improve speed. Translating from/to external text which is in UTF-8 slows software down, and more importantly introduces bugs when different pieces of code do not do the exact same translation.\n\nBack-compatibility is a serious impediment to changing code to use UTF-8 instead of a 16-bit encoding, but this is happening. The default string primitive in Go,[59] Julia, Rust, Swift 5,[i] and PyPy[61] uses UTF-8 internally in all cases. Python 3.3 uses UTF-8 internally for Python C API extensions[j][63] and sometimes for strings[62][64] and a future version of Python is planned to store strings as UTF-8 by default.[k][66] Modern versions of Microsoft Visual Studio use UTF-8 internally.[67] Microsoft's SQL Server 2019 added support for UTF-8, and using it results in a 35% speed increase, and \"nearly 50% reduction in storage requirements.\"[l]\n\nAll currently supported Windows versions support UTF-8 in some way (including Xbox);[7] partial support has existed since at least Windows XP. As of May 2019 , Microsoft has reversed its previous position of only recommending UTF-16; the capability to set UTF-8 as the \"code page\" for the Windows API was introduced; and Microsoft recommends programmers use UTF-8,[m] and even states \"UTF-16 [...] is a unique burden that Windows places on code that targets multiple platforms\".[n]\n\nHistory\n\n[edit]\n\nThe International Organization for Standardization (ISO) set out to compose a universal multi-byte character set in 1989. The draft ISO 10646 standard contained a non-required annex called UTF-1 that provided a byte stream encoding of its 32-bit code points. This encoding was not satisfactory on performance grounds, among other problems, and the biggest problem was probably that it did not have a clear separation between ASCII and non-ASCII: new UTF-1 tools would be backward compatible with ASCII-encoded text, but UTF-1-encoded text could confuse existing code expecting ASCII (or extended ASCII), because it could contain continuation bytes in the range 0x21‚Äì0x7E that meant something else in ASCII, e.g., 0x2F for '/', the Unix path directory separator, and this example is reflected in the name and introductory text of its replacement. The table below was derived from a textual description in the annex.\n\nUTF-1 First code point Last code point Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 U+0000 U+009F 00‚Äì9F U+00A0 U+00FF A0 A0‚ÄìFF U+0100 U+4015 A1‚ÄìF5 21‚Äì7E, A0‚ÄìFF U+4016 U+38E2D F6‚ÄìFB 21‚Äì7E, A0‚ÄìFF 21‚Äì7E, A0‚ÄìFF U+38E2E U+7FFFFFFF FC‚ÄìFF 21‚Äì7E, A0‚ÄìFF 21‚Äì7E, A0‚ÄìFF 21‚Äì7E, A0‚ÄìFF 21‚Äì7E, A0‚ÄìFF\n\nIn July 1992, the X/Open committee XoJIG was looking for a better encoding. Dave Prosser of Unix System Laboratories submitted a proposal for one that had faster implementation characteristics and introduced the improvement that 7-bit ASCII characters would only represent themselves; all multi-byte sequences would include only bytes where the high bit was set. The name File System Safe UCS Transformation Format (FSS-UTF) and most of the text of this proposal were later preserved in the final specification.[70][71][72][73]\n\nFSS-UTF\n\n[edit]\n\nFSS-UTF proposal (1992) First code point Last code point Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 U+0000 U+007F 0xxxxxxx U+0080 U+207F 10xxxxxx 1xxxxxxx U+2080 U+8207F 110xxxxx 1xxxxxxx 1xxxxxxx U+82080 U+208207F 1110xxxx 1xxxxxxx 1xxxxxxx 1xxxxxxx U+2082080 U+7FFFFFFF 11110xxx 1xxxxxxx 1xxxxxxx 1xxxxxxx 1xxxxxxx\n\nIn August 1992, this proposal was circulated by an IBM X/Open representative to interested parties. A modification by Ken Thompson of the Plan 9 operating system group at Bell Labs made it self-synchronizing, letting a reader start anywhere and immediately detect character boundaries, at the cost of being somewhat less bit-efficient than the previous proposal. It also abandoned the use of biases and instead added the rule that only the shortest possible encoding is allowed; the additional loss in compactness is relatively insignificant, but readers now have to look out for invalid encodings to avoid reliability and especially security issues. Thompson's design was outlined on September 2, 1992, on a placemat in a New Jersey diner with Rob Pike. In the following days, Pike and Thompson implemented it and updated Plan 9 to use it throughout, and then communicated their success back to X/Open, which accepted it as the specification for FSS-UTF.[72]\n\nFSS-UTF (1992) / UTF-8 (1993)[2] First code point Last code point Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 U+0000 U+007F 0xxxxxxx U+0080 U+07FF 110xxxxx 10xxxxxx U+0800 U+FFFF 1110xxxx 10xxxxxx 10xxxxxx U+10000 U+1FFFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx U+200000 U+3FFFFFF 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx U+4000000 U+7FFFFFFF 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n\nUTF-8 was first officially presented at the USENIX conference in San Diego, from January 25 to 29, 1993. The Internet Engineering Task Force adopted UTF-8 in its Policy on Character Sets and Languages in RFC 2277 (BCP 18) for future internet standards work in January 1998, replacing Single Byte Character Sets such as Latin-1 in older RFCs.[6]\n\nIn November 2003, UTF-8 was restricted by RFC 3629 to match the constraints of the UTF-16 character encoding: explicitly prohibiting code points corresponding to the high and low surrogate characters removed more than 3% of the three-byte sequences, and ending at U+10FFFF removed more than 48% of the four-byte sequences and all five- and six-byte sequences.\n\nStandards\n\n[edit]\n\nThere are several current definitions of UTF-8 in various standards documents:\n\nRFC 3629 / STD 63 (2003), which establishes UTF-8 as a standard internet protocol element\n\nRFC 5198 defines UTF-8 NFC for Network Interchange (2008)\n\nISO/IEC 10646:2014 ¬ß9.1 (2014)[74]\n\nThe Unicode Standard, Version 15.0.0 (2022)[75]\n\nThey supersede the definitions given in the following obsolete works:\n\nThe Unicode Standard, Version 2.0, Appendix A (1996)\n\nISO/IEC 10646-1:1993 Amendment 2 / Annex R (1996)\n\nRFC 2044 (1996)\n\nRFC 2279 (1998)\n\nThe Unicode Standard, Version 3.0, ¬ß2.3 (2000) plus Corrigendum #1 : UTF-8 Shortest Form (2000)\n\nUnicode Standard Annex #27: Unicode 3.1 (2001)[76]\n\nThe Unicode Standard, Version 5.0 (2006)[77]\n\nThe Unicode Standard, Version 6.0 (2010)[78]\n\nThey are all the same in their general mechanics, with the main differences being on issues such as allowed range of code point values and safe handling of invalid input.\n\nComparison with other encodings\n\n[edit]\n\nSee also: Comparison of Unicode encodings\n\nSome of the important features of this encoding are as follows:\n\nBackward compatibility: Backward compatibility with ASCII and the enormous amount of software designed to process ASCII-encoded text was the main driving force behind the design of UTF-8. In UTF-8, single bytes with values in the range of 0 to 127 map directly to Unicode code points in the ASCII range. Single bytes in this range represent characters, as they do in ASCII. Moreover, 7-bit bytes (bytes where the most significant bit is 0) never appear in a multi-byte sequence, and no valid multi-byte sequence decodes to an ASCII code-point. A sequence of 7-bit bytes is both valid ASCII and valid UTF-8, and under either interpretation represents the same sequence of characters. Therefore, the 7-bit bytes in a UTF-8 stream represent all and only the ASCII characters in the stream. Thus, many text processors, parsers, protocols, file formats, text display programs, etc., which use ASCII characters for formatting and control purposes, will continue to work as intended by treating the UTF-8 byte stream as a sequence of single-byte characters, without decoding the multi-byte sequences. ASCII characters on which the processing turns, such as punctuation, whitespace, and control characters will never be encoded as multi-byte sequences. It is therefore safe for such processors to simply ignore or pass-through the multi-byte sequences, without decoding them. For example, ASCII whitespace may be used to tokenize a UTF-8 stream into words; ASCII line-feeds may be used to split a UTF-8 stream into lines; and ASCII NUL characters can be used to split UTF-8-encoded data into null-terminated strings. Similarly, many format strings used by library functions like \"printf\" will correctly handle UTF-8-encoded input arguments.\n\nFallback and auto-detection: Only a small subset of possible byte strings are a valid UTF-8 string: several bytes cannot appear; a byte with the high bit set cannot be alone; and further requirements mean that it is extremely unlikely that a readable text in any extended ASCII is valid UTF-8. Part of the popularity of UTF-8 is due to it providing a form of backward compatibility for these as well. A UTF-8 processor which erroneously receives extended ASCII as input can thus \"auto-detect\" this with very high reliability. A UTF-8 stream may simply contain errors, resulting in the auto-detection scheme producing false positives; but auto-detection is successful in the vast majority of cases, especially with longer texts, and is widely used. It also works to \"fall back\" or replace 8-bit bytes using the appropriate code-point for a legacy encoding when errors in the UTF-8 are detected, allowing recovery even if UTF-8 and legacy encoding is concatenated in the same file.\n\nPrefix code: The first byte indicates the number of bytes in the sequence. Reading from a stream can instantaneously decode each individual fully received sequence, without first having to wait for either the first byte of a next sequence or an end-of-stream indication. The length of multi-byte sequences is easily determined by humans as it is simply the number of high-order 1s in the leading byte. An incorrect character will not be decoded if a stream ends mid-sequence.\n\nSelf-synchronization: The leading bytes and the continuation bytes do not share values (continuation bytes start with the bits 10 while single bytes start with 0 and longer lead bytes start with 11). This means a search will not accidentally find the sequence for one character starting in the middle of another character. It also means the start of a character can be found from a random position by backing up at most 3 bytes to find the leading byte. An incorrect character will not be decoded if a stream starts mid-sequence, and a shorter sequence will never appear inside a longer one.\n\nSorting order: The chosen values of the leading bytes means that a list of UTF-8 strings can be sorted in code point order by sorting the corresponding byte sequences.\n\nSingle-byte\n\n[edit]\n\nUTF-8 can encode any Unicode character, avoiding the need to figure out and set a \"code page\" or otherwise indicate what character set is in use, and allowing output in multiple scripts at the same time. For many scripts there have been more than one single-byte encoding in usage, so even knowing the script was insufficient information to display it correctly.\n\nThe bytes 0xFE and 0xFF do not appear, so a valid UTF-8 stream never matches the UTF-16 byte-order mark (BOM) and thus cannot be confused with it. The absence of 0xFF (0377) also eliminates the need to escape this byte in Telnet (and FTP control connection).\n\nUTF-8 encoded text is larger than specialized single-byte encodings except for plain ASCII characters. In the case of scripts which used 8-bit character sets with non-Latin characters encoded in the upper half (such as most Cyrillic and Greek alphabet code pages), characters in UTF-8 will be double the size. For some scripts, such as Thai and Devanagari (which is used by various South Asian languages), characters will triple in size. There are even examples where a single byte turns into a composite character in Unicode and is thus six times larger in UTF-8. This has caused objections in India and other countries.[citation needed]\n\nIt is possible in UTF-8 (or any other multi-byte encoding) to split or truncate a string in the middle of a character. If the two pieces are not re-appended later before interpretation as characters, this can introduce an invalid sequence at both the end of the previous section and the start of the next, and some decoders will not preserve these bytes and result in data loss. Because UTF-8 is self-synchronizing this will however never introduce a different valid character, and it is also fairly easy to move the truncation point backward to the start of a character.\n\nIf the code points are all the same size, measurements of a fixed number of them is easy. Due to ASCII-era documentation where \"character\" is used as a synonym for \"byte\" this is often considered important. However, by measuring string positions using bytes instead of \"characters\" most algorithms can be easily and efficiently adapted for UTF-8. Searching for a string within a long string can for example be done byte by byte; the self-synchronization property prevents false positives.\n\nOther multi-byte\n\n[edit]\n\nUTF-8 can encode any Unicode character. Files in different scripts can be displayed correctly without having to choose the correct code page or font. For instance, Chinese and Arabic can be written in the same file without specialized markup or manual settings that specify an encoding.\n\nUTF-8 is self-synchronizing: character boundaries are easily identified by scanning for well-defined bit patterns in either direction. If bytes are lost due to error or corruption, one can always locate the next valid character and resume processing. If there is a need to shorten a string to fit a specified field, the previous valid character can easily be found. Many multi-byte encodings such as Shift JIS are much harder to resynchronize. This also means that byte-oriented string-searching algorithms can be used with UTF-8 (as a character is the same as a \"word\" made up of that many bytes), optimized versions of byte searches can be much faster due to hardware support and lookup tables that have only 256 entries. Self-synchronization does however require that bits be reserved for these markers in every byte, increasing the size.\n\nEfficient to encode using simple bitwise operations. UTF-8 does not require slower mathematical operations such as multiplication or division (unlike Shift JIS, GB 2312 and other encodings).\n\nUTF-8 will take more space than a multi-byte encoding designed for a specific script. East Asian legacy encodings generally used two bytes per character yet take three bytes per character in UTF-8.\n\nUTF-16\n\n[edit]\n\nMain article: UTF-16\n\nByte encodings and UTF-8 are represented by byte arrays in programs, and often nothing needs to be done to a function when converting source code from a byte encoding to UTF-8. UTF-16 is represented by 16-bit word arrays, and converting to UTF-16 while maintaining compatibility with existing ASCII-based programs (such as was done with Windows) requires every API and data structure that takes a string to be duplicated, one version accepting byte strings and another version accepting UTF-16. If backward compatibility is not needed, all string handling still must be modified.\n\nText encoded in UTF-8 will be smaller than the same text encoded in UTF-16 if there are more code points below U+0080 than in the range U+0800..U+FFFF. This is true for all modern European languages. It is often true even for languages like Chinese, due to the large number of spaces, newlines, digits, and HTML markup in typical files.\n\nMost communication (e.g. HTML and IP) and storage (e.g. for Unix) was designed for a stream of bytes. A UTF-16 string must use a pair of bytes for each code unit:\n\nThe order of those two bytes becomes an issue and must be specified in the UTF-16 protocol, such as with a byte-order mark (BOM).\n\nIf an odd number of bytes is missing from UTF-16, the whole rest of the string will be meaningless text. Any bytes missing from UTF-8 will still allow the text to be recovered accurately starting with the next character after the missing bytes.\n\nDerivatives\n\n[edit]\n\nThe following implementations show slight differences from the UTF-8 specification. They are incompatible with the UTF-8 specification and may be rejected by conforming UTF-8 applications.\n\nCESU-8\n\n[edit]\n\nMain article: CESU-8\n\nUnicode Technical Report #26[79] assigns the name CESU-8 to a nonstandard variant of UTF-8, in which Unicode characters in supplementary planes are encoded using six bytes, rather than the four bytes required by UTF-8. CESU-8 encoding treats each half of a four-byte UTF-16 surrogate pair as a two-byte UCS-2 character, yielding two three-byte UTF-8 characters, which together represent the original supplementary character. Unicode characters within the Basic Multilingual Plane appear as they would normally in UTF-8. The Report was written to acknowledge and formalize the existence of data encoded as CESU-8, despite the Unicode Consortium discouraging its use, and notes that a possible intentional reason for CESU-8 encoding is preservation of UTF-16 binary collation.\n\nCESU-8 encoding can result from converting UTF-16 data with supplementary characters to UTF-8, using conversion methods that assume UCS-2 data, meaning they are unaware of four-byte UTF-16 supplementary characters. It is primarily an issue on operating systems which extensively use UTF-16 internally, such as Microsoft Windows.[citation needed]\n\nIn Oracle Database, the UTF8 character set uses CESU-8 encoding, and is deprecated. The AL32UTF8 character set uses standards-compliant UTF-8 encoding, and is preferred.[80][81]\n\nCESU-8 is prohibited for use in HTML5 documents.[82][83][84]\n\nMySQL utf8mb3\n\n[edit]\n\nIn MySQL, the utf8mb3 character set is defined to be UTF-8 encoded data with a maximum of three bytes per character, meaning only Unicode characters in the Basic Multilingual Plane (i.e. from UCS-2) are supported. Unicode characters in supplementary planes are explicitly not supported. utf8mb3 is deprecated in favor of the utf8mb4 character set, which uses standards-compliant UTF-8 encoding. utf8 is an alias for utf8mb3, but is intended to become an alias to utf8mb4 in a future release of MySQL.[14] It is possible, though unsupported, to store CESU-8 encoded data in utf8mb3, by handling UTF-16 data with supplementary characters as though it is UCS-2.\n\nModified UTF-8\n\n[edit]\n\nModified UTF-8 (MUTF-8) originated in the Java programming language. In Modified UTF-8, the null character (U+0000) uses the two-byte overlong encoding 11000000 10000000 (hexadecimal C0 80), instead of 00000000 (hexadecimal 00).[85] Modified UTF-8 strings never contain any actual null bytes but can contain all Unicode code points including U+0000,[86] which allows such strings (with a null byte appended) to be processed by traditional null-terminated string functions. All known Modified UTF-8 implementations also treat the surrogate pairs as in CESU-8.\n\nIn normal usage, the language supports standard UTF-8 when reading and writing strings through InputStreamReader and OutputStreamWriter (if it is the platform's default character set or as requested by the program). However it uses Modified UTF-8 for object serialization[87] among other applications of DataInput and DataOutput, for the Java Native Interface,[88] and for embedding constant strings in class files.[89]\n\nThe dex format defined by Dalvik also uses the same modified UTF-8 to represent string values.[90] Tcl also uses the same modified UTF-8[91] as Java for internal representation of Unicode data, but uses strict CESU-8 for external data.\n\nWTF-8\n\n[edit]\n\nIn WTF-8 (Wobbly Transformation Format, 8-bit) unpaired surrogate halves (U+D800 through U+DFFF) are allowed.[92] This is necessary to store possibly-invalid UTF-16, such as Windows filenames. Many systems that deal with UTF-8 work this way without considering it a different encoding, as it is simpler.[93]\n\nThe term \"WTF-8\" has also been used humorously to refer to erroneously doubly-encoded UTF-8[94][95] sometimes with the implication that CP1252 bytes are the only ones encoded.[96]\n\nPEP 383\n\n[edit]\n\nVersion 3 of the Python programming language treats each byte of an invalid UTF-8 bytestream as an error (see also changes with new UTF-8 mode in Python 3.7[97]); this gives 128 different possible errors. Extensions have been created to allow any byte sequence that is assumed to be UTF-8 to be losslessly transformed to UTF-16 or UTF-32, by translating the 128 possible error bytes to reserved code points, and transforming those code points back to error bytes to output UTF-8. The most common approach is to translate the codes to U+DC80...U+DCFF which are low (trailing) surrogate values and thus \"invalid\" UTF-16, as used by Python's PEP 383 (or \"surrogateescape\") approach.[32] Another encoding called MirBSD OPTU-8/16 converts them to U+EF80...U+EFFF in a Private Use Area.[98] In either approach, the byte value is encoded in the low eight bits of the output code point.\n\nThese encodings are very useful because they avoid the need to deal with \"invalid\" byte strings until much later, if at all, and allow \"text\" and \"data\" byte arrays to be the same object. If a program wants to use UTF-16 internally these are required to preserve and use filenames that can use invalid UTF-8;[99] as the Windows filesystem API uses UTF-16, the need to support invalid UTF-8 is less there.[32]\n\nFor the encoding to be reversible, the standard UTF-8 encodings of the code points used for erroneous bytes must be considered invalid. This makes the encoding incompatible with WTF-8 or CESU-8 (though only for 128 code points). When re-encoding it is necessary to be careful of sequences of error code points which convert back to valid UTF-8, which may be used by malicious software to get unexpected characters in the output, though this cannot produce ASCII characters so it is considered comparatively safe, since malicious sequences (such as cross-site scripting) usually rely on ASCII characters.[99]\n\nSee also\n\n[edit]\n\nAlt code\n\nComparison of email clients ¬ß Features\n\nComparison of Unicode encodings\n\nGB 18030, a Chinese encoding that fully supports Unicode\n\nUTF-EBCDIC, a rarely used encoding, even for mainframes it was made for\n\nIconv\n\nPercent-encoding ¬ß Current standard\n\nSpecials (Unicode block)\n\nUnicode and email\n\nUnicode and HTML\n\nCharacter encodings in HTML\n\nNotes\n\n[edit]\n\nReferences\n\n[edit]"
    }
}