{
    "id": "correct_foundationPlace_00092_2",
    "rank": 30,
    "data": {
        "url": "https://cloud.google.com/resource-manager/docs/access-control-folders",
        "read_more_link": "",
        "language": "en",
        "title": "Access control for folders with IAM",
        "top_image": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "meta_img": "https://cloud.google.com/_static/cloud/images/social-icon-google-cloud-1200-630.png",
        "images": [
            "https://www.gstatic.com/devrel-devsite/prod/v85aee14ad439a087d9e958f223735d57cdfda16a7f6497504c9ce4a10dce0396/cloud/images/cloud-logo.svg",
            "https://www.gstatic.com/devrel-devsite/prod/v85aee14ad439a087d9e958f223735d57cdfda16a7f6497504c9ce4a10dce0396/cloud/images/cloud-logo.svg"
        ],
        "movies": [],
        "keywords": [],
        "meta_keywords": [
            ""
        ],
        "tags": null,
        "authors": [],
        "publish_date": null,
        "summary": "",
        "meta_description": "",
        "meta_lang": "en",
        "meta_favicon": "https://www.gstatic.com/devrel-devsite/prod/v85aee14ad439a087d9e958f223735d57cdfda16a7f6497504c9ce4a10dce0396/cloud/images/favicons/onecloud/favicon.ico",
        "meta_site_name": "Google Cloud",
        "canonical_link": "https://cloud.google.com/resource-manager/docs/access-control-folders",
        "text": "Stay organized with collections Save and categorize content based on your preferences.\n\nGoogle Cloud offers Identity and Access Management (IAM), which lets you give more granular access to specific Google Cloud resources and prevents unwanted access to other resources. IAM lets you adopt the security principle of least privilege, so you grant only the necessary access to your resources.\n\nIAM lets you control who (users) has what access (roles) to which resources by setting IAM policies. IAM policies grant specific role(s) to a user giving the user certain permissions.\n\nThis page explains the IAM roles that are available at the Folders level, and how to create and manage IAM policies for folders using the Cloud Resource Manager API. For a detailed description of IAM, read the IAM documentation. In particular, see Granting, Changing, and Revoking Access.\n\nOverview of IAM roles for Folders\n\nTo help you configure your IAM roles, the following table lists:\n\nThe type of actions you want to enable\n\nThe roles required to perform those actions\n\nThe resource level on which you need to apply those roles\n\nType of actions Roles required Resource level Administer folders across the organization resource Folder Admin Organization resource Administer a folder and all projects and folders it contains Folder Admin Specific folder Access and administer a folder's IAM policies Folder IAM Admin Specific folder Create new folders Folder Creator Parent resource for the location of the new folders Move folders and projects Folder Mover Parent resource for both the original folder location and the new folder location Move a project to a new folder Project Editor or Project Owner Parent resource for both the original project location and new project location Delete a folder Folder Editor or Folder Admin Specific folder\n\nBest practices for using IAM roles and permissions with Folders\n\nWhen assigning IAM roles and permissions for use with Folders, keep the following in mind:\n\nUse groups whenever possible to manage principals.\n\nMinimize usage of basic roles, such as owner, editor, and viewer. Instead, try to use the predefined roles for principle of least privilege.\n\nFor folder-wide management, assign permissions at folder level and have projects inherit them automatically. For example, you could assign a department administrator group the Folder Admin role on the folder. Network administrators that need to have department-wide permissions can have the Network Admin role for the folder.\n\nCarefully consider what permissions might change before moving a resource out of a folder. Otherwise, you could risk breaking existing apps or workflows that require those permissions on that resource.\n\nPlan and test your resource hierarchy carefully before moving production projects under folders. One way to do this is to create a test folder under your organization resource and creating a prototype of your intended hierarchy ahead of time.\n\nGranting a role to a user at the folder level will grant the user that role for every resource underneath that folder as well. For example, if you grant a user the Compute Admin role (roles/compute.admin) on a folder, that user will have full control of all Compute Engine resources in every project in that folder.\n\nUnderstanding folder roles and permissions\n\nDefault roles\n\nWhen you create a folder, you are granted the Folder Admin and Folder Editor roles for the folder to provide you full control as the creator. See below for the permissions that these roles provide. These default roles can be changed as normal in an IAM policy.\n\nUsing predefined roles\n\nRole Permissions\n\nFolder Admin\n\n(roles/ resourcemanager.folderAdmin)\n\nProvides all available permissions for working with folders.\n\nLowest-level resources where you can grant this role:\n\nFolder\n\niam.policybindings.*\n\niam.policybindings.get\n\niam.policybindings.list\n\norgpolicy.constraints.list\n\norgpolicy.policies.list\n\norgpolicy.policy.get\n\nresourcemanager.folders.*\n\nresourcemanager.folders.create\n\nresourcemanager. folders. createPolicyBinding\n\nresourcemanager.folders.delete\n\nresourcemanager. folders. deletePolicyBinding\n\nresourcemanager.folders.get\n\nresourcemanager. folders. getIamPolicy\n\nresourcemanager.folders.list\n\nresourcemanager.folders.move\n\nresourcemanager. folders. searchPolicyBindings\n\nresourcemanager. folders. setIamPolicy\n\nresourcemanager. folders. undelete\n\nresourcemanager.folders.update\n\nresourcemanager. folders. updatePolicyBinding\n\nresourcemanager. hierarchyNodes.*\n\nresourcemanager. hierarchyNodes. createTagBinding\n\nresourcemanager. hierarchyNodes. deleteTagBinding\n\nresourcemanager. hierarchyNodes. listEffectiveTags\n\nresourcemanager. hierarchyNodes. listTagBindings\n\nresourcemanager. projects. createPolicyBinding\n\nresourcemanager. projects. deletePolicyBinding\n\nresourcemanager.projects.get\n\nresourcemanager. projects. getIamPolicy\n\nresourcemanager.projects.list\n\nresourcemanager.projects.move\n\nresourcemanager. projects. searchPolicyBindings\n\nresourcemanager. projects. setIamPolicy\n\nresourcemanager. projects. updatePolicyBinding\n\nFolder IAM Admin\n\n(roles/ resourcemanager.folderIamAdmin)\n\nProvides permissions to administer allow policies on folders.\n\nLowest-level resources where you can grant this role:\n\nFolder\n\niam.policybindings.*\n\niam.policybindings.get\n\niam.policybindings.list\n\nresourcemanager. folders. createPolicyBinding\n\nresourcemanager. folders. deletePolicyBinding\n\nresourcemanager.folders.get\n\nresourcemanager. folders. getIamPolicy\n\nresourcemanager. folders. searchPolicyBindings\n\nresourcemanager. folders. setIamPolicy\n\nresourcemanager. folders. updatePolicyBinding\n\nFolder Creator\n\n(roles/ resourcemanager.folderCreator)\n\nProvides permissions needed to browse the hierarchy and create folders.\n\nLowest-level resources where you can grant this role:\n\nFolder\n\nessentialcontacts.contacts.get\n\nessentialcontacts. contacts. list\n\norgpolicy.constraints.list\n\norgpolicy.policies.list\n\norgpolicy.policy.get\n\nresourcemanager.folders.create\n\nresourcemanager.folders.get\n\nresourcemanager.folders.list\n\nresourcemanager.projects.get\n\nresourcemanager.projects.list\n\nFolder Editor\n\n(roles/ resourcemanager.folderEditor)\n\nProvides permission to modify folders as well as to view a folder's allow policy.\n\nLowest-level resources where you can grant this role:\n\nFolder\n\nessentialcontacts.contacts.get\n\nessentialcontacts. contacts. list\n\norgpolicy.constraints.list\n\norgpolicy.policies.list\n\norgpolicy.policy.get\n\nresourcemanager.folders.delete\n\nresourcemanager.folders.get\n\nresourcemanager. folders. getIamPolicy\n\nresourcemanager.folders.list\n\nresourcemanager. folders. searchPolicyBindings\n\nresourcemanager. folders. undelete\n\nresourcemanager.folders.update\n\nresourcemanager.projects.get\n\nresourcemanager.projects.list\n\nFolder Mover\n\n(roles/ resourcemanager.folderMover)\n\nProvides permission to move projects and folders into and out of a parent organization or folder.\n\nLowest-level resources where you can grant this role:\n\nFolder\n\nresourcemanager.folders.move\n\nresourcemanager.projects.move\n\nFolder Viewer\n\n(roles/ resourcemanager.folderViewer)\n\nProvides permission to get a folder and list the folders and projects below a resource.\n\nLowest-level resources where you can grant this role:\n\nFolder\n\nessentialcontacts.contacts.get\n\nessentialcontacts. contacts. list\n\norgpolicy.constraints.list\n\norgpolicy.policies.list\n\norgpolicy.policy.get\n\nresourcemanager.folders.get\n\nresourcemanager.folders.list\n\nresourcemanager.projects.get\n\nresourcemanager.projects.list\n\nCreating custom roles\n\nIn addition to the predefined roles described in this topic, you can also create custom roles that are collections of permissions that you tailor to your needs. When creating a custom role for use with Resource Manager, be aware of the following points:\n\nList and get permissions, such as resourcemanager.projects.get/list, should always be granted as a pair.\n\nWhen your custom role includes the folders.list and folders.get permissions, it should also include projects.list and projects.get.\n\nBe aware that the setIamPolicy permission for organization, folder, and project resources allows the user to grant all other permissions, and so should be assigned with care.\n\nGranting roles to enable folder browsing\n\nList permissions enable folder browsing. The two types of list permissions that typically need to be granted are resourcemanager.folders.list, which allows users to list folders under a resource, and resourcemanager.projects.list, which allows users to browse projects under an organization resource or folder. The Organization Administrator is initialized with both of these permissions. For users that have not been assigned the Organization Administrator role:\n\nresourcemanager.folders.list can be granted via the Folder Viewer and Folder Editor roles.\n\nresourcemanager.projects.list can be granted via the Viewer or Browser roles.\n\nFor organization resource principals to browse the entire organization resource hierarchy, list permissions should be granted at the organization resource level.\n\nGranting roles to enable folder creation\n\nUsers that need to create folders must be granted Folder Creator role on a resource in the hierarchy above the level at which the folder will be created. It can be helpful to grant browsing permissions along with folder creation permissions so users can effectively navigate to where in the hierarchy the folder will be created. See the section above for more information on browsing permissions.\n\nFolder Creator does not grant a user permission to delete a folder. However, when a person creates a folder, that person is automatically granted the Folder Editor role. The Folder Editor role enables folder deletion.\n\nGranting roles to enable folder movement\n\nTo move a folder from one parent resource to another, users must have the Folder Mover role on both old and new parent resources, or on a common ancestor.\n\nGranting roles to enable project movement\n\nTo move a project into a folder, users must have the Project Editor or Project Owner roles on the project and the Project Mover on both the source and destination parent resources.\n\nThis is slightly different from the requirements for moving a non-org-owned project into the organization resource, where users must have the Project Editor or Project Owner role on the project and the Project Creator role on the organization resource.\n\nGranting folder-specific roles to enable project creation\n\nTo create projects, users must have the Project Creator role. However, rather than granting org-wide project creation permission, it can be useful to instead restrict users to viewing and creating projects only within a given folder.\n\nTo grant folder-specific permissions:\n\nGrant the user the Organization Viewer role at the org node level (for example, domain.com).\n\nCreate a new folder.\n\nAdd the user to IAM at the folder level and grant them the Folder Viewer and Project Creator roles.\n\nThis allows the user to create projects in their folder without granting them visibility to every project in the greater organization resource."
    }
}